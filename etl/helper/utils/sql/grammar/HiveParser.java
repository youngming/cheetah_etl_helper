// $ANTLR 3.5.2 grammar/HiveParser.g 2020-11-05 18:51:49

package grammar;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
//import org.apache.hadoop.conf.Configuration;
//import org.apache.hadoop.hive.conf.HiveConf;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/**
   Licensed to the Apache Software Foundation (ASF) under one or more 
   contributor license agreements.  See the NOTICE file distributed with 
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with 
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
@SuppressWarnings("all")
public class HiveParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AMPERSAND", "BITWISEOR", "BITWISEXOR", 
		"BigintLiteral", "ByteLengthLiteral", "COLON", "COMMA", "COMMENT", "CharSetLiteral", 
		"CharSetName", "DIV", "DIVIDE", "DOLLAR", "DOT", "DecimalLiteral", "Digit", 
		"EQUAL", "EQUAL_NS", "Exponent", "GREATERTHAN", "GREATERTHANOREQUALTO", 
		"HexDigit", "Identifier", "KW_ABORT", "KW_ADD", "KW_ADMIN", "KW_AFTER", 
		"KW_ALL", "KW_ALTER", "KW_ANALYZE", "KW_AND", "KW_ARCHIVE", "KW_ARRAY", 
		"KW_AS", "KW_ASC", "KW_AUTHORIZATION", "KW_AUTOCOMMIT", "KW_BEFORE", "KW_BETWEEN", 
		"KW_BIGINT", "KW_BINARY", "KW_BOOLEAN", "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", 
		"KW_BY", "KW_CACHE", "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CHANGE", 
		"KW_CHAR", "KW_CLUSTER", "KW_CLUSTERED", "KW_CLUSTERSTATUS", "KW_COLLECTION", 
		"KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMPACT", "KW_COMPACTIONS", 
		"KW_COMPUTE", "KW_CONCATENATE", "KW_CONF", "KW_CONSTRAINT", "KW_CONTINUE", 
		"KW_CREATE", "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_DATE", "KW_CURRENT_TIMESTAMP", 
		"KW_CURSOR", "KW_DATA", "KW_DATABASE", "KW_DATABASES", "KW_DATE", "KW_DATETIME", 
		"KW_DAY", "KW_DBPROPERTIES", "KW_DECIMAL", "KW_DEFERRED", "KW_DEFINED", 
		"KW_DELETE", "KW_DELIMITED", "KW_DEPENDENCY", "KW_DESC", "KW_DESCRIBE", 
		"KW_DIRECTORIES", "KW_DIRECTORY", "KW_DISABLE", "KW_DISTINCT", "KW_DISTRIBUTE", 
		"KW_DOUBLE", "KW_DROP", "KW_ELEM_TYPE", "KW_ELSE", "KW_ENABLE", "KW_END", 
		"KW_ESCAPED", "KW_EXCHANGE", "KW_EXCLUSIVE", "KW_EXISTS", "KW_EXPLAIN", 
		"KW_EXPORT", "KW_EXTENDED", "KW_EXTERNAL", "KW_FALSE", "KW_FETCH", "KW_FIELDS", 
		"KW_FILE", "KW_FILEFORMAT", "KW_FIRST", "KW_FLOAT", "KW_FOLLOWING", "KW_FOR", 
		"KW_FOREIGN", "KW_FORMAT", "KW_FORMATTED", "KW_FROM", "KW_FULL", "KW_FUNCTION", 
		"KW_FUNCTIONS", "KW_GRANT", "KW_GROUP", "KW_GROUPING", "KW_HAVING", "KW_HOUR", 
		"KW_IDXPROPERTIES", "KW_IF", "KW_IMPORT", "KW_IN", "KW_INDEX", "KW_INDEXES", 
		"KW_INNER", "KW_INPATH", "KW_INPUTDRIVER", "KW_INPUTFORMAT", "KW_INSERT", 
		"KW_INT", "KW_INTERSECT", "KW_INTERVAL", "KW_INTO", "KW_IS", "KW_ISOLATION", 
		"KW_ITEMS", "KW_JAR", "KW_JOIN", "KW_KEY", "KW_KEYS", "KW_KEY_TYPE", "KW_LAST", 
		"KW_LATERAL", "KW_LEFT", "KW_LESS", "KW_LEVEL", "KW_LIKE", "KW_LIMIT", 
		"KW_LINES", "KW_LOAD", "KW_LOCAL", "KW_LOCATION", "KW_LOCK", "KW_LOCKS", 
		"KW_LOGICAL", "KW_LONG", "KW_MACRO", "KW_MAP", "KW_MAPJOIN", "KW_MATERIALIZED", 
		"KW_METADATA", "KW_MINUS", "KW_MINUTE", "KW_MONTH", "KW_MORE", "KW_MSCK", 
		"KW_NONE", "KW_NORELY", "KW_NOSCAN", "KW_NOT", "KW_NOVALIDATE", "KW_NULL", 
		"KW_NULLS", "KW_OF", "KW_OFFSET", "KW_ON", "KW_ONLY", "KW_OPTION", "KW_OR", 
		"KW_ORDER", "KW_OUT", "KW_OUTER", "KW_OUTPUTDRIVER", "KW_OUTPUTFORMAT", 
		"KW_OVER", "KW_OVERWRITE", "KW_OWNER", "KW_PARTIALSCAN", "KW_PARTITION", 
		"KW_PARTITIONED", "KW_PARTITIONS", "KW_PERCENT", "KW_PLUS", "KW_PRECEDING", 
		"KW_PRESERVE", "KW_PRETTY", "KW_PRIMARY", "KW_PRINCIPALS", "KW_PROCEDURE", 
		"KW_PURGE", "KW_RANGE", "KW_READ", "KW_READS", "KW_REBUILD", "KW_RECORDREADER", 
		"KW_RECORDWRITER", "KW_REDUCE", "KW_REFERENCES", "KW_REGEXP", "KW_RELOAD", 
		"KW_RELY", "KW_RENAME", "KW_REPAIR", "KW_REPLACE", "KW_REPLICATION", "KW_RESTRICT", 
		"KW_REVOKE", "KW_REWRITE", "KW_RIGHT", "KW_RLIKE", "KW_ROLE", "KW_ROLES", 
		"KW_ROLLBACK", "KW_ROLLUP", "KW_ROW", "KW_ROWS", "KW_SCHEMA", "KW_SCHEMAS", 
		"KW_SECOND", "KW_SELECT", "KW_SEMI", "KW_SERDE", "KW_SERDEPROPERTIES", 
		"KW_SERVER", "KW_SET", "KW_SETS", "KW_SHARED", "KW_SHOW", "KW_SHOW_DATABASE", 
		"KW_SKEWED", "KW_SMALLINT", "KW_SNAPSHOT", "KW_SORT", "KW_SORTED", "KW_SSL", 
		"KW_START", "KW_STATISTICS", "KW_STORED", "KW_STREAMTABLE", "KW_STRING", 
		"KW_STRUCT", "KW_TABLE", "KW_TABLES", "KW_TABLESAMPLE", "KW_TBLPROPERTIES", 
		"KW_TEMPORARY", "KW_TERMINATED", "KW_THEN", "KW_TIMESTAMP", "KW_TINYINT", 
		"KW_TO", "KW_TOUCH", "KW_TRANSACTION", "KW_TRANSACTIONS", "KW_TRANSFORM", 
		"KW_TRIGGER", "KW_TRUE", "KW_TRUNCATE", "KW_UNARCHIVE", "KW_UNBOUNDED", 
		"KW_UNDO", "KW_UNION", "KW_UNIONTYPE", "KW_UNIQUEJOIN", "KW_UNLOCK", "KW_UNSET", 
		"KW_UNSIGNED", "KW_UPDATE", "KW_URI", "KW_USE", "KW_USER", "KW_USING", 
		"KW_UTC", "KW_UTCTIMESTAMP", "KW_VALIDATE", "KW_VALUES", "KW_VALUE_TYPE", 
		"KW_VARCHAR", "KW_VIEW", "KW_WHEN", "KW_WHERE", "KW_WHILE", "KW_WINDOW", 
		"KW_WITH", "KW_WORK", "KW_WRITE", "KW_YEAR", "LCURLY", "LESSTHAN", "LESSTHANOREQUALTO", 
		"LPAREN", "LSQUARE", "Letter", "MINUS", "MOD", "NOTEQUAL", "Number", "PLUS", 
		"QUESTION", "QuotedIdentifier", "RCURLY", "RPAREN", "RSQUARE", "RegexComponent", 
		"SEMICOLON", "STAR", "SmallintLiteral", "StringLiteral", "TILDE", "TinyintLiteral", 
		"WS", "KW_HOLD_DDLTIME", "KW_IGNORE", "KW_NO_DROP", "KW_OFFLINE", "KW_PROTECTION", 
		"KW_READONLY", "TOK_ABORT_TRANSACTIONS", "TOK_ADMIN_OPTION_FOR", "TOK_ALIASLIST", 
		"TOK_ALLCOLREF", "TOK_ALTERDATABASE_OWNER", "TOK_ALTERDATABASE_PROPERTIES", 
		"TOK_ALTERINDEX_PROPERTIES", "TOK_ALTERINDEX_REBUILD", "TOK_ALTERTABLE", 
		"TOK_ALTERTABLE_ADDCOLS", "TOK_ALTERTABLE_ADDCONSTRAINT", "TOK_ALTERTABLE_ADDPARTS", 
		"TOK_ALTERTABLE_ARCHIVE", "TOK_ALTERTABLE_BUCKETS", "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION", 
		"TOK_ALTERTABLE_CLUSTER_SORT", "TOK_ALTERTABLE_COMPACT", "TOK_ALTERTABLE_DROPCONSTRAINT", 
		"TOK_ALTERTABLE_DROPPARTS", "TOK_ALTERTABLE_DROPPROPERTIES", "TOK_ALTERTABLE_EXCHANGEPARTITION", 
		"TOK_ALTERTABLE_FILEFORMAT", "TOK_ALTERTABLE_LOCATION", "TOK_ALTERTABLE_MERGEFILES", 
		"TOK_ALTERTABLE_PARTCOLTYPE", "TOK_ALTERTABLE_PROPERTIES", "TOK_ALTERTABLE_RENAME", 
		"TOK_ALTERTABLE_RENAMECOL", "TOK_ALTERTABLE_RENAMEPART", "TOK_ALTERTABLE_REPLACECOLS", 
		"TOK_ALTERTABLE_SERDEPROPERTIES", "TOK_ALTERTABLE_SERIALIZER", "TOK_ALTERTABLE_SKEWED", 
		"TOK_ALTERTABLE_SKEWED_LOCATION", "TOK_ALTERTABLE_TOUCH", "TOK_ALTERTABLE_UNARCHIVE", 
		"TOK_ALTERTABLE_UPDATECOLSTATS", "TOK_ALTERTABLE_UPDATESTATS", "TOK_ALTERVIEW", 
		"TOK_ALTERVIEW_ADDPARTS", "TOK_ALTERVIEW_DROPPARTS", "TOK_ALTERVIEW_DROPPROPERTIES", 
		"TOK_ALTERVIEW_PROPERTIES", "TOK_ALTERVIEW_RENAME", "TOK_ANALYZE", "TOK_ANONYMOUS", 
		"TOK_ARCHIVE", "TOK_BIGINT", "TOK_BINARY", "TOK_BOOLEAN", "TOK_CACHE_METADATA", 
		"TOK_CASCADE", "TOK_CHAR", "TOK_CHARSETLITERAL", "TOK_CLUSTERBY", "TOK_COLTYPELIST", 
		"TOK_COL_NAME", "TOK_COMMIT", "TOK_CREATEDATABASE", "TOK_CREATEFUNCTION", 
		"TOK_CREATEINDEX", "TOK_CREATEINDEX_INDEXTBLNAME", "TOK_CREATEMACRO", 
		"TOK_CREATEROLE", "TOK_CREATETABLE", "TOK_CREATEVIEW", "TOK_CROSSJOIN", 
		"TOK_CTE", "TOK_CUBE_GROUPBY", "TOK_DATABASECOMMENT", "TOK_DATABASELOCATION", 
		"TOK_DATABASEPROPERTIES", "TOK_DATE", "TOK_DATELITERAL", "TOK_DATETIME", 
		"TOK_DBPROPLIST", "TOK_DB_TYPE", "TOK_DECIMAL", "TOK_DEFERRED_REBUILDINDEX", 
		"TOK_DELETE_FROM", "TOK_DESCDATABASE", "TOK_DESCFUNCTION", "TOK_DESCTABLE", 
		"TOK_DESTINATION", "TOK_DIR", "TOK_DISABLE", "TOK_DISTRIBUTEBY", "TOK_DOUBLE", 
		"TOK_DROPDATABASE", "TOK_DROPFUNCTION", "TOK_DROPINDEX", "TOK_DROPMACRO", 
		"TOK_DROPROLE", "TOK_DROPTABLE", "TOK_DROPVIEW", "TOK_ENABLE", "TOK_EXPLAIN", 
		"TOK_EXPLAIN_SQ_REWRITE", "TOK_EXPLIST", "TOK_EXPORT", "TOK_FALSE", "TOK_FILE", 
		"TOK_FILEFORMAT_GENERIC", "TOK_FLOAT", "TOK_FOREIGN_KEY", "TOK_FROM", 
		"TOK_FULLOUTERJOIN", "TOK_FUNCTION", "TOK_FUNCTIONDI", "TOK_FUNCTIONSTAR", 
		"TOK_GRANT", "TOK_GRANT_OPTION_FOR", "TOK_GRANT_ROLE", "TOK_GRANT_WITH_ADMIN_OPTION", 
		"TOK_GRANT_WITH_OPTION", "TOK_GROUP", "TOK_GROUPBY", "TOK_GROUPING_SETS", 
		"TOK_GROUPING_SETS_EXPRESSION", "TOK_HAVING", "TOK_HINT", "TOK_HINTARGLIST", 
		"TOK_HINTLIST", "TOK_IFEXISTS", "TOK_IFNOTEXISTS", "TOK_IMPORT", "TOK_INDEXCOMMENT", 
		"TOK_INDEXPROPERTIES", "TOK_INDEXPROPLIST", "TOK_INSERT", "TOK_INSERT_INTO", 
		"TOK_INT", "TOK_INTERVAL_DAY_LITERAL", "TOK_INTERVAL_DAY_TIME", "TOK_INTERVAL_DAY_TIME_LITERAL", 
		"TOK_INTERVAL_HOUR_LITERAL", "TOK_INTERVAL_MINUTE_LITERAL", "TOK_INTERVAL_MONTH_LITERAL", 
		"TOK_INTERVAL_SECOND_LITERAL", "TOK_INTERVAL_YEAR_LITERAL", "TOK_INTERVAL_YEAR_MONTH", 
		"TOK_INTERVAL_YEAR_MONTH_LITERAL", "TOK_ISNOTNULL", "TOK_ISNULL", "TOK_ISOLATION_LEVEL", 
		"TOK_ISOLATION_SNAPSHOT", "TOK_JAR", "TOK_JOIN", "TOK_LATERAL_VIEW", "TOK_LATERAL_VIEW_OUTER", 
		"TOK_LEFTOUTERJOIN", "TOK_LEFTSEMIJOIN", "TOK_LENGTH", "TOK_LIKETABLE", 
		"TOK_LIMIT", "TOK_LIST", "TOK_LOAD", "TOK_LOCKDB", "TOK_LOCKTABLE", "TOK_MAP", 
		"TOK_MAPJOIN", "TOK_METADATA", "TOK_MSCK", "TOK_NORELY", "TOK_NOT_CLUSTERED", 
		"TOK_NOT_SORTED", "TOK_NOVALIDATE", "TOK_NO_DROP", "TOK_NULL", "TOK_NULLS_FIRST", 
		"TOK_NULLS_LAST", "TOK_OFFLINE", "TOK_OFFSET", "TOK_OP_ADD", "TOK_OP_AND", 
		"TOK_OP_BITAND", "TOK_OP_BITNOT", "TOK_OP_BITOR", "TOK_OP_BITXOR", "TOK_OP_DIV", 
		"TOK_OP_EQ", "TOK_OP_GE", "TOK_OP_GT", "TOK_OP_LE", "TOK_OP_LIKE", "TOK_OP_LT", 
		"TOK_OP_MOD", "TOK_OP_MUL", "TOK_OP_NE", "TOK_OP_NOT", "TOK_OP_OR", "TOK_OP_SUB", 
		"TOK_ORDERBY", "TOK_ORREPLACE", "TOK_PARTITIONINGSPEC", "TOK_PARTITIONLOCATION", 
		"TOK_PARTSPEC", "TOK_PARTVAL", "TOK_PERCENT", "TOK_PRIMARY_KEY", "TOK_PRINCIPAL_NAME", 
		"TOK_PRIVILEGE", "TOK_PRIVILEGE_LIST", "TOK_PRIV_ALL", "TOK_PRIV_ALTER_DATA", 
		"TOK_PRIV_ALTER_METADATA", "TOK_PRIV_CREATE", "TOK_PRIV_DELETE", "TOK_PRIV_DROP", 
		"TOK_PRIV_INDEX", "TOK_PRIV_INSERT", "TOK_PRIV_LOCK", "TOK_PRIV_OBJECT", 
		"TOK_PRIV_OBJECT_COL", "TOK_PRIV_SELECT", "TOK_PRIV_SHOW_DATABASE", "TOK_PTBLFUNCTION", 
		"TOK_QUERY", "TOK_READONLY", "TOK_RECORDREADER", "TOK_RECORDWRITER", "TOK_RELOADFUNCTION", 
		"TOK_RELY", "TOK_REPLICATION", "TOK_RESOURCE_ALL", "TOK_RESOURCE_LIST", 
		"TOK_RESOURCE_URI", "TOK_RESTRICT", "TOK_REVOKE", "TOK_REVOKE_ROLE", "TOK_RIGHTOUTERJOIN", 
		"TOK_ROLE", "TOK_ROLLBACK", "TOK_ROLLUP_GROUPBY", "TOK_ROWCOUNT", "TOK_SELECT", 
		"TOK_SELECTDI", "TOK_SELEXPR", "TOK_SERDE", "TOK_SERDENAME", "TOK_SERDEPROPS", 
		"TOK_SERVER_TYPE", "TOK_SET_AUTOCOMMIT", "TOK_SET_COLUMNS_CLAUSE", "TOK_SHOWCOLUMNS", 
		"TOK_SHOWCONF", "TOK_SHOWDATABASES", "TOK_SHOWDBLOCKS", "TOK_SHOWFUNCTIONS", 
		"TOK_SHOWINDEXES", "TOK_SHOWLOCKS", "TOK_SHOWPARTITIONS", "TOK_SHOWTABLES", 
		"TOK_SHOW_COMPACTIONS", "TOK_SHOW_CREATEDATABASE", "TOK_SHOW_CREATETABLE", 
		"TOK_SHOW_GRANT", "TOK_SHOW_ROLES", "TOK_SHOW_ROLE_GRANT", "TOK_SHOW_ROLE_PRINCIPALS", 
		"TOK_SHOW_SET_ROLE", "TOK_SHOW_TABLESTATUS", "TOK_SHOW_TBLPROPERTIES", 
		"TOK_SHOW_TRANSACTIONS", "TOK_SKEWED_LOCATIONS", "TOK_SKEWED_LOCATION_LIST", 
		"TOK_SKEWED_LOCATION_MAP", "TOK_SMALLINT", "TOK_SORTBY", "TOK_START_TRANSACTION", 
		"TOK_STORAGEHANDLER", "TOK_STOREDASDIRS", "TOK_STREAMTABLE", "TOK_STRING", 
		"TOK_STRINGLITERALSEQUENCE", "TOK_STRUCT", "TOK_SUBQUERY", "TOK_SUBQUERY_EXPR", 
		"TOK_SUBQUERY_OP", "TOK_SUBQUERY_OP_NOTEXISTS", "TOK_SUBQUERY_OP_NOTIN", 
		"TOK_SWITCHDATABASE", "TOK_TAB", "TOK_TABALIAS", "TOK_TABCOL", "TOK_TABCOLLIST", 
		"TOK_TABCOLNAME", "TOK_TABCOLVALUE", "TOK_TABCOLVALUES", "TOK_TABCOLVALUE_PAIR", 
		"TOK_TABLEBUCKETSAMPLE", "TOK_TABLECOMMENT", "TOK_TABLEFILEFORMAT", "TOK_TABLELOCATION", 
		"TOK_TABLEPARTCOLS", "TOK_TABLEPROPERTIES", "TOK_TABLEPROPERTY", "TOK_TABLEPROPLIST", 
		"TOK_TABLEROWFORMAT", "TOK_TABLEROWFORMATCOLLITEMS", "TOK_TABLEROWFORMATFIELD", 
		"TOK_TABLEROWFORMATLINES", "TOK_TABLEROWFORMATMAPKEYS", "TOK_TABLEROWFORMATNULL", 
		"TOK_TABLESERIALIZER", "TOK_TABLESKEWED", "TOK_TABLESPLITSAMPLE", "TOK_TABLE_OR_COL", 
		"TOK_TABLE_PARTITION", "TOK_TABLE_TYPE", "TOK_TABNAME", "TOK_TABREF", 
		"TOK_TABSORTCOLNAMEASC", "TOK_TABSORTCOLNAMEDESC", "TOK_TABSRC", "TOK_TABTYPE", 
		"TOK_TEMPORARY", "TOK_TIMESTAMP", "TOK_TIMESTAMPLITERAL", "TOK_TINYINT", 
		"TOK_TMP_FILE", "TOK_TRANSFORM", "TOK_TRUE", "TOK_TRUNCATETABLE", "TOK_TXN_ACCESS_MODE", 
		"TOK_TXN_READ_ONLY", "TOK_TXN_READ_WRITE", "TOK_UNIONALL", "TOK_UNIONDISTINCT", 
		"TOK_UNIONTYPE", "TOK_UNIQUEJOIN", "TOK_UNLOCKDB", "TOK_UNLOCKTABLE", 
		"TOK_UPDATE_TABLE", "TOK_URI_TYPE", "TOK_USER", "TOK_USERSCRIPTCOLNAMES", 
		"TOK_USERSCRIPTCOLSCHEMA", "TOK_VALIDATE", "TOK_VALUES_TABLE", "TOK_VALUE_ROW", 
		"TOK_VARCHAR", "TOK_VIEWPARTCOLS", "TOK_VIRTUAL_TABLE", "TOK_VIRTUAL_TABREF", 
		"TOK_WHERE", "TOK_WINDOWDEF", "TOK_WINDOWRANGE", "TOK_WINDOWSPEC", "TOK_WINDOWVALUES", 
		"993"
	};
	public static final int EOF=-1;
	public static final int AMPERSAND=4;
	public static final int BITWISEOR=5;
	public static final int BITWISEXOR=6;
	public static final int BigintLiteral=7;
	public static final int ByteLengthLiteral=8;
	public static final int COLON=9;
	public static final int COMMA=10;
	public static final int COMMENT=11;
	public static final int CharSetLiteral=12;
	public static final int CharSetName=13;
	public static final int DIV=14;
	public static final int DIVIDE=15;
	public static final int DOLLAR=16;
	public static final int DOT=17;
	public static final int DecimalLiteral=18;
	public static final int Digit=19;
	public static final int EQUAL=20;
	public static final int EQUAL_NS=21;
	public static final int Exponent=22;
	public static final int GREATERTHAN=23;
	public static final int GREATERTHANOREQUALTO=24;
	public static final int HexDigit=25;
	public static final int Identifier=26;
	public static final int KW_ABORT=27;
	public static final int KW_ADD=28;
	public static final int KW_ADMIN=29;
	public static final int KW_AFTER=30;
	public static final int KW_ALL=31;
	public static final int KW_ALTER=32;
	public static final int KW_ANALYZE=33;
	public static final int KW_AND=34;
	public static final int KW_ARCHIVE=35;
	public static final int KW_ARRAY=36;
	public static final int KW_AS=37;
	public static final int KW_ASC=38;
	public static final int KW_AUTHORIZATION=39;
	public static final int KW_AUTOCOMMIT=40;
	public static final int KW_BEFORE=41;
	public static final int KW_BETWEEN=42;
	public static final int KW_BIGINT=43;
	public static final int KW_BINARY=44;
	public static final int KW_BOOLEAN=45;
	public static final int KW_BOTH=46;
	public static final int KW_BUCKET=47;
	public static final int KW_BUCKETS=48;
	public static final int KW_BY=49;
	public static final int KW_CACHE=50;
	public static final int KW_CASCADE=51;
	public static final int KW_CASE=52;
	public static final int KW_CAST=53;
	public static final int KW_CHANGE=54;
	public static final int KW_CHAR=55;
	public static final int KW_CLUSTER=56;
	public static final int KW_CLUSTERED=57;
	public static final int KW_CLUSTERSTATUS=58;
	public static final int KW_COLLECTION=59;
	public static final int KW_COLUMN=60;
	public static final int KW_COLUMNS=61;
	public static final int KW_COMMENT=62;
	public static final int KW_COMMIT=63;
	public static final int KW_COMPACT=64;
	public static final int KW_COMPACTIONS=65;
	public static final int KW_COMPUTE=66;
	public static final int KW_CONCATENATE=67;
	public static final int KW_CONF=68;
	public static final int KW_CONSTRAINT=69;
	public static final int KW_CONTINUE=70;
	public static final int KW_CREATE=71;
	public static final int KW_CROSS=72;
	public static final int KW_CUBE=73;
	public static final int KW_CURRENT=74;
	public static final int KW_CURRENT_DATE=75;
	public static final int KW_CURRENT_TIMESTAMP=76;
	public static final int KW_CURSOR=77;
	public static final int KW_DATA=78;
	public static final int KW_DATABASE=79;
	public static final int KW_DATABASES=80;
	public static final int KW_DATE=81;
	public static final int KW_DATETIME=82;
	public static final int KW_DAY=83;
	public static final int KW_DBPROPERTIES=84;
	public static final int KW_DECIMAL=85;
	public static final int KW_DEFERRED=86;
	public static final int KW_DEFINED=87;
	public static final int KW_DELETE=88;
	public static final int KW_DELIMITED=89;
	public static final int KW_DEPENDENCY=90;
	public static final int KW_DESC=91;
	public static final int KW_DESCRIBE=92;
	public static final int KW_DIRECTORIES=93;
	public static final int KW_DIRECTORY=94;
	public static final int KW_DISABLE=95;
	public static final int KW_DISTINCT=96;
	public static final int KW_DISTRIBUTE=97;
	public static final int KW_DOUBLE=98;
	public static final int KW_DROP=99;
	public static final int KW_ELEM_TYPE=100;
	public static final int KW_ELSE=101;
	public static final int KW_ENABLE=102;
	public static final int KW_END=103;
	public static final int KW_ESCAPED=104;
	public static final int KW_EXCHANGE=105;
	public static final int KW_EXCLUSIVE=106;
	public static final int KW_EXISTS=107;
	public static final int KW_EXPLAIN=108;
	public static final int KW_EXPORT=109;
	public static final int KW_EXTENDED=110;
	public static final int KW_EXTERNAL=111;
	public static final int KW_FALSE=112;
	public static final int KW_FETCH=113;
	public static final int KW_FIELDS=114;
	public static final int KW_FILE=115;
	public static final int KW_FILEFORMAT=116;
	public static final int KW_FIRST=117;
	public static final int KW_FLOAT=118;
	public static final int KW_FOLLOWING=119;
	public static final int KW_FOR=120;
	public static final int KW_FOREIGN=121;
	public static final int KW_FORMAT=122;
	public static final int KW_FORMATTED=123;
	public static final int KW_FROM=124;
	public static final int KW_FULL=125;
	public static final int KW_FUNCTION=126;
	public static final int KW_FUNCTIONS=127;
	public static final int KW_GRANT=128;
	public static final int KW_GROUP=129;
	public static final int KW_GROUPING=130;
	public static final int KW_HAVING=131;
	public static final int KW_HOUR=132;
	public static final int KW_IDXPROPERTIES=133;
	public static final int KW_IF=134;
	public static final int KW_IMPORT=135;
	public static final int KW_IN=136;
	public static final int KW_INDEX=137;
	public static final int KW_INDEXES=138;
	public static final int KW_INNER=139;
	public static final int KW_INPATH=140;
	public static final int KW_INPUTDRIVER=141;
	public static final int KW_INPUTFORMAT=142;
	public static final int KW_INSERT=143;
	public static final int KW_INT=144;
	public static final int KW_INTERSECT=145;
	public static final int KW_INTERVAL=146;
	public static final int KW_INTO=147;
	public static final int KW_IS=148;
	public static final int KW_ISOLATION=149;
	public static final int KW_ITEMS=150;
	public static final int KW_JAR=151;
	public static final int KW_JOIN=152;
	public static final int KW_KEY=153;
	public static final int KW_KEYS=154;
	public static final int KW_KEY_TYPE=155;
	public static final int KW_LAST=156;
	public static final int KW_LATERAL=157;
	public static final int KW_LEFT=158;
	public static final int KW_LESS=159;
	public static final int KW_LEVEL=160;
	public static final int KW_LIKE=161;
	public static final int KW_LIMIT=162;
	public static final int KW_LINES=163;
	public static final int KW_LOAD=164;
	public static final int KW_LOCAL=165;
	public static final int KW_LOCATION=166;
	public static final int KW_LOCK=167;
	public static final int KW_LOCKS=168;
	public static final int KW_LOGICAL=169;
	public static final int KW_LONG=170;
	public static final int KW_MACRO=171;
	public static final int KW_MAP=172;
	public static final int KW_MAPJOIN=173;
	public static final int KW_MATERIALIZED=174;
	public static final int KW_METADATA=175;
	public static final int KW_MINUS=176;
	public static final int KW_MINUTE=177;
	public static final int KW_MONTH=178;
	public static final int KW_MORE=179;
	public static final int KW_MSCK=180;
	public static final int KW_NONE=181;
	public static final int KW_NORELY=182;
	public static final int KW_NOSCAN=183;
	public static final int KW_NOT=184;
	public static final int KW_NOVALIDATE=185;
	public static final int KW_NULL=186;
	public static final int KW_NULLS=187;
	public static final int KW_OF=188;
	public static final int KW_OFFSET=189;
	public static final int KW_ON=190;
	public static final int KW_ONLY=191;
	public static final int KW_OPTION=192;
	public static final int KW_OR=193;
	public static final int KW_ORDER=194;
	public static final int KW_OUT=195;
	public static final int KW_OUTER=196;
	public static final int KW_OUTPUTDRIVER=197;
	public static final int KW_OUTPUTFORMAT=198;
	public static final int KW_OVER=199;
	public static final int KW_OVERWRITE=200;
	public static final int KW_OWNER=201;
	public static final int KW_PARTIALSCAN=202;
	public static final int KW_PARTITION=203;
	public static final int KW_PARTITIONED=204;
	public static final int KW_PARTITIONS=205;
	public static final int KW_PERCENT=206;
	public static final int KW_PLUS=207;
	public static final int KW_PRECEDING=208;
	public static final int KW_PRESERVE=209;
	public static final int KW_PRETTY=210;
	public static final int KW_PRIMARY=211;
	public static final int KW_PRINCIPALS=212;
	public static final int KW_PROCEDURE=213;
	public static final int KW_PURGE=214;
	public static final int KW_RANGE=215;
	public static final int KW_READ=216;
	public static final int KW_READS=217;
	public static final int KW_REBUILD=218;
	public static final int KW_RECORDREADER=219;
	public static final int KW_RECORDWRITER=220;
	public static final int KW_REDUCE=221;
	public static final int KW_REFERENCES=222;
	public static final int KW_REGEXP=223;
	public static final int KW_RELOAD=224;
	public static final int KW_RELY=225;
	public static final int KW_RENAME=226;
	public static final int KW_REPAIR=227;
	public static final int KW_REPLACE=228;
	public static final int KW_REPLICATION=229;
	public static final int KW_RESTRICT=230;
	public static final int KW_REVOKE=231;
	public static final int KW_REWRITE=232;
	public static final int KW_RIGHT=233;
	public static final int KW_RLIKE=234;
	public static final int KW_ROLE=235;
	public static final int KW_ROLES=236;
	public static final int KW_ROLLBACK=237;
	public static final int KW_ROLLUP=238;
	public static final int KW_ROW=239;
	public static final int KW_ROWS=240;
	public static final int KW_SCHEMA=241;
	public static final int KW_SCHEMAS=242;
	public static final int KW_SECOND=243;
	public static final int KW_SELECT=244;
	public static final int KW_SEMI=245;
	public static final int KW_SERDE=246;
	public static final int KW_SERDEPROPERTIES=247;
	public static final int KW_SERVER=248;
	public static final int KW_SET=249;
	public static final int KW_SETS=250;
	public static final int KW_SHARED=251;
	public static final int KW_SHOW=252;
	public static final int KW_SHOW_DATABASE=253;
	public static final int KW_SKEWED=254;
	public static final int KW_SMALLINT=255;
	public static final int KW_SNAPSHOT=256;
	public static final int KW_SORT=257;
	public static final int KW_SORTED=258;
	public static final int KW_SSL=259;
	public static final int KW_START=260;
	public static final int KW_STATISTICS=261;
	public static final int KW_STORED=262;
	public static final int KW_STREAMTABLE=263;
	public static final int KW_STRING=264;
	public static final int KW_STRUCT=265;
	public static final int KW_TABLE=266;
	public static final int KW_TABLES=267;
	public static final int KW_TABLESAMPLE=268;
	public static final int KW_TBLPROPERTIES=269;
	public static final int KW_TEMPORARY=270;
	public static final int KW_TERMINATED=271;
	public static final int KW_THEN=272;
	public static final int KW_TIMESTAMP=273;
	public static final int KW_TINYINT=274;
	public static final int KW_TO=275;
	public static final int KW_TOUCH=276;
	public static final int KW_TRANSACTION=277;
	public static final int KW_TRANSACTIONS=278;
	public static final int KW_TRANSFORM=279;
	public static final int KW_TRIGGER=280;
	public static final int KW_TRUE=281;
	public static final int KW_TRUNCATE=282;
	public static final int KW_UNARCHIVE=283;
	public static final int KW_UNBOUNDED=284;
	public static final int KW_UNDO=285;
	public static final int KW_UNION=286;
	public static final int KW_UNIONTYPE=287;
	public static final int KW_UNIQUEJOIN=288;
	public static final int KW_UNLOCK=289;
	public static final int KW_UNSET=290;
	public static final int KW_UNSIGNED=291;
	public static final int KW_UPDATE=292;
	public static final int KW_URI=293;
	public static final int KW_USE=294;
	public static final int KW_USER=295;
	public static final int KW_USING=296;
	public static final int KW_UTC=297;
	public static final int KW_UTCTIMESTAMP=298;
	public static final int KW_VALIDATE=299;
	public static final int KW_VALUES=300;
	public static final int KW_VALUE_TYPE=301;
	public static final int KW_VARCHAR=302;
	public static final int KW_VIEW=303;
	public static final int KW_WHEN=304;
	public static final int KW_WHERE=305;
	public static final int KW_WHILE=306;
	public static final int KW_WINDOW=307;
	public static final int KW_WITH=308;
	public static final int KW_WORK=309;
	public static final int KW_WRITE=310;
	public static final int KW_YEAR=311;
	public static final int LCURLY=312;
	public static final int LESSTHAN=313;
	public static final int LESSTHANOREQUALTO=314;
	public static final int LPAREN=315;
	public static final int LSQUARE=316;
	public static final int Letter=317;
	public static final int MINUS=318;
	public static final int MOD=319;
	public static final int NOTEQUAL=320;
	public static final int Number=321;
	public static final int PLUS=322;
	public static final int QUESTION=323;
	public static final int QuotedIdentifier=324;
	public static final int RCURLY=325;
	public static final int RPAREN=326;
	public static final int RSQUARE=327;
	public static final int RegexComponent=328;
	public static final int SEMICOLON=329;
	public static final int STAR=330;
	public static final int SmallintLiteral=331;
	public static final int StringLiteral=332;
	public static final int TILDE=333;
	public static final int TinyintLiteral=334;
	public static final int WS=335;
	public static final int KW_HOLD_DDLTIME=449;
	public static final int KW_IGNORE=453;
	public static final int KW_NO_DROP=502;
	public static final int KW_OFFLINE=506;
	public static final int KW_PROTECTION=530;
	public static final int KW_READONLY=534;
	public static final int TOK_ABORT_TRANSACTIONS=643;
	public static final int TOK_ADMIN_OPTION_FOR=644;
	public static final int TOK_ALIASLIST=645;
	public static final int TOK_ALLCOLREF=646;
	public static final int TOK_ALTERDATABASE_OWNER=647;
	public static final int TOK_ALTERDATABASE_PROPERTIES=648;
	public static final int TOK_ALTERINDEX_PROPERTIES=649;
	public static final int TOK_ALTERINDEX_REBUILD=650;
	public static final int TOK_ALTERTABLE=651;
	public static final int TOK_ALTERTABLE_ADDCOLS=652;
	public static final int TOK_ALTERTABLE_ADDCONSTRAINT=653;
	public static final int TOK_ALTERTABLE_ADDPARTS=654;
	public static final int TOK_ALTERTABLE_ARCHIVE=655;
	public static final int TOK_ALTERTABLE_BUCKETS=656;
	public static final int TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION=657;
	public static final int TOK_ALTERTABLE_CLUSTER_SORT=658;
	public static final int TOK_ALTERTABLE_COMPACT=659;
	public static final int TOK_ALTERTABLE_DROPCONSTRAINT=660;
	public static final int TOK_ALTERTABLE_DROPPARTS=661;
	public static final int TOK_ALTERTABLE_DROPPROPERTIES=662;
	public static final int TOK_ALTERTABLE_EXCHANGEPARTITION=663;
	public static final int TOK_ALTERTABLE_FILEFORMAT=664;
	public static final int TOK_ALTERTABLE_LOCATION=665;
	public static final int TOK_ALTERTABLE_MERGEFILES=666;
	public static final int TOK_ALTERTABLE_PARTCOLTYPE=667;
	public static final int TOK_ALTERTABLE_PROPERTIES=668;
	public static final int TOK_ALTERTABLE_RENAME=669;
	public static final int TOK_ALTERTABLE_RENAMECOL=670;
	public static final int TOK_ALTERTABLE_RENAMEPART=671;
	public static final int TOK_ALTERTABLE_REPLACECOLS=672;
	public static final int TOK_ALTERTABLE_SERDEPROPERTIES=673;
	public static final int TOK_ALTERTABLE_SERIALIZER=674;
	public static final int TOK_ALTERTABLE_SKEWED=675;
	public static final int TOK_ALTERTABLE_SKEWED_LOCATION=676;
	public static final int TOK_ALTERTABLE_TOUCH=677;
	public static final int TOK_ALTERTABLE_UNARCHIVE=678;
	public static final int TOK_ALTERTABLE_UPDATECOLSTATS=679;
	public static final int TOK_ALTERTABLE_UPDATESTATS=680;
	public static final int TOK_ALTERVIEW=681;
	public static final int TOK_ALTERVIEW_ADDPARTS=682;
	public static final int TOK_ALTERVIEW_DROPPARTS=683;
	public static final int TOK_ALTERVIEW_DROPPROPERTIES=684;
	public static final int TOK_ALTERVIEW_PROPERTIES=685;
	public static final int TOK_ALTERVIEW_RENAME=686;
	public static final int TOK_ANALYZE=687;
	public static final int TOK_ANONYMOUS=688;
	public static final int TOK_ARCHIVE=689;
	public static final int TOK_BIGINT=690;
	public static final int TOK_BINARY=691;
	public static final int TOK_BOOLEAN=692;
	public static final int TOK_CACHE_METADATA=693;
	public static final int TOK_CASCADE=694;
	public static final int TOK_CHAR=695;
	public static final int TOK_CHARSETLITERAL=696;
	public static final int TOK_CLUSTERBY=697;
	public static final int TOK_COLTYPELIST=698;
	public static final int TOK_COL_NAME=699;
	public static final int TOK_COMMIT=700;
	public static final int TOK_CREATEDATABASE=701;
	public static final int TOK_CREATEFUNCTION=702;
	public static final int TOK_CREATEINDEX=703;
	public static final int TOK_CREATEINDEX_INDEXTBLNAME=704;
	public static final int TOK_CREATEMACRO=705;
	public static final int TOK_CREATEROLE=706;
	public static final int TOK_CREATETABLE=707;
	public static final int TOK_CREATEVIEW=708;
	public static final int TOK_CROSSJOIN=709;
	public static final int TOK_CTE=710;
	public static final int TOK_CUBE_GROUPBY=711;
	public static final int TOK_DATABASECOMMENT=712;
	public static final int TOK_DATABASELOCATION=713;
	public static final int TOK_DATABASEPROPERTIES=714;
	public static final int TOK_DATE=715;
	public static final int TOK_DATELITERAL=716;
	public static final int TOK_DATETIME=717;
	public static final int TOK_DBPROPLIST=718;
	public static final int TOK_DB_TYPE=719;
	public static final int TOK_DECIMAL=720;
	public static final int TOK_DEFERRED_REBUILDINDEX=721;
	public static final int TOK_DELETE_FROM=722;
	public static final int TOK_DESCDATABASE=723;
	public static final int TOK_DESCFUNCTION=724;
	public static final int TOK_DESCTABLE=725;
	public static final int TOK_DESTINATION=726;
	public static final int TOK_DIR=727;
	public static final int TOK_DISABLE=728;
	public static final int TOK_DISTRIBUTEBY=729;
	public static final int TOK_DOUBLE=730;
	public static final int TOK_DROPDATABASE=731;
	public static final int TOK_DROPFUNCTION=732;
	public static final int TOK_DROPINDEX=733;
	public static final int TOK_DROPMACRO=734;
	public static final int TOK_DROPROLE=735;
	public static final int TOK_DROPTABLE=736;
	public static final int TOK_DROPVIEW=737;
	public static final int TOK_ENABLE=738;
	public static final int TOK_EXPLAIN=739;
	public static final int TOK_EXPLAIN_SQ_REWRITE=740;
	public static final int TOK_EXPLIST=741;
	public static final int TOK_EXPORT=742;
	public static final int TOK_FALSE=743;
	public static final int TOK_FILE=744;
	public static final int TOK_FILEFORMAT_GENERIC=745;
	public static final int TOK_FLOAT=746;
	public static final int TOK_FOREIGN_KEY=747;
	public static final int TOK_FROM=748;
	public static final int TOK_FULLOUTERJOIN=749;
	public static final int TOK_FUNCTION=750;
	public static final int TOK_FUNCTIONDI=751;
	public static final int TOK_FUNCTIONSTAR=752;
	public static final int TOK_GRANT=753;
	public static final int TOK_GRANT_OPTION_FOR=754;
	public static final int TOK_GRANT_ROLE=755;
	public static final int TOK_GRANT_WITH_ADMIN_OPTION=756;
	public static final int TOK_GRANT_WITH_OPTION=757;
	public static final int TOK_GROUP=758;
	public static final int TOK_GROUPBY=759;
	public static final int TOK_GROUPING_SETS=760;
	public static final int TOK_GROUPING_SETS_EXPRESSION=761;
	public static final int TOK_HAVING=762;
	public static final int TOK_HINT=763;
	public static final int TOK_HINTARGLIST=764;
	public static final int TOK_HINTLIST=765;
	public static final int TOK_IFEXISTS=766;
	public static final int TOK_IFNOTEXISTS=767;
	public static final int TOK_IMPORT=768;
	public static final int TOK_INDEXCOMMENT=769;
	public static final int TOK_INDEXPROPERTIES=770;
	public static final int TOK_INDEXPROPLIST=771;
	public static final int TOK_INSERT=772;
	public static final int TOK_INSERT_INTO=773;
	public static final int TOK_INT=774;
	public static final int TOK_INTERVAL_DAY_LITERAL=775;
	public static final int TOK_INTERVAL_DAY_TIME=776;
	public static final int TOK_INTERVAL_DAY_TIME_LITERAL=777;
	public static final int TOK_INTERVAL_HOUR_LITERAL=778;
	public static final int TOK_INTERVAL_MINUTE_LITERAL=779;
	public static final int TOK_INTERVAL_MONTH_LITERAL=780;
	public static final int TOK_INTERVAL_SECOND_LITERAL=781;
	public static final int TOK_INTERVAL_YEAR_LITERAL=782;
	public static final int TOK_INTERVAL_YEAR_MONTH=783;
	public static final int TOK_INTERVAL_YEAR_MONTH_LITERAL=784;
	public static final int TOK_ISNOTNULL=785;
	public static final int TOK_ISNULL=786;
	public static final int TOK_ISOLATION_LEVEL=787;
	public static final int TOK_ISOLATION_SNAPSHOT=788;
	public static final int TOK_JAR=789;
	public static final int TOK_JOIN=790;
	public static final int TOK_LATERAL_VIEW=791;
	public static final int TOK_LATERAL_VIEW_OUTER=792;
	public static final int TOK_LEFTOUTERJOIN=793;
	public static final int TOK_LEFTSEMIJOIN=794;
	public static final int TOK_LENGTH=795;
	public static final int TOK_LIKETABLE=796;
	public static final int TOK_LIMIT=797;
	public static final int TOK_LIST=798;
	public static final int TOK_LOAD=799;
	public static final int TOK_LOCKDB=800;
	public static final int TOK_LOCKTABLE=801;
	public static final int TOK_MAP=802;
	public static final int TOK_MAPJOIN=803;
	public static final int TOK_METADATA=804;
	public static final int TOK_MSCK=805;
	public static final int TOK_NORELY=806;
	public static final int TOK_NOT_CLUSTERED=807;
	public static final int TOK_NOT_SORTED=808;
	public static final int TOK_NOVALIDATE=809;
	public static final int TOK_NO_DROP=810;
	public static final int TOK_NULL=811;
	public static final int TOK_NULLS_FIRST=812;
	public static final int TOK_NULLS_LAST=813;
	public static final int TOK_OFFLINE=814;
	public static final int TOK_OFFSET=815;
	public static final int TOK_OP_ADD=816;
	public static final int TOK_OP_AND=817;
	public static final int TOK_OP_BITAND=818;
	public static final int TOK_OP_BITNOT=819;
	public static final int TOK_OP_BITOR=820;
	public static final int TOK_OP_BITXOR=821;
	public static final int TOK_OP_DIV=822;
	public static final int TOK_OP_EQ=823;
	public static final int TOK_OP_GE=824;
	public static final int TOK_OP_GT=825;
	public static final int TOK_OP_LE=826;
	public static final int TOK_OP_LIKE=827;
	public static final int TOK_OP_LT=828;
	public static final int TOK_OP_MOD=829;
	public static final int TOK_OP_MUL=830;
	public static final int TOK_OP_NE=831;
	public static final int TOK_OP_NOT=832;
	public static final int TOK_OP_OR=833;
	public static final int TOK_OP_SUB=834;
	public static final int TOK_ORDERBY=835;
	public static final int TOK_ORREPLACE=836;
	public static final int TOK_PARTITIONINGSPEC=837;
	public static final int TOK_PARTITIONLOCATION=838;
	public static final int TOK_PARTSPEC=839;
	public static final int TOK_PARTVAL=840;
	public static final int TOK_PERCENT=841;
	public static final int TOK_PRIMARY_KEY=842;
	public static final int TOK_PRINCIPAL_NAME=843;
	public static final int TOK_PRIVILEGE=844;
	public static final int TOK_PRIVILEGE_LIST=845;
	public static final int TOK_PRIV_ALL=846;
	public static final int TOK_PRIV_ALTER_DATA=847;
	public static final int TOK_PRIV_ALTER_METADATA=848;
	public static final int TOK_PRIV_CREATE=849;
	public static final int TOK_PRIV_DELETE=850;
	public static final int TOK_PRIV_DROP=851;
	public static final int TOK_PRIV_INDEX=852;
	public static final int TOK_PRIV_INSERT=853;
	public static final int TOK_PRIV_LOCK=854;
	public static final int TOK_PRIV_OBJECT=855;
	public static final int TOK_PRIV_OBJECT_COL=856;
	public static final int TOK_PRIV_SELECT=857;
	public static final int TOK_PRIV_SHOW_DATABASE=858;
	public static final int TOK_PTBLFUNCTION=859;
	public static final int TOK_QUERY=860;
	public static final int TOK_READONLY=861;
	public static final int TOK_RECORDREADER=862;
	public static final int TOK_RECORDWRITER=863;
	public static final int TOK_RELOADFUNCTION=864;
	public static final int TOK_RELY=865;
	public static final int TOK_REPLICATION=866;
	public static final int TOK_RESOURCE_ALL=867;
	public static final int TOK_RESOURCE_LIST=868;
	public static final int TOK_RESOURCE_URI=869;
	public static final int TOK_RESTRICT=870;
	public static final int TOK_REVOKE=871;
	public static final int TOK_REVOKE_ROLE=872;
	public static final int TOK_RIGHTOUTERJOIN=873;
	public static final int TOK_ROLE=874;
	public static final int TOK_ROLLBACK=875;
	public static final int TOK_ROLLUP_GROUPBY=876;
	public static final int TOK_ROWCOUNT=877;
	public static final int TOK_SELECT=878;
	public static final int TOK_SELECTDI=879;
	public static final int TOK_SELEXPR=880;
	public static final int TOK_SERDE=881;
	public static final int TOK_SERDENAME=882;
	public static final int TOK_SERDEPROPS=883;
	public static final int TOK_SERVER_TYPE=884;
	public static final int TOK_SET_AUTOCOMMIT=885;
	public static final int TOK_SET_COLUMNS_CLAUSE=886;
	public static final int TOK_SHOWCOLUMNS=887;
	public static final int TOK_SHOWCONF=888;
	public static final int TOK_SHOWDATABASES=889;
	public static final int TOK_SHOWDBLOCKS=890;
	public static final int TOK_SHOWFUNCTIONS=891;
	public static final int TOK_SHOWINDEXES=892;
	public static final int TOK_SHOWLOCKS=893;
	public static final int TOK_SHOWPARTITIONS=894;
	public static final int TOK_SHOWTABLES=895;
	public static final int TOK_SHOW_COMPACTIONS=896;
	public static final int TOK_SHOW_CREATEDATABASE=897;
	public static final int TOK_SHOW_CREATETABLE=898;
	public static final int TOK_SHOW_GRANT=899;
	public static final int TOK_SHOW_ROLES=900;
	public static final int TOK_SHOW_ROLE_GRANT=901;
	public static final int TOK_SHOW_ROLE_PRINCIPALS=902;
	public static final int TOK_SHOW_SET_ROLE=903;
	public static final int TOK_SHOW_TABLESTATUS=904;
	public static final int TOK_SHOW_TBLPROPERTIES=905;
	public static final int TOK_SHOW_TRANSACTIONS=906;
	public static final int TOK_SKEWED_LOCATIONS=907;
	public static final int TOK_SKEWED_LOCATION_LIST=908;
	public static final int TOK_SKEWED_LOCATION_MAP=909;
	public static final int TOK_SMALLINT=910;
	public static final int TOK_SORTBY=911;
	public static final int TOK_START_TRANSACTION=912;
	public static final int TOK_STORAGEHANDLER=913;
	public static final int TOK_STOREDASDIRS=914;
	public static final int TOK_STREAMTABLE=915;
	public static final int TOK_STRING=916;
	public static final int TOK_STRINGLITERALSEQUENCE=917;
	public static final int TOK_STRUCT=918;
	public static final int TOK_SUBQUERY=919;
	public static final int TOK_SUBQUERY_EXPR=920;
	public static final int TOK_SUBQUERY_OP=921;
	public static final int TOK_SUBQUERY_OP_NOTEXISTS=922;
	public static final int TOK_SUBQUERY_OP_NOTIN=923;
	public static final int TOK_SWITCHDATABASE=924;
	public static final int TOK_TAB=925;
	public static final int TOK_TABALIAS=926;
	public static final int TOK_TABCOL=927;
	public static final int TOK_TABCOLLIST=928;
	public static final int TOK_TABCOLNAME=929;
	public static final int TOK_TABCOLVALUE=930;
	public static final int TOK_TABCOLVALUES=931;
	public static final int TOK_TABCOLVALUE_PAIR=932;
	public static final int TOK_TABLEBUCKETSAMPLE=933;
	public static final int TOK_TABLECOMMENT=934;
	public static final int TOK_TABLEFILEFORMAT=935;
	public static final int TOK_TABLELOCATION=936;
	public static final int TOK_TABLEPARTCOLS=937;
	public static final int TOK_TABLEPROPERTIES=938;
	public static final int TOK_TABLEPROPERTY=939;
	public static final int TOK_TABLEPROPLIST=940;
	public static final int TOK_TABLEROWFORMAT=941;
	public static final int TOK_TABLEROWFORMATCOLLITEMS=942;
	public static final int TOK_TABLEROWFORMATFIELD=943;
	public static final int TOK_TABLEROWFORMATLINES=944;
	public static final int TOK_TABLEROWFORMATMAPKEYS=945;
	public static final int TOK_TABLEROWFORMATNULL=946;
	public static final int TOK_TABLESERIALIZER=947;
	public static final int TOK_TABLESKEWED=948;
	public static final int TOK_TABLESPLITSAMPLE=949;
	public static final int TOK_TABLE_OR_COL=950;
	public static final int TOK_TABLE_PARTITION=951;
	public static final int TOK_TABLE_TYPE=952;
	public static final int TOK_TABNAME=953;
	public static final int TOK_TABREF=954;
	public static final int TOK_TABSORTCOLNAMEASC=955;
	public static final int TOK_TABSORTCOLNAMEDESC=956;
	public static final int TOK_TABSRC=957;
	public static final int TOK_TABTYPE=958;
	public static final int TOK_TEMPORARY=959;
	public static final int TOK_TIMESTAMP=960;
	public static final int TOK_TIMESTAMPLITERAL=961;
	public static final int TOK_TINYINT=962;
	public static final int TOK_TMP_FILE=963;
	public static final int TOK_TRANSFORM=964;
	public static final int TOK_TRUE=965;
	public static final int TOK_TRUNCATETABLE=966;
	public static final int TOK_TXN_ACCESS_MODE=967;
	public static final int TOK_TXN_READ_ONLY=968;
	public static final int TOK_TXN_READ_WRITE=969;
	public static final int TOK_UNIONALL=970;
	public static final int TOK_UNIONDISTINCT=971;
	public static final int TOK_UNIONTYPE=972;
	public static final int TOK_UNIQUEJOIN=973;
	public static final int TOK_UNLOCKDB=974;
	public static final int TOK_UNLOCKTABLE=975;
	public static final int TOK_UPDATE_TABLE=976;
	public static final int TOK_URI_TYPE=977;
	public static final int TOK_USER=978;
	public static final int TOK_USERSCRIPTCOLNAMES=979;
	public static final int TOK_USERSCRIPTCOLSCHEMA=980;
	public static final int TOK_VALIDATE=981;
	public static final int TOK_VALUES_TABLE=982;
	public static final int TOK_VALUE_ROW=983;
	public static final int TOK_VARCHAR=984;
	public static final int TOK_VIEWPARTCOLS=985;
	public static final int TOK_VIRTUAL_TABLE=986;
	public static final int TOK_VIRTUAL_TABREF=987;
	public static final int TOK_WHERE=988;
	public static final int TOK_WINDOWDEF=989;
	public static final int TOK_WINDOWRANGE=990;
	public static final int TOK_WINDOWSPEC=991;
	public static final int TOK_WINDOWVALUES=992;

	// delegates
	public HiveParser_SelectClauseParser gSelectClauseParser;
	public HiveParser_FromClauseParser gFromClauseParser;
	public HiveParser_IdentifiersParser gIdentifiersParser;
	public Parser[] getDelegates() {
		return new Parser[] {gSelectClauseParser, gFromClauseParser, gIdentifiersParser};
	}

	// delegators


	public HiveParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public HiveParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
		gSelectClauseParser = new HiveParser_SelectClauseParser(input, state, this);
		gFromClauseParser = new HiveParser_FromClauseParser(input, state, this);
		gIdentifiersParser = new HiveParser_IdentifiersParser(input, state, this);
	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
		gSelectClauseParser.setTreeAdaptor(this.adaptor);gFromClauseParser.setTreeAdaptor(this.adaptor);gIdentifiersParser.setTreeAdaptor(this.adaptor);
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return HiveParser.tokenNames; }
	@Override public String getGrammarFileName() { return "grammar/HiveParser.g"; }


	  ArrayList<ParseError> errors = new ArrayList<ParseError>();
	  Stack msgs = new Stack<String>();

	  private static HashMap<String, String> xlateMap;
	  static {
	    //this is used to support auto completion in CLI
	    xlateMap = new HashMap<String, String>();

	    // Keywords
	    xlateMap.put("KW_TRUE", "TRUE");
	    xlateMap.put("KW_FALSE", "FALSE");
	    xlateMap.put("KW_ALL", "ALL");
	    xlateMap.put("KW_NONE", "NONE");
	    xlateMap.put("KW_AND", "AND");
	    xlateMap.put("KW_OR", "OR");
	    xlateMap.put("KW_NOT", "NOT");
	    xlateMap.put("KW_LIKE", "LIKE");

	    xlateMap.put("KW_ASC", "ASC");
	    xlateMap.put("KW_DESC", "DESC");
	    xlateMap.put("KW_NULLS", "NULLS");
	    xlateMap.put("KW_LAST", "LAST");
	    xlateMap.put("KW_ORDER", "ORDER");
	    xlateMap.put("KW_BY", "BY");
	    xlateMap.put("KW_GROUP", "GROUP");
	    xlateMap.put("KW_WHERE", "WHERE");
	    xlateMap.put("KW_FROM", "FROM");
	    xlateMap.put("KW_AS", "AS");
	    xlateMap.put("KW_SELECT", "SELECT");
	    xlateMap.put("KW_DISTINCT", "DISTINCT");
	    xlateMap.put("KW_INSERT", "INSERT");
	    xlateMap.put("KW_OVERWRITE", "OVERWRITE");
	    xlateMap.put("KW_OUTER", "OUTER");
	    xlateMap.put("KW_JOIN", "JOIN");
	    xlateMap.put("KW_LEFT", "LEFT");
	    xlateMap.put("KW_RIGHT", "RIGHT");
	    xlateMap.put("KW_FULL", "FULL");
	    xlateMap.put("KW_ON", "ON");
	    xlateMap.put("KW_PARTITION", "PARTITION");
	    xlateMap.put("KW_PARTITIONS", "PARTITIONS");
	    xlateMap.put("KW_TABLE", "TABLE");
	    xlateMap.put("KW_TABLES", "TABLES");
	    xlateMap.put("KW_TBLPROPERTIES", "TBLPROPERTIES");
	    xlateMap.put("KW_SHOW", "SHOW");
	    xlateMap.put("KW_MSCK", "MSCK");
	    xlateMap.put("KW_DIRECTORY", "DIRECTORY");
	    xlateMap.put("KW_LOCAL", "LOCAL");
	    xlateMap.put("KW_TRANSFORM", "TRANSFORM");
	    xlateMap.put("KW_USING", "USING");
	    xlateMap.put("KW_CLUSTER", "CLUSTER");
	    xlateMap.put("KW_DISTRIBUTE", "DISTRIBUTE");
	    xlateMap.put("KW_SORT", "SORT");
	    xlateMap.put("KW_UNION", "UNION");
	    xlateMap.put("KW_LOAD", "LOAD");
	    xlateMap.put("KW_DATA", "DATA");
	    xlateMap.put("KW_INPATH", "INPATH");
	    xlateMap.put("KW_IS", "IS");
	    xlateMap.put("KW_NULL", "NULL");
	    xlateMap.put("KW_CREATE", "CREATE");
	    xlateMap.put("KW_EXTERNAL", "EXTERNAL");
	    xlateMap.put("KW_ALTER", "ALTER");
	    xlateMap.put("KW_DESCRIBE", "DESCRIBE");
	    xlateMap.put("KW_DROP", "DROP");
	    xlateMap.put("KW_RENAME", "RENAME");
	    xlateMap.put("KW_TO", "TO");
	    xlateMap.put("KW_COMMENT", "COMMENT");
	    xlateMap.put("KW_BOOLEAN", "BOOLEAN");
	    xlateMap.put("KW_TINYINT", "TINYINT");
	    xlateMap.put("KW_SMALLINT", "SMALLINT");
	    xlateMap.put("KW_INT", "INT");
	    xlateMap.put("KW_BIGINT", "BIGINT");
	    xlateMap.put("KW_FLOAT", "FLOAT");
	    xlateMap.put("KW_DOUBLE", "DOUBLE");
	    xlateMap.put("KW_DATE", "DATE");
	    xlateMap.put("KW_DATETIME", "DATETIME");
	    xlateMap.put("KW_TIMESTAMP", "TIMESTAMP");
	    xlateMap.put("KW_STRING", "STRING");
	    xlateMap.put("KW_BINARY", "BINARY");
	    xlateMap.put("KW_ARRAY", "ARRAY");
	    xlateMap.put("KW_MAP", "MAP");
	    xlateMap.put("KW_REDUCE", "REDUCE");
	    xlateMap.put("KW_PARTITIONED", "PARTITIONED");
	    xlateMap.put("KW_CLUSTERED", "CLUSTERED");
	    xlateMap.put("KW_SORTED", "SORTED");
	    xlateMap.put("KW_INTO", "INTO");
	    xlateMap.put("KW_BUCKETS", "BUCKETS");
	    xlateMap.put("KW_ROW", "ROW");
	    xlateMap.put("KW_FORMAT", "FORMAT");
	    xlateMap.put("KW_DELIMITED", "DELIMITED");
	    xlateMap.put("KW_FIELDS", "FIELDS");
	    xlateMap.put("KW_TERMINATED", "TERMINATED");
	    xlateMap.put("KW_COLLECTION", "COLLECTION");
	    xlateMap.put("KW_ITEMS", "ITEMS");
	    xlateMap.put("KW_KEYS", "KEYS");
	    xlateMap.put("KW_KEY_TYPE", "$KEY$");
	    xlateMap.put("KW_LINES", "LINES");
	    xlateMap.put("KW_STORED", "STORED");
	    xlateMap.put("KW_SEQUENCEFILE", "SEQUENCEFILE");
	    xlateMap.put("KW_TEXTFILE", "TEXTFILE");
	    xlateMap.put("KW_INPUTFORMAT", "INPUTFORMAT");
	    xlateMap.put("KW_OUTPUTFORMAT", "OUTPUTFORMAT");
	    xlateMap.put("KW_LOCATION", "LOCATION");
	    xlateMap.put("KW_TABLESAMPLE", "TABLESAMPLE");
	    xlateMap.put("KW_BUCKET", "BUCKET");
	    xlateMap.put("KW_OUT", "OUT");
	    xlateMap.put("KW_OF", "OF");
	    xlateMap.put("KW_CAST", "CAST");
	    xlateMap.put("KW_ADD", "ADD");
	    xlateMap.put("KW_REPLACE", "REPLACE");
	    xlateMap.put("KW_COLUMNS", "COLUMNS");
	    xlateMap.put("KW_RLIKE", "RLIKE");
	    xlateMap.put("KW_REGEXP", "REGEXP");
	    xlateMap.put("KW_TEMPORARY", "TEMPORARY");
	    xlateMap.put("KW_FUNCTION", "FUNCTION");
	    xlateMap.put("KW_EXPLAIN", "EXPLAIN");
	    xlateMap.put("KW_EXTENDED", "EXTENDED");
	    xlateMap.put("KW_SERDE", "SERDE");
	    xlateMap.put("KW_WITH", "WITH");
	    xlateMap.put("KW_SERDEPROPERTIES", "SERDEPROPERTIES");
	    xlateMap.put("KW_LIMIT", "LIMIT");
	    xlateMap.put("KW_OFFSET", "OFFSET");
	    xlateMap.put("KW_SET", "SET");
	    xlateMap.put("KW_PROPERTIES", "TBLPROPERTIES");
	    xlateMap.put("KW_VALUE_TYPE", "$VALUE$");
	    xlateMap.put("KW_ELEM_TYPE", "$ELEM$");
	    xlateMap.put("KW_DEFINED", "DEFINED");
	    xlateMap.put("KW_SUBQUERY", "SUBQUERY");
	    xlateMap.put("KW_REWRITE", "REWRITE");
	    xlateMap.put("KW_UPDATE", "UPDATE");
	    xlateMap.put("KW_VALUES", "VALUES");
	    xlateMap.put("KW_PURGE", "PURGE");
	    xlateMap.put("KW_PRIMARY", "PRIMARY");
	    xlateMap.put("KW_FOREIGN", "FOREIGN");
	    xlateMap.put("KW_KEY", "KEY");
	    xlateMap.put("KW_REFERENCES", "REFERENCES");
	    xlateMap.put("KW_CONSTRAINT", "CONSTRAINT");
	    xlateMap.put("KW_ENABLE", "ENABLE");
	    xlateMap.put("KW_DISABLE", "DISABLE");
	    xlateMap.put("KW_VALIDATE", "VALIDATE");
	    xlateMap.put("KW_NOVALIDATE", "NOVALIDATE");
	    xlateMap.put("KW_RELY", "RELY");
	    xlateMap.put("KW_NORELY", "NORELY");
	    xlateMap.put("KW_ABORT", "ABORT");
	    xlateMap.put("KW_TRANSACTIONS", "TRANSACTIONS");

	    // Operators
	    xlateMap.put("DOT", ".");
	    xlateMap.put("COLON", ":");
	    xlateMap.put("COMMA", ",");
	    xlateMap.put("SEMICOLON", ");");

	    xlateMap.put("LPAREN", "(");
	    xlateMap.put("RPAREN", ")");
	    xlateMap.put("LSQUARE", "[");
	    xlateMap.put("RSQUARE", "]");

	    xlateMap.put("EQUAL", "=");
	    xlateMap.put("NOTEQUAL", "<>");
	    xlateMap.put("EQUAL_NS", "<=>");
	    xlateMap.put("LESSTHANOREQUALTO", "<=");
	    xlateMap.put("LESSTHAN", "<");
	    xlateMap.put("GREATERTHANOREQUALTO", ">=");
	    xlateMap.put("GREATERTHAN", ">");

	    xlateMap.put("DIVIDE", "/");
	    xlateMap.put("PLUS", "+");
	    xlateMap.put("MINUS", "-");
	    xlateMap.put("STAR", "*");
	    xlateMap.put("MOD", "%");

	    xlateMap.put("AMPERSAND", "&");
	    xlateMap.put("TILDE", "~");
	    xlateMap.put("BITWISEOR", "|");
	    xlateMap.put("BITWISEXOR", "^");
	    xlateMap.put("CharSetLiteral", "\\'");
	  }

	  public static Collection<String> getKeywords() {
	    return xlateMap.values();
	  }

	  private static String xlate(String name) {

	    String ret = xlateMap.get(name);
	    if (ret == null) {
	      ret = name;
	    }

	    return ret;
	  }

	  @Override
	  public Object recoverFromMismatchedSet(IntStream input,
	      RecognitionException re, BitSet follow) throws RecognitionException {
	    throw re;
	  }

	  @Override
	  public void displayRecognitionError(String[] tokenNames,
	      RecognitionException e) {
	    errors.add(new ParseError(this, e, tokenNames));
	  }

	  @Override
	  public String getErrorHeader(RecognitionException e) {
	    String header = null;
	    if (e.charPositionInLine < 0 && input.LT(-1) != null) {
	      Token t = input.LT(-1);
	      header = "line " + t.getLine() + ":" + t.getCharPositionInLine();
	    } else {
	      header = super.getErrorHeader(e);
	    }

	    return header;
	  }
	  
	  @Override
	  public String getErrorMessage(RecognitionException e, String[] tokenNames) {
	    String msg = null;

	    // Translate the token names to something that the user can understand
	    String[] xlateNames = new String[tokenNames.length];
	    for (int i = 0; i < tokenNames.length; ++i) {
	      xlateNames[i] = HiveParser.xlate(tokenNames[i]);
	    }

	    if (e instanceof NoViableAltException) {
	      @SuppressWarnings("unused")
	      NoViableAltException nvae = (NoViableAltException) e;
	      // for development, can add
	      // "decision=<<"+nvae.grammarDecisionDescription+">>"
	      // and "(decision="+nvae.decisionNumber+") and
	      // "state "+nvae.stateNumber
	      msg = "cannot recognize input near"
	              + (input.LT(1) != null ? " " + getTokenErrorDisplay(input.LT(1)) : "")
	              + (input.LT(2) != null ? " " + getTokenErrorDisplay(input.LT(2)) : "")
	              + (input.LT(3) != null ? " " + getTokenErrorDisplay(input.LT(3)) : "");
	    } else if (e instanceof MismatchedTokenException) {
	      MismatchedTokenException mte = (MismatchedTokenException) e;
	      msg = super.getErrorMessage(e, xlateNames) + (input.LT(-1) == null ? "":" near '" + input.LT(-1).getText()) + "'";
	    } else if (e instanceof FailedPredicateException) {
	      FailedPredicateException fpe = (FailedPredicateException) e;
	      msg = "Failed to recognize predicate '" + fpe.token.getText() + "'. Failed rule: '" + fpe.ruleName + "'";
	    } else {
	      msg = super.getErrorMessage(e, xlateNames);
	    }

	    if (msgs.size() > 0) {
	      msg = msg + " in " + msgs.peek();
	    }
	    return msg;
	  }
	  
	  public void pushMsg(String msg, RecognizerSharedState state) {
	    // ANTLR generated code does not wrap the @init code wit this backtracking check,
	    //  even if the matching @after has it. If we have parser rules with that are doing
	    // some lookahead with syntactic predicates this can cause the push() and pop() calls
	    // to become unbalanced, so make sure both push/pop check the backtracking state.
	    if (state.backtracking == 0) {
	      msgs.push(msg);
	    }
	  }

	  public void popMsg(RecognizerSharedState state) {
	    if (state.backtracking == 0) {
	      Object o = msgs.pop();
	    }
	  }

	  // counter to generate unique union aliases
	  private int aliasCounter;
	  private String generateUnionAlias() {
	    return "_u" + (++aliasCounter);
	  }
	  private char [] excludedCharForColumnName = {'.', ':'};
	  private boolean containExcludedCharForCreateTableColumnName(String input) {
	    for(char c : excludedCharForColumnName) {
	      if(input.indexOf(c)>-1) {
	        return true;
	      }
	    }
	    return false;
	  }
	  private CommonTree throwSetOpException() throws RecognitionException {
	    throw new FailedPredicateException(input, "orderByClause clusterByClause distributeByClause sortByClause limitClause can only be applied to the whole union.", "");
	  }
	  private CommonTree throwColumnNameException() throws RecognitionException {
	    throw new FailedPredicateException(input, Arrays.toString(excludedCharForColumnName) + " can not be used in column name in create table statement.", "");
	  }
	  //private Configuration hiveConf;
	  //public void setHiveConf(Configuration hiveConf) {
	  //  this.hiveConf = hiveConf;
	  //}
	  protected boolean useSQL11ReservedKeywordsForIdentifier() {
	    //if(hiveConf==null){
	      return false;
	    //}
	    //return !HiveConf.getBoolVar(hiveConf, //HiveConf.ConfVars.HIVE_SUPPORT_SQL11_RESERVED_KEYWORDS);
	  }


	public static class statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "statement"
	// grammar/HiveParser.g:705:1: statement : ( explainStatement EOF | execStatement EOF );
	public final HiveParser.statement_return statement() throws RecognitionException {
		HiveParser.statement_return retval = new HiveParser.statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token EOF2=null;
		Token EOF4=null;
		ParserRuleReturnScope explainStatement1 =null;
		ParserRuleReturnScope execStatement3 =null;

		CommonTree EOF2_tree=null;
		CommonTree EOF4_tree=null;

		try {
			// grammar/HiveParser.g:706:2: ( explainStatement EOF | execStatement EOF )
			int alt1=2;
			int LA1_0 = input.LA(1);
			if ( (LA1_0==KW_EXPLAIN) ) {
				alt1=1;
			}
			else if ( (LA1_0==KW_ABORT||(LA1_0 >= KW_ALTER && LA1_0 <= KW_ANALYZE)||LA1_0==KW_COMMIT||LA1_0==KW_CREATE||LA1_0==KW_DELETE||(LA1_0 >= KW_DESC && LA1_0 <= KW_DESCRIBE)||LA1_0==KW_DROP||LA1_0==KW_EXPORT||LA1_0==KW_FROM||LA1_0==KW_GRANT||LA1_0==KW_IMPORT||LA1_0==KW_INSERT||LA1_0==KW_LOAD||LA1_0==KW_LOCK||LA1_0==KW_MAP||LA1_0==KW_MSCK||LA1_0==KW_REDUCE||LA1_0==KW_RELOAD||LA1_0==KW_REVOKE||LA1_0==KW_ROLLBACK||LA1_0==KW_SELECT||LA1_0==KW_SET||LA1_0==KW_SHOW||LA1_0==KW_START||LA1_0==KW_TRUNCATE||LA1_0==KW_UNLOCK||LA1_0==KW_UPDATE||LA1_0==KW_USE||LA1_0==KW_WITH) ) {
				alt1=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 1, 0, input);
				throw nvae;
			}

			switch (alt1) {
				case 1 :
					// grammar/HiveParser.g:706:4: explainStatement EOF
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_explainStatement_in_statement1133);
					explainStatement1=explainStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, explainStatement1.getTree());

					EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_statement1135); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EOF2_tree = (CommonTree)adaptor.create(EOF2);
					adaptor.addChild(root_0, EOF2_tree);
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:707:4: execStatement EOF
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_execStatement_in_statement1140);
					execStatement3=execStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, execStatement3.getTree());

					EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_statement1142); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EOF4_tree = (CommonTree)adaptor.create(EOF4);
					adaptor.addChild(root_0, EOF4_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class explainStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "explainStatement"
	// grammar/HiveParser.g:710:1: explainStatement : KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression[true] -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) ) ;
	public final HiveParser.explainStatement_return explainStatement() throws RecognitionException {
		HiveParser.explainStatement_return retval = new HiveParser.explainStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_EXPLAIN5=null;
		Token KW_REWRITE8=null;
		ParserRuleReturnScope explainOption6 =null;
		ParserRuleReturnScope execStatement7 =null;
		ParserRuleReturnScope queryStatementExpression9 =null;

		CommonTree KW_EXPLAIN5_tree=null;
		CommonTree KW_REWRITE8_tree=null;
		RewriteRuleTokenStream stream_KW_REWRITE=new RewriteRuleTokenStream(adaptor,"token KW_REWRITE");
		RewriteRuleTokenStream stream_KW_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token KW_EXPLAIN");
		RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");
		RewriteRuleSubtreeStream stream_explainOption=new RewriteRuleSubtreeStream(adaptor,"rule explainOption");
		RewriteRuleSubtreeStream stream_execStatement=new RewriteRuleSubtreeStream(adaptor,"rule execStatement");

		 pushMsg("explain statement", state); 
		try {
			// grammar/HiveParser.g:713:2: ( KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression[true] -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) ) )
			// grammar/HiveParser.g:713:4: KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression[true] -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) )
			{
			KW_EXPLAIN5=(Token)match(input,KW_EXPLAIN,FOLLOW_KW_EXPLAIN_in_explainStatement1163); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXPLAIN.add(KW_EXPLAIN5);

			// grammar/HiveParser.g:713:15: ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression[true] -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) )
			int alt3=2;
			int LA3_0 = input.LA(1);
			if ( (LA3_0==KW_ABORT||(LA3_0 >= KW_ALTER && LA3_0 <= KW_ANALYZE)||LA3_0==KW_AUTHORIZATION||LA3_0==KW_COMMIT||LA3_0==KW_CREATE||LA3_0==KW_DELETE||(LA3_0 >= KW_DEPENDENCY && LA3_0 <= KW_DESCRIBE)||LA3_0==KW_DROP||(LA3_0 >= KW_EXPORT && LA3_0 <= KW_EXTENDED)||(LA3_0 >= KW_FORMATTED && LA3_0 <= KW_FROM)||LA3_0==KW_GRANT||LA3_0==KW_IMPORT||LA3_0==KW_INSERT||LA3_0==KW_LOAD||LA3_0==KW_LOCK||LA3_0==KW_LOGICAL||LA3_0==KW_MAP||LA3_0==KW_MSCK||LA3_0==KW_REDUCE||LA3_0==KW_RELOAD||LA3_0==KW_REVOKE||LA3_0==KW_ROLLBACK||LA3_0==KW_SELECT||LA3_0==KW_SET||LA3_0==KW_SHOW||LA3_0==KW_START||LA3_0==KW_TRUNCATE||LA3_0==KW_UNLOCK||LA3_0==KW_UPDATE||LA3_0==KW_USE||LA3_0==KW_WITH) ) {
				alt3=1;
			}
			else if ( (LA3_0==KW_REWRITE) ) {
				alt3=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 3, 0, input);
				throw nvae;
			}

			switch (alt3) {
				case 1 :
					// grammar/HiveParser.g:714:6: ( explainOption )* execStatement
					{
					// grammar/HiveParser.g:714:6: ( explainOption )*
					loop2:
					while (true) {
						int alt2=2;
						int LA2_0 = input.LA(1);
						if ( (LA2_0==KW_AUTHORIZATION||LA2_0==KW_DEPENDENCY||LA2_0==KW_EXTENDED||LA2_0==KW_FORMATTED||LA2_0==KW_LOGICAL) ) {
							alt2=1;
						}

						switch (alt2) {
						case 1 :
							// grammar/HiveParser.g:714:6: explainOption
							{
							pushFollow(FOLLOW_explainOption_in_explainStatement1172);
							explainOption6=explainOption();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_explainOption.add(explainOption6.getTree());
							}
							break;

						default :
							break loop2;
						}
					}

					pushFollow(FOLLOW_execStatement_in_explainStatement1175);
					execStatement7=execStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_execStatement.add(execStatement7.getTree());
					// AST REWRITE
					// elements: execStatement, explainOption
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 714:35: -> ^( TOK_EXPLAIN execStatement ( explainOption )* )
					{
						// grammar/HiveParser.g:714:38: ^( TOK_EXPLAIN execStatement ( explainOption )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_EXPLAIN, "TOK_EXPLAIN"), root_1);
						adaptor.addChild(root_1, stream_execStatement.nextTree());
						// grammar/HiveParser.g:714:66: ( explainOption )*
						while ( stream_explainOption.hasNext() ) {
							adaptor.addChild(root_1, stream_explainOption.nextTree());
						}
						stream_explainOption.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:716:9: KW_REWRITE queryStatementExpression[true]
					{
					KW_REWRITE8=(Token)match(input,KW_REWRITE,FOLLOW_KW_REWRITE_in_explainStatement1206); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_REWRITE.add(KW_REWRITE8);

					pushFollow(FOLLOW_queryStatementExpression_in_explainStatement1208);
					queryStatementExpression9=queryStatementExpression(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_queryStatementExpression.add(queryStatementExpression9.getTree());
					// AST REWRITE
					// elements: queryStatementExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 716:51: -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression )
					{
						// grammar/HiveParser.g:716:54: ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_EXPLAIN_SQ_REWRITE, "TOK_EXPLAIN_SQ_REWRITE"), root_1);
						adaptor.addChild(root_1, stream_queryStatementExpression.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "explainStatement"


	public static class explainOption_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "explainOption"
	// grammar/HiveParser.g:719:1: explainOption : ( KW_EXTENDED | KW_FORMATTED | KW_DEPENDENCY | KW_LOGICAL | KW_AUTHORIZATION );
	public final HiveParser.explainOption_return explainOption() throws RecognitionException {
		HiveParser.explainOption_return retval = new HiveParser.explainOption_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set10=null;

		CommonTree set10_tree=null;

		 msgs.push("explain option"); 
		try {
			// grammar/HiveParser.g:722:5: ( KW_EXTENDED | KW_FORMATTED | KW_DEPENDENCY | KW_LOGICAL | KW_AUTHORIZATION )
			// grammar/HiveParser.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set10=input.LT(1);
			if ( input.LA(1)==KW_AUTHORIZATION||input.LA(1)==KW_DEPENDENCY||input.LA(1)==KW_EXTENDED||input.LA(1)==KW_FORMATTED||input.LA(1)==KW_LOGICAL ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set10));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { msgs.pop(); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "explainOption"


	public static class execStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "execStatement"
	// grammar/HiveParser.g:725:1: execStatement : ( queryStatementExpression[true] | loadStatement | exportStatement | importStatement | ddlStatement | deleteStatement | updateStatement | sqlTransactionStatement );
	public final HiveParser.execStatement_return execStatement() throws RecognitionException {
		HiveParser.execStatement_return retval = new HiveParser.execStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope queryStatementExpression11 =null;
		ParserRuleReturnScope loadStatement12 =null;
		ParserRuleReturnScope exportStatement13 =null;
		ParserRuleReturnScope importStatement14 =null;
		ParserRuleReturnScope ddlStatement15 =null;
		ParserRuleReturnScope deleteStatement16 =null;
		ParserRuleReturnScope updateStatement17 =null;
		ParserRuleReturnScope sqlTransactionStatement18 =null;


		 pushMsg("statement", state); 
		try {
			// grammar/HiveParser.g:728:5: ( queryStatementExpression[true] | loadStatement | exportStatement | importStatement | ddlStatement | deleteStatement | updateStatement | sqlTransactionStatement )
			int alt4=8;
			switch ( input.LA(1) ) {
			case KW_FROM:
			case KW_INSERT:
			case KW_MAP:
			case KW_REDUCE:
			case KW_SELECT:
			case KW_WITH:
				{
				alt4=1;
				}
				break;
			case KW_LOAD:
				{
				alt4=2;
				}
				break;
			case KW_EXPORT:
				{
				alt4=3;
				}
				break;
			case KW_IMPORT:
				{
				alt4=4;
				}
				break;
			case KW_ABORT:
			case KW_ALTER:
			case KW_ANALYZE:
			case KW_CREATE:
			case KW_DESC:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_GRANT:
			case KW_LOCK:
			case KW_MSCK:
			case KW_RELOAD:
			case KW_REVOKE:
			case KW_SHOW:
			case KW_TRUNCATE:
			case KW_UNLOCK:
			case KW_USE:
				{
				alt4=5;
				}
				break;
			case KW_SET:
				{
				int LA4_25 = input.LA(2);
				if ( (LA4_25==KW_ROLE) ) {
					alt4=5;
				}
				else if ( (LA4_25==KW_AUTOCOMMIT) ) {
					alt4=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 4, 25, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_DELETE:
				{
				alt4=6;
				}
				break;
			case KW_UPDATE:
				{
				alt4=7;
				}
				break;
			case KW_COMMIT:
			case KW_ROLLBACK:
			case KW_START:
				{
				alt4=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 4, 0, input);
				throw nvae;
			}
			switch (alt4) {
				case 1 :
					// grammar/HiveParser.g:728:7: queryStatementExpression[true]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_queryStatementExpression_in_execStatement1277);
					queryStatementExpression11=queryStatementExpression(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, queryStatementExpression11.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:729:7: loadStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_loadStatement_in_execStatement1286);
					loadStatement12=loadStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, loadStatement12.getTree());

					}
					break;
				case 3 :
					// grammar/HiveParser.g:730:7: exportStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_exportStatement_in_execStatement1294);
					exportStatement13=exportStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportStatement13.getTree());

					}
					break;
				case 4 :
					// grammar/HiveParser.g:731:7: importStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_importStatement_in_execStatement1302);
					importStatement14=importStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, importStatement14.getTree());

					}
					break;
				case 5 :
					// grammar/HiveParser.g:732:7: ddlStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_ddlStatement_in_execStatement1310);
					ddlStatement15=ddlStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ddlStatement15.getTree());

					}
					break;
				case 6 :
					// grammar/HiveParser.g:733:7: deleteStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_deleteStatement_in_execStatement1318);
					deleteStatement16=deleteStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteStatement16.getTree());

					}
					break;
				case 7 :
					// grammar/HiveParser.g:734:7: updateStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_updateStatement_in_execStatement1326);
					updateStatement17=updateStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, updateStatement17.getTree());

					}
					break;
				case 8 :
					// grammar/HiveParser.g:735:7: sqlTransactionStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_sqlTransactionStatement_in_execStatement1334);
					sqlTransactionStatement18=sqlTransactionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlTransactionStatement18.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "execStatement"


	public static class loadStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "loadStatement"
	// grammar/HiveParser.g:738:1: loadStatement : KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) ;
	public final HiveParser.loadStatement_return loadStatement() throws RecognitionException {
		HiveParser.loadStatement_return retval = new HiveParser.loadStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token islocal=null;
		Token path=null;
		Token isoverwrite=null;
		Token KW_LOAD19=null;
		Token KW_DATA20=null;
		Token KW_INPATH21=null;
		Token KW_INTO22=null;
		Token KW_TABLE23=null;
		ParserRuleReturnScope tab =null;

		CommonTree islocal_tree=null;
		CommonTree path_tree=null;
		CommonTree isoverwrite_tree=null;
		CommonTree KW_LOAD19_tree=null;
		CommonTree KW_DATA20_tree=null;
		CommonTree KW_INPATH21_tree=null;
		CommonTree KW_INTO22_tree=null;
		CommonTree KW_TABLE23_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_INPATH=new RewriteRuleTokenStream(adaptor,"token KW_INPATH");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
		RewriteRuleTokenStream stream_KW_LOAD=new RewriteRuleTokenStream(adaptor,"token KW_LOAD");
		RewriteRuleTokenStream stream_KW_DATA=new RewriteRuleTokenStream(adaptor,"token KW_DATA");
		RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 pushMsg("load statement", state); 
		try {
			// grammar/HiveParser.g:741:5: ( KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) )
			// grammar/HiveParser.g:741:7: KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition )
			{
			KW_LOAD19=(Token)match(input,KW_LOAD,FOLLOW_KW_LOAD_in_loadStatement1361); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOAD.add(KW_LOAD19);

			KW_DATA20=(Token)match(input,KW_DATA,FOLLOW_KW_DATA_in_loadStatement1363); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DATA.add(KW_DATA20);

			// grammar/HiveParser.g:741:23: (islocal= KW_LOCAL )?
			int alt5=2;
			int LA5_0 = input.LA(1);
			if ( (LA5_0==KW_LOCAL) ) {
				alt5=1;
			}
			switch (alt5) {
				case 1 :
					// grammar/HiveParser.g:741:24: islocal= KW_LOCAL
					{
					islocal=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_loadStatement1368); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LOCAL.add(islocal);

					}
					break;

			}

			KW_INPATH21=(Token)match(input,KW_INPATH,FOLLOW_KW_INPATH_in_loadStatement1372); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INPATH.add(KW_INPATH21);

			// grammar/HiveParser.g:741:53: (path= StringLiteral )
			// grammar/HiveParser.g:741:54: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_loadStatement1377); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(path);

			}

			// grammar/HiveParser.g:741:74: (isoverwrite= KW_OVERWRITE )?
			int alt6=2;
			int LA6_0 = input.LA(1);
			if ( (LA6_0==KW_OVERWRITE) ) {
				alt6=1;
			}
			switch (alt6) {
				case 1 :
					// grammar/HiveParser.g:741:75: isoverwrite= KW_OVERWRITE
					{
					isoverwrite=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_loadStatement1383); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OVERWRITE.add(isoverwrite);

					}
					break;

			}

			KW_INTO22=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_loadStatement1387); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO22);

			KW_TABLE23=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_loadStatement1389); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE23);

			// grammar/HiveParser.g:741:119: (tab= tableOrPartition )
			// grammar/HiveParser.g:741:120: tab= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_loadStatement1394);
			tab=tableOrPartition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());
			}

			// AST REWRITE
			// elements: path, tab, isoverwrite, islocal
			// token labels: islocal, path, isoverwrite
			// rule labels: tab, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_islocal=new RewriteRuleTokenStream(adaptor,"token islocal",islocal);
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleTokenStream stream_isoverwrite=new RewriteRuleTokenStream(adaptor,"token isoverwrite",isoverwrite);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 742:5: -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
			{
				// grammar/HiveParser.g:742:8: ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LOAD, "TOK_LOAD"), root_1);
				adaptor.addChild(root_1, stream_path.nextNode());
				adaptor.addChild(root_1, stream_tab.nextTree());
				// grammar/HiveParser.g:742:31: ( $islocal)?
				if ( stream_islocal.hasNext() ) {
					adaptor.addChild(root_1, stream_islocal.nextNode());
				}
				stream_islocal.reset();

				// grammar/HiveParser.g:742:41: ( $isoverwrite)?
				if ( stream_isoverwrite.hasNext() ) {
					adaptor.addChild(root_1, stream_isoverwrite.nextNode());
				}
				stream_isoverwrite.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "loadStatement"


	public static class replicationClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "replicationClause"
	// grammar/HiveParser.g:745:1: replicationClause : KW_FOR (isMetadataOnly= KW_METADATA )? KW_REPLICATION LPAREN (replId= StringLiteral ) RPAREN -> ^( TOK_REPLICATION $replId ( $isMetadataOnly)? ) ;
	public final HiveParser.replicationClause_return replicationClause() throws RecognitionException {
		HiveParser.replicationClause_return retval = new HiveParser.replicationClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token isMetadataOnly=null;
		Token replId=null;
		Token KW_FOR24=null;
		Token KW_REPLICATION25=null;
		Token LPAREN26=null;
		Token RPAREN27=null;

		CommonTree isMetadataOnly_tree=null;
		CommonTree replId_tree=null;
		CommonTree KW_FOR24_tree=null;
		CommonTree KW_REPLICATION25_tree=null;
		CommonTree LPAREN26_tree=null;
		CommonTree RPAREN27_tree=null;
		RewriteRuleTokenStream stream_KW_REPLICATION=new RewriteRuleTokenStream(adaptor,"token KW_REPLICATION");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_METADATA=new RewriteRuleTokenStream(adaptor,"token KW_METADATA");

		 pushMsg("replication clause", state); 
		try {
			// grammar/HiveParser.g:748:5: ( KW_FOR (isMetadataOnly= KW_METADATA )? KW_REPLICATION LPAREN (replId= StringLiteral ) RPAREN -> ^( TOK_REPLICATION $replId ( $isMetadataOnly)? ) )
			// grammar/HiveParser.g:748:7: KW_FOR (isMetadataOnly= KW_METADATA )? KW_REPLICATION LPAREN (replId= StringLiteral ) RPAREN
			{
			KW_FOR24=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_replicationClause1446); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR24);

			// grammar/HiveParser.g:748:14: (isMetadataOnly= KW_METADATA )?
			int alt7=2;
			int LA7_0 = input.LA(1);
			if ( (LA7_0==KW_METADATA) ) {
				alt7=1;
			}
			switch (alt7) {
				case 1 :
					// grammar/HiveParser.g:748:15: isMetadataOnly= KW_METADATA
					{
					isMetadataOnly=(Token)match(input,KW_METADATA,FOLLOW_KW_METADATA_in_replicationClause1451); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_METADATA.add(isMetadataOnly);

					}
					break;

			}

			KW_REPLICATION25=(Token)match(input,KW_REPLICATION,FOLLOW_KW_REPLICATION_in_replicationClause1455); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REPLICATION.add(KW_REPLICATION25);

			LPAREN26=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_replicationClause1457); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN26);

			// grammar/HiveParser.g:748:66: (replId= StringLiteral )
			// grammar/HiveParser.g:748:67: replId= StringLiteral
			{
			replId=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_replicationClause1462); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(replId);

			}

			RPAREN27=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_replicationClause1465); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN27);

			// AST REWRITE
			// elements: replId, isMetadataOnly
			// token labels: replId, isMetadataOnly
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_replId=new RewriteRuleTokenStream(adaptor,"token replId",replId);
			RewriteRuleTokenStream stream_isMetadataOnly=new RewriteRuleTokenStream(adaptor,"token isMetadataOnly",isMetadataOnly);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 749:5: -> ^( TOK_REPLICATION $replId ( $isMetadataOnly)? )
			{
				// grammar/HiveParser.g:749:8: ^( TOK_REPLICATION $replId ( $isMetadataOnly)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_REPLICATION, "TOK_REPLICATION"), root_1);
				adaptor.addChild(root_1, stream_replId.nextNode());
				// grammar/HiveParser.g:749:35: ( $isMetadataOnly)?
				if ( stream_isMetadataOnly.hasNext() ) {
					adaptor.addChild(root_1, stream_isMetadataOnly.nextNode());
				}
				stream_isMetadataOnly.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replicationClause"


	public static class exportStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "exportStatement"
	// grammar/HiveParser.g:752:1: exportStatement : KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )? -> ^( TOK_EXPORT $tab $path ( replicationClause )? ) ;
	public final HiveParser.exportStatement_return exportStatement() throws RecognitionException {
		HiveParser.exportStatement_return retval = new HiveParser.exportStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token path=null;
		Token KW_EXPORT28=null;
		Token KW_TABLE29=null;
		Token KW_TO30=null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope replicationClause31 =null;

		CommonTree path_tree=null;
		CommonTree KW_EXPORT28_tree=null;
		CommonTree KW_TABLE29_tree=null;
		CommonTree KW_TO30_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleTokenStream stream_KW_EXPORT=new RewriteRuleTokenStream(adaptor,"token KW_EXPORT");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");

		 pushMsg("export statement", state); 
		try {
			// grammar/HiveParser.g:755:5: ( KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )? -> ^( TOK_EXPORT $tab $path ( replicationClause )? ) )
			// grammar/HiveParser.g:755:7: KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )?
			{
			KW_EXPORT28=(Token)match(input,KW_EXPORT,FOLLOW_KW_EXPORT_in_exportStatement1509); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXPORT.add(KW_EXPORT28);

			KW_TABLE29=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_exportStatement1517); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE29);

			// grammar/HiveParser.g:756:16: (tab= tableOrPartition )
			// grammar/HiveParser.g:756:17: tab= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_exportStatement1522);
			tab=tableOrPartition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());
			}

			KW_TO30=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_exportStatement1531); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO30);

			// grammar/HiveParser.g:757:13: (path= StringLiteral )
			// grammar/HiveParser.g:757:14: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_exportStatement1536); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(path);

			}

			// grammar/HiveParser.g:758:7: ( replicationClause )?
			int alt8=2;
			int LA8_0 = input.LA(1);
			if ( (LA8_0==KW_FOR) ) {
				alt8=1;
			}
			switch (alt8) {
				case 1 :
					// grammar/HiveParser.g:758:7: replicationClause
					{
					pushFollow(FOLLOW_replicationClause_in_exportStatement1545);
					replicationClause31=replicationClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause31.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: replicationClause, path, tab
			// token labels: path
			// rule labels: tab, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 759:5: -> ^( TOK_EXPORT $tab $path ( replicationClause )? )
			{
				// grammar/HiveParser.g:759:8: ^( TOK_EXPORT $tab $path ( replicationClause )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_EXPORT, "TOK_EXPORT"), root_1);
				adaptor.addChild(root_1, stream_tab.nextTree());
				adaptor.addChild(root_1, stream_path.nextNode());
				// grammar/HiveParser.g:759:32: ( replicationClause )?
				if ( stream_replicationClause.hasNext() ) {
					adaptor.addChild(root_1, stream_replicationClause.nextTree());
				}
				stream_replicationClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exportStatement"


	public static class importStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "importStatement"
	// grammar/HiveParser.g:762:1: importStatement : KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) ;
	public final HiveParser.importStatement_return importStatement() throws RecognitionException {
		HiveParser.importStatement_return retval = new HiveParser.importStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ext=null;
		Token path=null;
		Token KW_IMPORT32=null;
		Token KW_TABLE33=null;
		Token KW_FROM34=null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope tableLocation35 =null;

		CommonTree ext_tree=null;
		CommonTree path_tree=null;
		CommonTree KW_IMPORT32_tree=null;
		CommonTree KW_TABLE33_tree=null;
		CommonTree KW_FROM34_tree=null;
		RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_IMPORT=new RewriteRuleTokenStream(adaptor,"token KW_IMPORT");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 pushMsg("import statement", state); 
		try {
			// grammar/HiveParser.g:765:8: ( KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) )
			// grammar/HiveParser.g:765:10: KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )?
			{
			KW_IMPORT32=(Token)match(input,KW_IMPORT,FOLLOW_KW_IMPORT_in_importStatement1595); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_IMPORT.add(KW_IMPORT32);

			// grammar/HiveParser.g:766:10: ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )?
			int alt10=2;
			int LA10_0 = input.LA(1);
			if ( (LA10_0==KW_EXTERNAL||LA10_0==KW_TABLE) ) {
				alt10=1;
			}
			switch (alt10) {
				case 1 :
					// grammar/HiveParser.g:766:11: (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition )
					{
					// grammar/HiveParser.g:766:11: (ext= KW_EXTERNAL )?
					int alt9=2;
					int LA9_0 = input.LA(1);
					if ( (LA9_0==KW_EXTERNAL) ) {
						alt9=1;
					}
					switch (alt9) {
						case 1 :
							// grammar/HiveParser.g:766:12: ext= KW_EXTERNAL
							{
							ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_importStatement1610); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_EXTERNAL.add(ext);

							}
							break;

					}

					KW_TABLE33=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_importStatement1614); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE33);

					// grammar/HiveParser.g:766:39: (tab= tableOrPartition )
					// grammar/HiveParser.g:766:40: tab= tableOrPartition
					{
					pushFollow(FOLLOW_tableOrPartition_in_importStatement1619);
					tab=tableOrPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());
					}

					}
					break;

			}

			KW_FROM34=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_importStatement1633); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM34);

			// grammar/HiveParser.g:767:18: (path= StringLiteral )
			// grammar/HiveParser.g:767:19: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_importStatement1638); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(path);

			}

			// grammar/HiveParser.g:768:10: ( tableLocation )?
			int alt11=2;
			int LA11_0 = input.LA(1);
			if ( (LA11_0==KW_LOCATION) ) {
				alt11=1;
			}
			switch (alt11) {
				case 1 :
					// grammar/HiveParser.g:768:10: tableLocation
					{
					pushFollow(FOLLOW_tableLocation_in_importStatement1650);
					tableLocation35=tableLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation35.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: ext, path, tab, tableLocation
			// token labels: ext, path
			// rule labels: tab, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 769:5: -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
			{
				// grammar/HiveParser.g:769:8: ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_IMPORT, "TOK_IMPORT"), root_1);
				adaptor.addChild(root_1, stream_path.nextNode());
				// grammar/HiveParser.g:769:28: ( $tab)?
				if ( stream_tab.hasNext() ) {
					adaptor.addChild(root_1, stream_tab.nextTree());
				}
				stream_tab.reset();

				// grammar/HiveParser.g:769:34: ( $ext)?
				if ( stream_ext.hasNext() ) {
					adaptor.addChild(root_1, stream_ext.nextNode());
				}
				stream_ext.reset();

				// grammar/HiveParser.g:769:39: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "importStatement"


	public static class ddlStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ddlStatement"
	// grammar/HiveParser.g:772:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createMacroStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | reloadFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole | abortTransactionStatement );
	public final HiveParser.ddlStatement_return ddlStatement() throws RecognitionException {
		HiveParser.ddlStatement_return retval = new HiveParser.ddlStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope createDatabaseStatement36 =null;
		ParserRuleReturnScope switchDatabaseStatement37 =null;
		ParserRuleReturnScope dropDatabaseStatement38 =null;
		ParserRuleReturnScope createTableStatement39 =null;
		ParserRuleReturnScope dropTableStatement40 =null;
		ParserRuleReturnScope truncateTableStatement41 =null;
		ParserRuleReturnScope alterStatement42 =null;
		ParserRuleReturnScope descStatement43 =null;
		ParserRuleReturnScope showStatement44 =null;
		ParserRuleReturnScope metastoreCheck45 =null;
		ParserRuleReturnScope createViewStatement46 =null;
		ParserRuleReturnScope dropViewStatement47 =null;
		ParserRuleReturnScope createFunctionStatement48 =null;
		ParserRuleReturnScope createMacroStatement49 =null;
		ParserRuleReturnScope createIndexStatement50 =null;
		ParserRuleReturnScope dropIndexStatement51 =null;
		ParserRuleReturnScope dropFunctionStatement52 =null;
		ParserRuleReturnScope reloadFunctionStatement53 =null;
		ParserRuleReturnScope dropMacroStatement54 =null;
		ParserRuleReturnScope analyzeStatement55 =null;
		ParserRuleReturnScope lockStatement56 =null;
		ParserRuleReturnScope unlockStatement57 =null;
		ParserRuleReturnScope lockDatabase58 =null;
		ParserRuleReturnScope unlockDatabase59 =null;
		ParserRuleReturnScope createRoleStatement60 =null;
		ParserRuleReturnScope dropRoleStatement61 =null;
		ParserRuleReturnScope grantPrivileges62 =null;
		ParserRuleReturnScope revokePrivileges63 =null;
		ParserRuleReturnScope showGrants64 =null;
		ParserRuleReturnScope showRoleGrants65 =null;
		ParserRuleReturnScope showRolePrincipals66 =null;
		ParserRuleReturnScope showRoles67 =null;
		ParserRuleReturnScope grantRole68 =null;
		ParserRuleReturnScope revokeRole69 =null;
		ParserRuleReturnScope setRole70 =null;
		ParserRuleReturnScope showCurrentRole71 =null;
		ParserRuleReturnScope abortTransactionStatement72 =null;


		 pushMsg("ddl statement", state); 
		try {
			// grammar/HiveParser.g:775:5: ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createMacroStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | reloadFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole | abortTransactionStatement )
			int alt12=37;
			alt12 = dfa12.predict(input);
			switch (alt12) {
				case 1 :
					// grammar/HiveParser.g:775:7: createDatabaseStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createDatabaseStatement_in_ddlStatement1702);
					createDatabaseStatement36=createDatabaseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createDatabaseStatement36.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:776:7: switchDatabaseStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_switchDatabaseStatement_in_ddlStatement1710);
					switchDatabaseStatement37=switchDatabaseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, switchDatabaseStatement37.getTree());

					}
					break;
				case 3 :
					// grammar/HiveParser.g:777:7: dropDatabaseStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropDatabaseStatement_in_ddlStatement1718);
					dropDatabaseStatement38=dropDatabaseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropDatabaseStatement38.getTree());

					}
					break;
				case 4 :
					// grammar/HiveParser.g:778:7: createTableStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createTableStatement_in_ddlStatement1726);
					createTableStatement39=createTableStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createTableStatement39.getTree());

					}
					break;
				case 5 :
					// grammar/HiveParser.g:779:7: dropTableStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropTableStatement_in_ddlStatement1734);
					dropTableStatement40=dropTableStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropTableStatement40.getTree());

					}
					break;
				case 6 :
					// grammar/HiveParser.g:780:7: truncateTableStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_truncateTableStatement_in_ddlStatement1742);
					truncateTableStatement41=truncateTableStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, truncateTableStatement41.getTree());

					}
					break;
				case 7 :
					// grammar/HiveParser.g:781:7: alterStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatement_in_ddlStatement1750);
					alterStatement42=alterStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatement42.getTree());

					}
					break;
				case 8 :
					// grammar/HiveParser.g:782:7: descStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_descStatement_in_ddlStatement1758);
					descStatement43=descStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, descStatement43.getTree());

					}
					break;
				case 9 :
					// grammar/HiveParser.g:783:7: showStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showStatement_in_ddlStatement1766);
					showStatement44=showStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showStatement44.getTree());

					}
					break;
				case 10 :
					// grammar/HiveParser.g:784:7: metastoreCheck
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_metastoreCheck_in_ddlStatement1774);
					metastoreCheck45=metastoreCheck();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, metastoreCheck45.getTree());

					}
					break;
				case 11 :
					// grammar/HiveParser.g:785:7: createViewStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createViewStatement_in_ddlStatement1782);
					createViewStatement46=createViewStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createViewStatement46.getTree());

					}
					break;
				case 12 :
					// grammar/HiveParser.g:786:7: dropViewStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropViewStatement_in_ddlStatement1790);
					dropViewStatement47=dropViewStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropViewStatement47.getTree());

					}
					break;
				case 13 :
					// grammar/HiveParser.g:787:7: createFunctionStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createFunctionStatement_in_ddlStatement1798);
					createFunctionStatement48=createFunctionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createFunctionStatement48.getTree());

					}
					break;
				case 14 :
					// grammar/HiveParser.g:788:7: createMacroStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createMacroStatement_in_ddlStatement1806);
					createMacroStatement49=createMacroStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createMacroStatement49.getTree());

					}
					break;
				case 15 :
					// grammar/HiveParser.g:789:7: createIndexStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createIndexStatement_in_ddlStatement1814);
					createIndexStatement50=createIndexStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexStatement50.getTree());

					}
					break;
				case 16 :
					// grammar/HiveParser.g:790:7: dropIndexStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropIndexStatement_in_ddlStatement1822);
					dropIndexStatement51=dropIndexStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropIndexStatement51.getTree());

					}
					break;
				case 17 :
					// grammar/HiveParser.g:791:7: dropFunctionStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropFunctionStatement_in_ddlStatement1830);
					dropFunctionStatement52=dropFunctionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropFunctionStatement52.getTree());

					}
					break;
				case 18 :
					// grammar/HiveParser.g:792:7: reloadFunctionStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_reloadFunctionStatement_in_ddlStatement1838);
					reloadFunctionStatement53=reloadFunctionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reloadFunctionStatement53.getTree());

					}
					break;
				case 19 :
					// grammar/HiveParser.g:793:7: dropMacroStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropMacroStatement_in_ddlStatement1846);
					dropMacroStatement54=dropMacroStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropMacroStatement54.getTree());

					}
					break;
				case 20 :
					// grammar/HiveParser.g:794:7: analyzeStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_analyzeStatement_in_ddlStatement1854);
					analyzeStatement55=analyzeStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, analyzeStatement55.getTree());

					}
					break;
				case 21 :
					// grammar/HiveParser.g:795:7: lockStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_lockStatement_in_ddlStatement1862);
					lockStatement56=lockStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, lockStatement56.getTree());

					}
					break;
				case 22 :
					// grammar/HiveParser.g:796:7: unlockStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_unlockStatement_in_ddlStatement1870);
					unlockStatement57=unlockStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unlockStatement57.getTree());

					}
					break;
				case 23 :
					// grammar/HiveParser.g:797:7: lockDatabase
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_lockDatabase_in_ddlStatement1878);
					lockDatabase58=lockDatabase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, lockDatabase58.getTree());

					}
					break;
				case 24 :
					// grammar/HiveParser.g:798:7: unlockDatabase
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_unlockDatabase_in_ddlStatement1886);
					unlockDatabase59=unlockDatabase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unlockDatabase59.getTree());

					}
					break;
				case 25 :
					// grammar/HiveParser.g:799:7: createRoleStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createRoleStatement_in_ddlStatement1894);
					createRoleStatement60=createRoleStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createRoleStatement60.getTree());

					}
					break;
				case 26 :
					// grammar/HiveParser.g:800:7: dropRoleStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropRoleStatement_in_ddlStatement1902);
					dropRoleStatement61=dropRoleStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropRoleStatement61.getTree());

					}
					break;
				case 27 :
					// grammar/HiveParser.g:801:7: ( grantPrivileges )=> grantPrivileges
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_grantPrivileges_in_ddlStatement1916);
					grantPrivileges62=grantPrivileges();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, grantPrivileges62.getTree());

					}
					break;
				case 28 :
					// grammar/HiveParser.g:802:7: ( revokePrivileges )=> revokePrivileges
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_revokePrivileges_in_ddlStatement1930);
					revokePrivileges63=revokePrivileges();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, revokePrivileges63.getTree());

					}
					break;
				case 29 :
					// grammar/HiveParser.g:803:7: showGrants
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showGrants_in_ddlStatement1938);
					showGrants64=showGrants();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showGrants64.getTree());

					}
					break;
				case 30 :
					// grammar/HiveParser.g:804:7: showRoleGrants
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showRoleGrants_in_ddlStatement1946);
					showRoleGrants65=showRoleGrants();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showRoleGrants65.getTree());

					}
					break;
				case 31 :
					// grammar/HiveParser.g:805:7: showRolePrincipals
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showRolePrincipals_in_ddlStatement1954);
					showRolePrincipals66=showRolePrincipals();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showRolePrincipals66.getTree());

					}
					break;
				case 32 :
					// grammar/HiveParser.g:806:7: showRoles
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showRoles_in_ddlStatement1962);
					showRoles67=showRoles();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showRoles67.getTree());

					}
					break;
				case 33 :
					// grammar/HiveParser.g:807:7: grantRole
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_grantRole_in_ddlStatement1970);
					grantRole68=grantRole();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, grantRole68.getTree());

					}
					break;
				case 34 :
					// grammar/HiveParser.g:808:7: revokeRole
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_revokeRole_in_ddlStatement1978);
					revokeRole69=revokeRole();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, revokeRole69.getTree());

					}
					break;
				case 35 :
					// grammar/HiveParser.g:809:7: setRole
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_setRole_in_ddlStatement1986);
					setRole70=setRole();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setRole70.getTree());

					}
					break;
				case 36 :
					// grammar/HiveParser.g:810:7: showCurrentRole
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showCurrentRole_in_ddlStatement1994);
					showCurrentRole71=showCurrentRole();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showCurrentRole71.getTree());

					}
					break;
				case 37 :
					// grammar/HiveParser.g:811:7: abortTransactionStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_abortTransactionStatement_in_ddlStatement2002);
					abortTransactionStatement72=abortTransactionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, abortTransactionStatement72.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ddlStatement"


	public static class ifExists_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ifExists"
	// grammar/HiveParser.g:814:1: ifExists : KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) ;
	public final HiveParser.ifExists_return ifExists() throws RecognitionException {
		HiveParser.ifExists_return retval = new HiveParser.ifExists_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_IF73=null;
		Token KW_EXISTS74=null;

		CommonTree KW_IF73_tree=null;
		CommonTree KW_EXISTS74_tree=null;
		RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");
		RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");

		 pushMsg("if exists clause", state); 
		try {
			// grammar/HiveParser.g:817:5: ( KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) )
			// grammar/HiveParser.g:817:7: KW_IF KW_EXISTS
			{
			KW_IF73=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifExists2029); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_IF.add(KW_IF73);

			KW_EXISTS74=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifExists2031); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXISTS.add(KW_EXISTS74);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 818:5: -> ^( TOK_IFEXISTS )
			{
				// grammar/HiveParser.g:818:8: ^( TOK_IFEXISTS )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_IFEXISTS, "TOK_IFEXISTS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ifExists"


	public static class restrictOrCascade_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "restrictOrCascade"
	// grammar/HiveParser.g:821:1: restrictOrCascade : ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) );
	public final HiveParser.restrictOrCascade_return restrictOrCascade() throws RecognitionException {
		HiveParser.restrictOrCascade_return retval = new HiveParser.restrictOrCascade_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RESTRICT75=null;
		Token KW_CASCADE76=null;

		CommonTree KW_RESTRICT75_tree=null;
		CommonTree KW_CASCADE76_tree=null;
		RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
		RewriteRuleTokenStream stream_KW_RESTRICT=new RewriteRuleTokenStream(adaptor,"token KW_RESTRICT");

		 pushMsg("restrict or cascade clause", state); 
		try {
			// grammar/HiveParser.g:824:5: ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) )
			int alt13=2;
			int LA13_0 = input.LA(1);
			if ( (LA13_0==KW_RESTRICT) ) {
				alt13=1;
			}
			else if ( (LA13_0==KW_CASCADE) ) {
				alt13=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 13, 0, input);
				throw nvae;
			}

			switch (alt13) {
				case 1 :
					// grammar/HiveParser.g:824:7: KW_RESTRICT
					{
					KW_RESTRICT75=(Token)match(input,KW_RESTRICT,FOLLOW_KW_RESTRICT_in_restrictOrCascade2068); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_RESTRICT.add(KW_RESTRICT75);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 825:5: -> ^( TOK_RESTRICT )
					{
						// grammar/HiveParser.g:825:8: ^( TOK_RESTRICT )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RESTRICT, "TOK_RESTRICT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:826:7: KW_CASCADE
					{
					KW_CASCADE76=(Token)match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_restrictOrCascade2086); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CASCADE.add(KW_CASCADE76);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 827:5: -> ^( TOK_CASCADE )
					{
						// grammar/HiveParser.g:827:8: ^( TOK_CASCADE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CASCADE, "TOK_CASCADE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "restrictOrCascade"


	public static class ifNotExists_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ifNotExists"
	// grammar/HiveParser.g:830:1: ifNotExists : KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) ;
	public final HiveParser.ifNotExists_return ifNotExists() throws RecognitionException {
		HiveParser.ifNotExists_return retval = new HiveParser.ifNotExists_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_IF77=null;
		Token KW_NOT78=null;
		Token KW_EXISTS79=null;

		CommonTree KW_IF77_tree=null;
		CommonTree KW_NOT78_tree=null;
		CommonTree KW_EXISTS79_tree=null;
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");
		RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");

		 pushMsg("if not exists clause", state); 
		try {
			// grammar/HiveParser.g:833:5: ( KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) )
			// grammar/HiveParser.g:833:7: KW_IF KW_NOT KW_EXISTS
			{
			KW_IF77=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifNotExists2123); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_IF.add(KW_IF77);

			KW_NOT78=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_ifNotExists2125); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT78);

			KW_EXISTS79=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifNotExists2127); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXISTS.add(KW_EXISTS79);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 834:5: -> ^( TOK_IFNOTEXISTS )
			{
				// grammar/HiveParser.g:834:8: ^( TOK_IFNOTEXISTS )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_IFNOTEXISTS, "TOK_IFNOTEXISTS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ifNotExists"


	public static class storedAsDirs_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "storedAsDirs"
	// grammar/HiveParser.g:837:1: storedAsDirs : KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) ;
	public final HiveParser.storedAsDirs_return storedAsDirs() throws RecognitionException {
		HiveParser.storedAsDirs_return retval = new HiveParser.storedAsDirs_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_STORED80=null;
		Token KW_AS81=null;
		Token KW_DIRECTORIES82=null;

		CommonTree KW_STORED80_tree=null;
		CommonTree KW_AS81_tree=null;
		CommonTree KW_DIRECTORIES82_tree=null;
		RewriteRuleTokenStream stream_KW_DIRECTORIES=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORIES");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");

		 pushMsg("stored as directories", state); 
		try {
			// grammar/HiveParser.g:840:5: ( KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) )
			// grammar/HiveParser.g:840:7: KW_STORED KW_AS KW_DIRECTORIES
			{
			KW_STORED80=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_storedAsDirs2164); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED80);

			KW_AS81=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_storedAsDirs2166); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS81);

			KW_DIRECTORIES82=(Token)match(input,KW_DIRECTORIES,FOLLOW_KW_DIRECTORIES_in_storedAsDirs2168); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DIRECTORIES.add(KW_DIRECTORIES82);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 841:5: -> ^( TOK_STOREDASDIRS )
			{
				// grammar/HiveParser.g:841:8: ^( TOK_STOREDASDIRS )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_STOREDASDIRS, "TOK_STOREDASDIRS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "storedAsDirs"


	public static class orReplace_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "orReplace"
	// grammar/HiveParser.g:844:1: orReplace : KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) ;
	public final HiveParser.orReplace_return orReplace() throws RecognitionException {
		HiveParser.orReplace_return retval = new HiveParser.orReplace_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_OR83=null;
		Token KW_REPLACE84=null;

		CommonTree KW_OR83_tree=null;
		CommonTree KW_REPLACE84_tree=null;
		RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
		RewriteRuleTokenStream stream_KW_OR=new RewriteRuleTokenStream(adaptor,"token KW_OR");

		 pushMsg("or replace clause", state); 
		try {
			// grammar/HiveParser.g:847:5: ( KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) )
			// grammar/HiveParser.g:847:7: KW_OR KW_REPLACE
			{
			KW_OR83=(Token)match(input,KW_OR,FOLLOW_KW_OR_in_orReplace2205); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OR.add(KW_OR83);

			KW_REPLACE84=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_orReplace2207); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REPLACE.add(KW_REPLACE84);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 848:5: -> ^( TOK_ORREPLACE )
			{
				// grammar/HiveParser.g:848:8: ^( TOK_ORREPLACE )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ORREPLACE, "TOK_ORREPLACE"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orReplace"


	public static class createDatabaseStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createDatabaseStatement"
	// grammar/HiveParser.g:851:1: createDatabaseStatement : KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) ;
	public final HiveParser.createDatabaseStatement_return createDatabaseStatement() throws RecognitionException {
		HiveParser.createDatabaseStatement_return retval = new HiveParser.createDatabaseStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CREATE85=null;
		Token KW_DATABASE86=null;
		Token KW_SCHEMA87=null;
		Token KW_WITH91=null;
		Token KW_DBPROPERTIES92=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope dbprops =null;
		ParserRuleReturnScope ifNotExists88 =null;
		ParserRuleReturnScope databaseComment89 =null;
		ParserRuleReturnScope dbLocation90 =null;

		CommonTree KW_CREATE85_tree=null;
		CommonTree KW_DATABASE86_tree=null;
		CommonTree KW_SCHEMA87_tree=null;
		CommonTree KW_WITH91_tree=null;
		CommonTree KW_DBPROPERTIES92_tree=null;
		RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
		RewriteRuleSubtreeStream stream_databaseComment=new RewriteRuleSubtreeStream(adaptor,"rule databaseComment");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_dbLocation=new RewriteRuleSubtreeStream(adaptor,"rule dbLocation");

		 pushMsg("create database statement", state); 
		try {
			// grammar/HiveParser.g:854:5: ( KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) )
			// grammar/HiveParser.g:854:7: KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
			{
			KW_CREATE85=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createDatabaseStatement2244); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE85);

			// grammar/HiveParser.g:854:17: ( KW_DATABASE | KW_SCHEMA )
			int alt14=2;
			int LA14_0 = input.LA(1);
			if ( (LA14_0==KW_DATABASE) ) {
				alt14=1;
			}
			else if ( (LA14_0==KW_SCHEMA) ) {
				alt14=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 14, 0, input);
				throw nvae;
			}

			switch (alt14) {
				case 1 :
					// grammar/HiveParser.g:854:18: KW_DATABASE
					{
					KW_DATABASE86=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_createDatabaseStatement2247); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE86);

					}
					break;
				case 2 :
					// grammar/HiveParser.g:854:30: KW_SCHEMA
					{
					KW_SCHEMA87=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_createDatabaseStatement2249); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA87);

					}
					break;

			}

			// grammar/HiveParser.g:855:9: ( ifNotExists )?
			int alt15=2;
			int LA15_0 = input.LA(1);
			if ( (LA15_0==KW_IF) ) {
				alt15=1;
			}
			switch (alt15) {
				case 1 :
					// grammar/HiveParser.g:855:9: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createDatabaseStatement2260);
					ifNotExists88=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists88.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_createDatabaseStatement2273);
			name=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(name.getTree());
			// grammar/HiveParser.g:857:9: ( databaseComment )?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==KW_COMMENT) ) {
				alt16=1;
			}
			switch (alt16) {
				case 1 :
					// grammar/HiveParser.g:857:9: databaseComment
					{
					pushFollow(FOLLOW_databaseComment_in_createDatabaseStatement2283);
					databaseComment89=databaseComment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_databaseComment.add(databaseComment89.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:858:9: ( dbLocation )?
			int alt17=2;
			int LA17_0 = input.LA(1);
			if ( (LA17_0==KW_LOCATION) ) {
				alt17=1;
			}
			switch (alt17) {
				case 1 :
					// grammar/HiveParser.g:858:9: dbLocation
					{
					pushFollow(FOLLOW_dbLocation_in_createDatabaseStatement2294);
					dbLocation90=dbLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dbLocation.add(dbLocation90.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:859:9: ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
			int alt18=2;
			int LA18_0 = input.LA(1);
			if ( (LA18_0==KW_WITH) ) {
				alt18=1;
			}
			switch (alt18) {
				case 1 :
					// grammar/HiveParser.g:859:10: KW_WITH KW_DBPROPERTIES dbprops= dbProperties
					{
					KW_WITH91=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_createDatabaseStatement2306); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH91);

					KW_DBPROPERTIES92=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement2308); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES92);

					pushFollow(FOLLOW_dbProperties_in_createDatabaseStatement2312);
					dbprops=dbProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dbProperties.add(dbprops.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: dbLocation, databaseComment, ifNotExists, name, dbprops
			// token labels: 
			// rule labels: name, dbprops, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_dbprops=new RewriteRuleSubtreeStream(adaptor,"rule dbprops",dbprops!=null?dbprops.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 860:5: -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
			{
				// grammar/HiveParser.g:860:8: ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEDATABASE, "TOK_CREATEDATABASE"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// grammar/HiveParser.g:860:35: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// grammar/HiveParser.g:860:48: ( dbLocation )?
				if ( stream_dbLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_dbLocation.nextTree());
				}
				stream_dbLocation.reset();

				// grammar/HiveParser.g:860:60: ( databaseComment )?
				if ( stream_databaseComment.hasNext() ) {
					adaptor.addChild(root_1, stream_databaseComment.nextTree());
				}
				stream_databaseComment.reset();

				// grammar/HiveParser.g:860:78: ( $dbprops)?
				if ( stream_dbprops.hasNext() ) {
					adaptor.addChild(root_1, stream_dbprops.nextTree());
				}
				stream_dbprops.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createDatabaseStatement"


	public static class dbLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dbLocation"
	// grammar/HiveParser.g:863:1: dbLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) ;
	public final HiveParser.dbLocation_return dbLocation() throws RecognitionException {
		HiveParser.dbLocation_return retval = new HiveParser.dbLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token locn=null;
		Token KW_LOCATION93=null;

		CommonTree locn_tree=null;
		CommonTree KW_LOCATION93_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 pushMsg("database location specification", state); 
		try {
			// grammar/HiveParser.g:866:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) )
			// grammar/HiveParser.g:867:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION93=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_dbLocation2373); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION93);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_dbLocation2377); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 867:38: -> ^( TOK_DATABASELOCATION $locn)
			{
				// grammar/HiveParser.g:867:41: ^( TOK_DATABASELOCATION $locn)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DATABASELOCATION, "TOK_DATABASELOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbLocation"


	public static class dbProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dbProperties"
	// grammar/HiveParser.g:870:1: dbProperties : LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) ;
	public final HiveParser.dbProperties_return dbProperties() throws RecognitionException {
		HiveParser.dbProperties_return retval = new HiveParser.dbProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN94=null;
		Token RPAREN96=null;
		ParserRuleReturnScope dbPropertiesList95 =null;

		CommonTree LPAREN94_tree=null;
		CommonTree RPAREN96_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_dbPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule dbPropertiesList");

		 pushMsg("dbproperties", state); 
		try {
			// grammar/HiveParser.g:873:5: ( LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) )
			// grammar/HiveParser.g:874:7: LPAREN dbPropertiesList RPAREN
			{
			LPAREN94=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_dbProperties2419); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN94);

			pushFollow(FOLLOW_dbPropertiesList_in_dbProperties2421);
			dbPropertiesList95=dbPropertiesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dbPropertiesList.add(dbPropertiesList95.getTree());
			RPAREN96=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_dbProperties2423); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN96);

			// AST REWRITE
			// elements: dbPropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 874:38: -> ^( TOK_DATABASEPROPERTIES dbPropertiesList )
			{
				// grammar/HiveParser.g:874:41: ^( TOK_DATABASEPROPERTIES dbPropertiesList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DATABASEPROPERTIES, "TOK_DATABASEPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_dbPropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbProperties"


	public static class dbPropertiesList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dbPropertiesList"
	// grammar/HiveParser.g:877:1: dbPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) ;
	public final HiveParser.dbPropertiesList_return dbPropertiesList() throws RecognitionException {
		HiveParser.dbPropertiesList_return retval = new HiveParser.dbPropertiesList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA98=null;
		ParserRuleReturnScope keyValueProperty97 =null;
		ParserRuleReturnScope keyValueProperty99 =null;

		CommonTree COMMA98_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");

		 pushMsg("database properties list", state); 
		try {
			// grammar/HiveParser.g:880:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) )
			// grammar/HiveParser.g:881:7: keyValueProperty ( COMMA keyValueProperty )*
			{
			pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList2464);
			keyValueProperty97=keyValueProperty();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty97.getTree());
			// grammar/HiveParser.g:881:24: ( COMMA keyValueProperty )*
			loop19:
			while (true) {
				int alt19=2;
				int LA19_0 = input.LA(1);
				if ( (LA19_0==COMMA) ) {
					alt19=1;
				}

				switch (alt19) {
				case 1 :
					// grammar/HiveParser.g:881:25: COMMA keyValueProperty
					{
					COMMA98=(Token)match(input,COMMA,FOLLOW_COMMA_in_dbPropertiesList2467); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA98);

					pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList2469);
					keyValueProperty99=keyValueProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty99.getTree());
					}
					break;

				default :
					break loop19;
				}
			}

			// AST REWRITE
			// elements: keyValueProperty
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 881:50: -> ^( TOK_DBPROPLIST ( keyValueProperty )+ )
			{
				// grammar/HiveParser.g:881:53: ^( TOK_DBPROPLIST ( keyValueProperty )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DBPROPLIST, "TOK_DBPROPLIST"), root_1);
				if ( !(stream_keyValueProperty.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_keyValueProperty.hasNext() ) {
					adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
				}
				stream_keyValueProperty.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbPropertiesList"


	public static class switchDatabaseStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "switchDatabaseStatement"
	// grammar/HiveParser.g:885:1: switchDatabaseStatement : KW_USE identifier -> ^( TOK_SWITCHDATABASE identifier ) ;
	public final HiveParser.switchDatabaseStatement_return switchDatabaseStatement() throws RecognitionException {
		HiveParser.switchDatabaseStatement_return retval = new HiveParser.switchDatabaseStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_USE100=null;
		ParserRuleReturnScope identifier101 =null;

		CommonTree KW_USE100_tree=null;
		RewriteRuleTokenStream stream_KW_USE=new RewriteRuleTokenStream(adaptor,"token KW_USE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("switch database statement", state); 
		try {
			// grammar/HiveParser.g:888:5: ( KW_USE identifier -> ^( TOK_SWITCHDATABASE identifier ) )
			// grammar/HiveParser.g:888:7: KW_USE identifier
			{
			KW_USE100=(Token)match(input,KW_USE,FOLLOW_KW_USE_in_switchDatabaseStatement2508); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_USE.add(KW_USE100);

			pushFollow(FOLLOW_identifier_in_switchDatabaseStatement2510);
			identifier101=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier101.getTree());
			// AST REWRITE
			// elements: identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 889:5: -> ^( TOK_SWITCHDATABASE identifier )
			{
				// grammar/HiveParser.g:889:8: ^( TOK_SWITCHDATABASE identifier )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SWITCHDATABASE, "TOK_SWITCHDATABASE"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "switchDatabaseStatement"


	public static class dropDatabaseStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropDatabaseStatement"
	// grammar/HiveParser.g:892:1: dropDatabaseStatement : KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? ) ;
	public final HiveParser.dropDatabaseStatement_return dropDatabaseStatement() throws RecognitionException {
		HiveParser.dropDatabaseStatement_return retval = new HiveParser.dropDatabaseStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP102=null;
		Token KW_DATABASE103=null;
		Token KW_SCHEMA104=null;
		ParserRuleReturnScope ifExists105 =null;
		ParserRuleReturnScope identifier106 =null;
		ParserRuleReturnScope restrictOrCascade107 =null;

		CommonTree KW_DROP102_tree=null;
		CommonTree KW_DATABASE103_tree=null;
		CommonTree KW_SCHEMA104_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");

		 pushMsg("drop database statement", state); 
		try {
			// grammar/HiveParser.g:895:5: ( KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? ) )
			// grammar/HiveParser.g:895:7: KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )?
			{
			KW_DROP102=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropDatabaseStatement2549); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP102);

			// grammar/HiveParser.g:895:15: ( KW_DATABASE | KW_SCHEMA )
			int alt20=2;
			int LA20_0 = input.LA(1);
			if ( (LA20_0==KW_DATABASE) ) {
				alt20=1;
			}
			else if ( (LA20_0==KW_SCHEMA) ) {
				alt20=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 20, 0, input);
				throw nvae;
			}

			switch (alt20) {
				case 1 :
					// grammar/HiveParser.g:895:16: KW_DATABASE
					{
					KW_DATABASE103=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_dropDatabaseStatement2552); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE103);

					}
					break;
				case 2 :
					// grammar/HiveParser.g:895:28: KW_SCHEMA
					{
					KW_SCHEMA104=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_dropDatabaseStatement2554); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA104);

					}
					break;

			}

			// grammar/HiveParser.g:895:39: ( ifExists )?
			int alt21=2;
			int LA21_0 = input.LA(1);
			if ( (LA21_0==KW_IF) ) {
				alt21=1;
			}
			switch (alt21) {
				case 1 :
					// grammar/HiveParser.g:895:39: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropDatabaseStatement2557);
					ifExists105=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists105.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_dropDatabaseStatement2560);
			identifier106=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier106.getTree());
			// grammar/HiveParser.g:895:60: ( restrictOrCascade )?
			int alt22=2;
			int LA22_0 = input.LA(1);
			if ( (LA22_0==KW_CASCADE||LA22_0==KW_RESTRICT) ) {
				alt22=1;
			}
			switch (alt22) {
				case 1 :
					// grammar/HiveParser.g:895:60: restrictOrCascade
					{
					pushFollow(FOLLOW_restrictOrCascade_in_dropDatabaseStatement2562);
					restrictOrCascade107=restrictOrCascade();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade107.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: identifier, restrictOrCascade, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 896:5: -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? )
			{
				// grammar/HiveParser.g:896:8: ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPDATABASE, "TOK_DROPDATABASE"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				// grammar/HiveParser.g:896:38: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// grammar/HiveParser.g:896:48: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropDatabaseStatement"


	public static class databaseComment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "databaseComment"
	// grammar/HiveParser.g:899:1: databaseComment : KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) ;
	public final HiveParser.databaseComment_return databaseComment() throws RecognitionException {
		HiveParser.databaseComment_return retval = new HiveParser.databaseComment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_COMMENT108=null;

		CommonTree comment_tree=null;
		CommonTree KW_COMMENT108_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 pushMsg("database's comment", state); 
		try {
			// grammar/HiveParser.g:902:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) )
			// grammar/HiveParser.g:902:7: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT108=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_databaseComment2608); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT108);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_databaseComment2612); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 903:5: -> ^( TOK_DATABASECOMMENT $comment)
			{
				// grammar/HiveParser.g:903:8: ^( TOK_DATABASECOMMENT $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DATABASECOMMENT, "TOK_DATABASECOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "databaseComment"


	public static class createTableStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createTableStatement"
	// grammar/HiveParser.g:906:1: createTableStatement : KW_CREATE (temp= KW_TEMPORARY )? (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeOrPKOrFKList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? ) -> ^( TOK_CREATETABLE $name ( $temp)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeOrPKOrFKList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? ) ;
	public final HiveParser.createTableStatement_return createTableStatement() throws RecognitionException {
		HiveParser.createTableStatement_return retval = new HiveParser.createTableStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token temp=null;
		Token ext=null;
		Token like=null;
		Token KW_CREATE109=null;
		Token KW_TABLE110=null;
		Token LPAREN116=null;
		Token RPAREN118=null;
		Token KW_AS127=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope likeName =null;
		ParserRuleReturnScope ifNotExists111 =null;
		ParserRuleReturnScope tableRowFormat112 =null;
		ParserRuleReturnScope tableFileFormat113 =null;
		ParserRuleReturnScope tableLocation114 =null;
		ParserRuleReturnScope tablePropertiesPrefixed115 =null;
		ParserRuleReturnScope columnNameTypeOrPKOrFKList117 =null;
		ParserRuleReturnScope tableComment119 =null;
		ParserRuleReturnScope tablePartition120 =null;
		ParserRuleReturnScope tableBuckets121 =null;
		ParserRuleReturnScope tableSkewed122 =null;
		ParserRuleReturnScope tableRowFormat123 =null;
		ParserRuleReturnScope tableFileFormat124 =null;
		ParserRuleReturnScope tableLocation125 =null;
		ParserRuleReturnScope tablePropertiesPrefixed126 =null;
		ParserRuleReturnScope selectStatementWithCTE128 =null;

		CommonTree temp_tree=null;
		CommonTree ext_tree=null;
		CommonTree like_tree=null;
		CommonTree KW_CREATE109_tree=null;
		CommonTree KW_TABLE110_tree=null;
		CommonTree LPAREN116_tree=null;
		CommonTree RPAREN118_tree=null;
		CommonTree KW_AS127_tree=null;
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_columnNameTypeOrPKOrFKList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeOrPKOrFKList");
		RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
		RewriteRuleSubtreeStream stream_tablePartition=new RewriteRuleSubtreeStream(adaptor,"rule tablePartition");
		RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("create table statement", state); 
		try {
			// grammar/HiveParser.g:909:5: ( KW_CREATE (temp= KW_TEMPORARY )? (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeOrPKOrFKList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? ) -> ^( TOK_CREATETABLE $name ( $temp)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeOrPKOrFKList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? ) )
			// grammar/HiveParser.g:909:7: KW_CREATE (temp= KW_TEMPORARY )? (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeOrPKOrFKList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? )
			{
			KW_CREATE109=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createTableStatement2652); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE109);

			// grammar/HiveParser.g:909:17: (temp= KW_TEMPORARY )?
			int alt23=2;
			int LA23_0 = input.LA(1);
			if ( (LA23_0==KW_TEMPORARY) ) {
				alt23=1;
			}
			switch (alt23) {
				case 1 :
					// grammar/HiveParser.g:909:18: temp= KW_TEMPORARY
					{
					temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createTableStatement2657); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);

					}
					break;

			}

			// grammar/HiveParser.g:909:38: (ext= KW_EXTERNAL )?
			int alt24=2;
			int LA24_0 = input.LA(1);
			if ( (LA24_0==KW_EXTERNAL) ) {
				alt24=1;
			}
			switch (alt24) {
				case 1 :
					// grammar/HiveParser.g:909:39: ext= KW_EXTERNAL
					{
					ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_createTableStatement2664); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_EXTERNAL.add(ext);

					}
					break;

			}

			KW_TABLE110=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createTableStatement2668); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE110);

			// grammar/HiveParser.g:909:66: ( ifNotExists )?
			int alt25=2;
			int LA25_0 = input.LA(1);
			if ( (LA25_0==KW_IF) ) {
				alt25=1;
			}
			switch (alt25) {
				case 1 :
					// grammar/HiveParser.g:909:66: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createTableStatement2670);
					ifNotExists111=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists111.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_createTableStatement2675);
			name=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(name.getTree());
			// grammar/HiveParser.g:910:7: (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeOrPKOrFKList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? )
			int alt40=2;
			int LA40_0 = input.LA(1);
			if ( (LA40_0==KW_LIKE) ) {
				alt40=1;
			}
			else if ( (LA40_0==EOF||LA40_0==KW_AS||LA40_0==KW_CLUSTERED||LA40_0==KW_COMMENT||LA40_0==KW_LOCATION||LA40_0==KW_PARTITIONED||LA40_0==KW_ROW||LA40_0==KW_SKEWED||LA40_0==KW_STORED||LA40_0==KW_TBLPROPERTIES||LA40_0==LPAREN) ) {
				alt40=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 40, 0, input);
				throw nvae;
			}

			switch (alt40) {
				case 1 :
					// grammar/HiveParser.g:910:10: like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )?
					{
					like=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_createTableStatement2688); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LIKE.add(like);

					pushFollow(FOLLOW_tableName_in_createTableStatement2692);
					likeName=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(likeName.getTree());
					// grammar/HiveParser.g:911:10: ( tableRowFormat )?
					int alt26=2;
					int LA26_0 = input.LA(1);
					if ( (LA26_0==KW_ROW) ) {
						alt26=1;
					}
					switch (alt26) {
						case 1 :
							// grammar/HiveParser.g:911:10: tableRowFormat
							{
							pushFollow(FOLLOW_tableRowFormat_in_createTableStatement2703);
							tableRowFormat112=tableRowFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat112.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:912:10: ( tableFileFormat )?
					int alt27=2;
					int LA27_0 = input.LA(1);
					if ( (LA27_0==KW_STORED) ) {
						alt27=1;
					}
					switch (alt27) {
						case 1 :
							// grammar/HiveParser.g:912:10: tableFileFormat
							{
							pushFollow(FOLLOW_tableFileFormat_in_createTableStatement2715);
							tableFileFormat113=tableFileFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat113.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:913:10: ( tableLocation )?
					int alt28=2;
					int LA28_0 = input.LA(1);
					if ( (LA28_0==KW_LOCATION) ) {
						alt28=1;
					}
					switch (alt28) {
						case 1 :
							// grammar/HiveParser.g:913:10: tableLocation
							{
							pushFollow(FOLLOW_tableLocation_in_createTableStatement2727);
							tableLocation114=tableLocation();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation114.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:914:10: ( tablePropertiesPrefixed )?
					int alt29=2;
					int LA29_0 = input.LA(1);
					if ( (LA29_0==KW_TBLPROPERTIES) ) {
						alt29=1;
					}
					switch (alt29) {
						case 1 :
							// grammar/HiveParser.g:914:10: tablePropertiesPrefixed
							{
							pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement2739);
							tablePropertiesPrefixed115=tablePropertiesPrefixed();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed115.getTree());
							}
							break;

					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:915:10: ( LPAREN columnNameTypeOrPKOrFKList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )?
					{
					// grammar/HiveParser.g:915:10: ( LPAREN columnNameTypeOrPKOrFKList RPAREN )?
					int alt30=2;
					int LA30_0 = input.LA(1);
					if ( (LA30_0==LPAREN) ) {
						alt30=1;
					}
					switch (alt30) {
						case 1 :
							// grammar/HiveParser.g:915:11: LPAREN columnNameTypeOrPKOrFKList RPAREN
							{
							LPAREN116=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createTableStatement2752); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN116);

							pushFollow(FOLLOW_columnNameTypeOrPKOrFKList_in_createTableStatement2754);
							columnNameTypeOrPKOrFKList117=columnNameTypeOrPKOrFKList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnNameTypeOrPKOrFKList.add(columnNameTypeOrPKOrFKList117.getTree());
							RPAREN118=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createTableStatement2756); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN118);

							}
							break;

					}

					// grammar/HiveParser.g:916:10: ( tableComment )?
					int alt31=2;
					int LA31_0 = input.LA(1);
					if ( (LA31_0==KW_COMMENT) ) {
						alt31=1;
					}
					switch (alt31) {
						case 1 :
							// grammar/HiveParser.g:916:10: tableComment
							{
							pushFollow(FOLLOW_tableComment_in_createTableStatement2769);
							tableComment119=tableComment();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableComment.add(tableComment119.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:917:10: ( tablePartition )?
					int alt32=2;
					int LA32_0 = input.LA(1);
					if ( (LA32_0==KW_PARTITIONED) ) {
						alt32=1;
					}
					switch (alt32) {
						case 1 :
							// grammar/HiveParser.g:917:10: tablePartition
							{
							pushFollow(FOLLOW_tablePartition_in_createTableStatement2781);
							tablePartition120=tablePartition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tablePartition.add(tablePartition120.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:918:10: ( tableBuckets )?
					int alt33=2;
					int LA33_0 = input.LA(1);
					if ( (LA33_0==KW_CLUSTERED) ) {
						alt33=1;
					}
					switch (alt33) {
						case 1 :
							// grammar/HiveParser.g:918:10: tableBuckets
							{
							pushFollow(FOLLOW_tableBuckets_in_createTableStatement2793);
							tableBuckets121=tableBuckets();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableBuckets.add(tableBuckets121.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:919:10: ( tableSkewed )?
					int alt34=2;
					int LA34_0 = input.LA(1);
					if ( (LA34_0==KW_SKEWED) ) {
						alt34=1;
					}
					switch (alt34) {
						case 1 :
							// grammar/HiveParser.g:919:10: tableSkewed
							{
							pushFollow(FOLLOW_tableSkewed_in_createTableStatement2805);
							tableSkewed122=tableSkewed();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableSkewed.add(tableSkewed122.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:920:10: ( tableRowFormat )?
					int alt35=2;
					int LA35_0 = input.LA(1);
					if ( (LA35_0==KW_ROW) ) {
						alt35=1;
					}
					switch (alt35) {
						case 1 :
							// grammar/HiveParser.g:920:10: tableRowFormat
							{
							pushFollow(FOLLOW_tableRowFormat_in_createTableStatement2817);
							tableRowFormat123=tableRowFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat123.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:921:10: ( tableFileFormat )?
					int alt36=2;
					int LA36_0 = input.LA(1);
					if ( (LA36_0==KW_STORED) ) {
						alt36=1;
					}
					switch (alt36) {
						case 1 :
							// grammar/HiveParser.g:921:10: tableFileFormat
							{
							pushFollow(FOLLOW_tableFileFormat_in_createTableStatement2829);
							tableFileFormat124=tableFileFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat124.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:922:10: ( tableLocation )?
					int alt37=2;
					int LA37_0 = input.LA(1);
					if ( (LA37_0==KW_LOCATION) ) {
						alt37=1;
					}
					switch (alt37) {
						case 1 :
							// grammar/HiveParser.g:922:10: tableLocation
							{
							pushFollow(FOLLOW_tableLocation_in_createTableStatement2841);
							tableLocation125=tableLocation();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation125.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:923:10: ( tablePropertiesPrefixed )?
					int alt38=2;
					int LA38_0 = input.LA(1);
					if ( (LA38_0==KW_TBLPROPERTIES) ) {
						alt38=1;
					}
					switch (alt38) {
						case 1 :
							// grammar/HiveParser.g:923:10: tablePropertiesPrefixed
							{
							pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement2853);
							tablePropertiesPrefixed126=tablePropertiesPrefixed();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed126.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:924:10: ( KW_AS selectStatementWithCTE )?
					int alt39=2;
					int LA39_0 = input.LA(1);
					if ( (LA39_0==KW_AS) ) {
						alt39=1;
					}
					switch (alt39) {
						case 1 :
							// grammar/HiveParser.g:924:11: KW_AS selectStatementWithCTE
							{
							KW_AS127=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createTableStatement2866); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS127);

							pushFollow(FOLLOW_selectStatementWithCTE_in_createTableStatement2868);
							selectStatementWithCTE128=selectStatementWithCTE();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_selectStatementWithCTE.add(selectStatementWithCTE128.getTree());
							}
							break;

					}

					}
					break;

			}

			// AST REWRITE
			// elements: ifNotExists, tableRowFormat, tableSkewed, columnNameTypeOrPKOrFKList, tablePartition, name, tableComment, tableLocation, ext, tablePropertiesPrefixed, selectStatementWithCTE, temp, likeName, tableBuckets, tableFileFormat
			// token labels: ext, temp
			// rule labels: likeName, name, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
			RewriteRuleTokenStream stream_temp=new RewriteRuleTokenStream(adaptor,"token temp",temp);
			RewriteRuleSubtreeStream stream_likeName=new RewriteRuleSubtreeStream(adaptor,"rule likeName",likeName!=null?likeName.getTree():null);
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 926:5: -> ^( TOK_CREATETABLE $name ( $temp)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeOrPKOrFKList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? )
			{
				// grammar/HiveParser.g:926:8: ^( TOK_CREATETABLE $name ( $temp)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeOrPKOrFKList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATETABLE, "TOK_CREATETABLE"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// grammar/HiveParser.g:926:33: ( $temp)?
				if ( stream_temp.hasNext() ) {
					adaptor.addChild(root_1, stream_temp.nextNode());
				}
				stream_temp.reset();

				// grammar/HiveParser.g:926:40: ( $ext)?
				if ( stream_ext.hasNext() ) {
					adaptor.addChild(root_1, stream_ext.nextNode());
				}
				stream_ext.reset();

				// grammar/HiveParser.g:926:45: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// grammar/HiveParser.g:927:10: ^( TOK_LIKETABLE ( $likeName)? )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LIKETABLE, "TOK_LIKETABLE"), root_2);
				// grammar/HiveParser.g:927:27: ( $likeName)?
				if ( stream_likeName.hasNext() ) {
					adaptor.addChild(root_2, stream_likeName.nextTree());
				}
				stream_likeName.reset();

				adaptor.addChild(root_1, root_2);
				}

				// grammar/HiveParser.g:928:10: ( columnNameTypeOrPKOrFKList )?
				if ( stream_columnNameTypeOrPKOrFKList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeOrPKOrFKList.nextTree());
				}
				stream_columnNameTypeOrPKOrFKList.reset();

				// grammar/HiveParser.g:929:10: ( tableComment )?
				if ( stream_tableComment.hasNext() ) {
					adaptor.addChild(root_1, stream_tableComment.nextTree());
				}
				stream_tableComment.reset();

				// grammar/HiveParser.g:930:10: ( tablePartition )?
				if ( stream_tablePartition.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePartition.nextTree());
				}
				stream_tablePartition.reset();

				// grammar/HiveParser.g:931:10: ( tableBuckets )?
				if ( stream_tableBuckets.hasNext() ) {
					adaptor.addChild(root_1, stream_tableBuckets.nextTree());
				}
				stream_tableBuckets.reset();

				// grammar/HiveParser.g:932:10: ( tableSkewed )?
				if ( stream_tableSkewed.hasNext() ) {
					adaptor.addChild(root_1, stream_tableSkewed.nextTree());
				}
				stream_tableSkewed.reset();

				// grammar/HiveParser.g:933:10: ( tableRowFormat )?
				if ( stream_tableRowFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
				}
				stream_tableRowFormat.reset();

				// grammar/HiveParser.g:934:10: ( tableFileFormat )?
				if ( stream_tableFileFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
				}
				stream_tableFileFormat.reset();

				// grammar/HiveParser.g:935:10: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				// grammar/HiveParser.g:936:10: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				// grammar/HiveParser.g:937:10: ( selectStatementWithCTE )?
				if ( stream_selectStatementWithCTE.hasNext() ) {
					adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());
				}
				stream_selectStatementWithCTE.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createTableStatement"


	public static class truncateTableStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "truncateTableStatement"
	// grammar/HiveParser.g:941:1: truncateTableStatement : KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ) ;
	public final HiveParser.truncateTableStatement_return truncateTableStatement() throws RecognitionException {
		HiveParser.truncateTableStatement_return retval = new HiveParser.truncateTableStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_TRUNCATE129=null;
		Token KW_TABLE130=null;
		Token KW_COLUMNS132=null;
		Token LPAREN133=null;
		Token RPAREN135=null;
		ParserRuleReturnScope tablePartitionPrefix131 =null;
		ParserRuleReturnScope columnNameList134 =null;

		CommonTree KW_TRUNCATE129_tree=null;
		CommonTree KW_TABLE130_tree=null;
		CommonTree KW_COLUMNS132_tree=null;
		CommonTree LPAREN133_tree=null;
		CommonTree RPAREN135_tree=null;
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_TRUNCATE=new RewriteRuleTokenStream(adaptor,"token KW_TRUNCATE");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_tablePartitionPrefix=new RewriteRuleSubtreeStream(adaptor,"rule tablePartitionPrefix");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg("truncate table statement", state); 
		try {
			// grammar/HiveParser.g:944:5: ( KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ) )
			// grammar/HiveParser.g:944:7: KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )?
			{
			KW_TRUNCATE129=(Token)match(input,KW_TRUNCATE,FOLLOW_KW_TRUNCATE_in_truncateTableStatement3075); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TRUNCATE.add(KW_TRUNCATE129);

			KW_TABLE130=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_truncateTableStatement3077); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE130);

			pushFollow(FOLLOW_tablePartitionPrefix_in_truncateTableStatement3079);
			tablePartitionPrefix131=tablePartitionPrefix();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tablePartitionPrefix.add(tablePartitionPrefix131.getTree());
			// grammar/HiveParser.g:944:49: ( KW_COLUMNS LPAREN columnNameList RPAREN )?
			int alt41=2;
			int LA41_0 = input.LA(1);
			if ( (LA41_0==KW_COLUMNS) ) {
				alt41=1;
			}
			switch (alt41) {
				case 1 :
					// grammar/HiveParser.g:944:50: KW_COLUMNS LPAREN columnNameList RPAREN
					{
					KW_COLUMNS132=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_truncateTableStatement3082); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS132);

					LPAREN133=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_truncateTableStatement3084); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN133);

					pushFollow(FOLLOW_columnNameList_in_truncateTableStatement3086);
					columnNameList134=columnNameList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameList.add(columnNameList134.getTree());
					RPAREN135=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_truncateTableStatement3088); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN135);

					}
					break;

			}

			// AST REWRITE
			// elements: columnNameList, tablePartitionPrefix
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 944:92: -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? )
			{
				// grammar/HiveParser.g:944:95: ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TRUNCATETABLE, "TOK_TRUNCATETABLE"), root_1);
				adaptor.addChild(root_1, stream_tablePartitionPrefix.nextTree());
				// grammar/HiveParser.g:944:136: ( columnNameList )?
				if ( stream_columnNameList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameList.nextTree());
				}
				stream_columnNameList.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "truncateTableStatement"


	public static class createIndexStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createIndexStatement"
	// grammar/HiveParser.g:946:1: createIndexStatement : KW_CREATE KW_INDEX indexName= identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) ;
	public final HiveParser.createIndexStatement_return createIndexStatement() throws RecognitionException {
		HiveParser.createIndexStatement_return retval = new HiveParser.createIndexStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token typeName=null;
		Token KW_CREATE136=null;
		Token KW_INDEX137=null;
		Token KW_ON138=null;
		Token KW_TABLE139=null;
		Token LPAREN140=null;
		Token RPAREN141=null;
		Token KW_AS142=null;
		ParserRuleReturnScope indexName =null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope indexedCols =null;
		ParserRuleReturnScope autoRebuild143 =null;
		ParserRuleReturnScope indexPropertiesPrefixed144 =null;
		ParserRuleReturnScope indexTblName145 =null;
		ParserRuleReturnScope tableRowFormat146 =null;
		ParserRuleReturnScope tableFileFormat147 =null;
		ParserRuleReturnScope tableLocation148 =null;
		ParserRuleReturnScope tablePropertiesPrefixed149 =null;
		ParserRuleReturnScope indexComment150 =null;

		CommonTree typeName_tree=null;
		CommonTree KW_CREATE136_tree=null;
		CommonTree KW_INDEX137_tree=null;
		CommonTree KW_ON138_tree=null;
		CommonTree KW_TABLE139_tree=null;
		CommonTree LPAREN140_tree=null;
		CommonTree RPAREN141_tree=null;
		CommonTree KW_AS142_tree=null;
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_indexComment=new RewriteRuleSubtreeStream(adaptor,"rule indexComment");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_indexTblName=new RewriteRuleSubtreeStream(adaptor,"rule indexTblName");
		RewriteRuleSubtreeStream stream_autoRebuild=new RewriteRuleSubtreeStream(adaptor,"rule autoRebuild");
		RewriteRuleSubtreeStream stream_indexPropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesPrefixed");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("create index statement", state);
		try {
			// grammar/HiveParser.g:949:5: ( KW_CREATE KW_INDEX indexName= identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) )
			// grammar/HiveParser.g:949:7: KW_CREATE KW_INDEX indexName= identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )?
			{
			KW_CREATE136=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createIndexStatement3123); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE136);

			KW_INDEX137=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_createIndexStatement3125); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX137);

			pushFollow(FOLLOW_identifier_in_createIndexStatement3129);
			indexName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(indexName.getTree());
			KW_ON138=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_createIndexStatement3137); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON138);

			KW_TABLE139=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createIndexStatement3139); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE139);

			pushFollow(FOLLOW_tableName_in_createIndexStatement3143);
			tab=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tab.getTree());
			LPAREN140=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexStatement3145); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN140);

			pushFollow(FOLLOW_columnNameList_in_createIndexStatement3149);
			indexedCols=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameList.add(indexedCols.getTree());
			RPAREN141=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexStatement3151); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN141);

			KW_AS142=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createIndexStatement3159); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS142);

			typeName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createIndexStatement3163); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(typeName);

			// grammar/HiveParser.g:952:7: ( autoRebuild )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==KW_WITH) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// grammar/HiveParser.g:952:7: autoRebuild
					{
					pushFollow(FOLLOW_autoRebuild_in_createIndexStatement3171);
					autoRebuild143=autoRebuild();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_autoRebuild.add(autoRebuild143.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:953:7: ( indexPropertiesPrefixed )?
			int alt43=2;
			int LA43_0 = input.LA(1);
			if ( (LA43_0==KW_IDXPROPERTIES) ) {
				alt43=1;
			}
			switch (alt43) {
				case 1 :
					// grammar/HiveParser.g:953:7: indexPropertiesPrefixed
					{
					pushFollow(FOLLOW_indexPropertiesPrefixed_in_createIndexStatement3180);
					indexPropertiesPrefixed144=indexPropertiesPrefixed();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_indexPropertiesPrefixed.add(indexPropertiesPrefixed144.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:954:7: ( indexTblName )?
			int alt44=2;
			int LA44_0 = input.LA(1);
			if ( (LA44_0==KW_IN) ) {
				alt44=1;
			}
			switch (alt44) {
				case 1 :
					// grammar/HiveParser.g:954:7: indexTblName
					{
					pushFollow(FOLLOW_indexTblName_in_createIndexStatement3189);
					indexTblName145=indexTblName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_indexTblName.add(indexTblName145.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:955:7: ( tableRowFormat )?
			int alt45=2;
			int LA45_0 = input.LA(1);
			if ( (LA45_0==KW_ROW) ) {
				alt45=1;
			}
			switch (alt45) {
				case 1 :
					// grammar/HiveParser.g:955:7: tableRowFormat
					{
					pushFollow(FOLLOW_tableRowFormat_in_createIndexStatement3198);
					tableRowFormat146=tableRowFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat146.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:956:7: ( tableFileFormat )?
			int alt46=2;
			int LA46_0 = input.LA(1);
			if ( (LA46_0==KW_STORED) ) {
				alt46=1;
			}
			switch (alt46) {
				case 1 :
					// grammar/HiveParser.g:956:7: tableFileFormat
					{
					pushFollow(FOLLOW_tableFileFormat_in_createIndexStatement3207);
					tableFileFormat147=tableFileFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat147.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:957:7: ( tableLocation )?
			int alt47=2;
			int LA47_0 = input.LA(1);
			if ( (LA47_0==KW_LOCATION) ) {
				alt47=1;
			}
			switch (alt47) {
				case 1 :
					// grammar/HiveParser.g:957:7: tableLocation
					{
					pushFollow(FOLLOW_tableLocation_in_createIndexStatement3216);
					tableLocation148=tableLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation148.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:958:7: ( tablePropertiesPrefixed )?
			int alt48=2;
			int LA48_0 = input.LA(1);
			if ( (LA48_0==KW_TBLPROPERTIES) ) {
				alt48=1;
			}
			switch (alt48) {
				case 1 :
					// grammar/HiveParser.g:958:7: tablePropertiesPrefixed
					{
					pushFollow(FOLLOW_tablePropertiesPrefixed_in_createIndexStatement3225);
					tablePropertiesPrefixed149=tablePropertiesPrefixed();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed149.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:959:7: ( indexComment )?
			int alt49=2;
			int LA49_0 = input.LA(1);
			if ( (LA49_0==KW_COMMENT) ) {
				alt49=1;
			}
			switch (alt49) {
				case 1 :
					// grammar/HiveParser.g:959:7: indexComment
					{
					pushFollow(FOLLOW_indexComment_in_createIndexStatement3234);
					indexComment150=indexComment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_indexComment.add(indexComment150.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: indexPropertiesPrefixed, indexedCols, tableLocation, indexComment, indexName, tableFileFormat, indexTblName, tableRowFormat, tab, typeName, tablePropertiesPrefixed, autoRebuild
			// token labels: typeName
			// rule labels: indexedCols, tab, indexName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_typeName=new RewriteRuleTokenStream(adaptor,"token typeName",typeName);
			RewriteRuleSubtreeStream stream_indexedCols=new RewriteRuleSubtreeStream(adaptor,"rule indexedCols",indexedCols!=null?indexedCols.getTree():null);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);
			RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 960:5: -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
			{
				// grammar/HiveParser.g:960:7: ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEINDEX, "TOK_CREATEINDEX"), root_1);
				adaptor.addChild(root_1, stream_indexName.nextTree());
				adaptor.addChild(root_1, stream_typeName.nextNode());
				adaptor.addChild(root_1, stream_tab.nextTree());
				adaptor.addChild(root_1, stream_indexedCols.nextTree());
				// grammar/HiveParser.g:961:9: ( autoRebuild )?
				if ( stream_autoRebuild.hasNext() ) {
					adaptor.addChild(root_1, stream_autoRebuild.nextTree());
				}
				stream_autoRebuild.reset();

				// grammar/HiveParser.g:962:9: ( indexPropertiesPrefixed )?
				if ( stream_indexPropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_indexPropertiesPrefixed.nextTree());
				}
				stream_indexPropertiesPrefixed.reset();

				// grammar/HiveParser.g:963:9: ( indexTblName )?
				if ( stream_indexTblName.hasNext() ) {
					adaptor.addChild(root_1, stream_indexTblName.nextTree());
				}
				stream_indexTblName.reset();

				// grammar/HiveParser.g:964:9: ( tableRowFormat )?
				if ( stream_tableRowFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
				}
				stream_tableRowFormat.reset();

				// grammar/HiveParser.g:965:9: ( tableFileFormat )?
				if ( stream_tableFileFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
				}
				stream_tableFileFormat.reset();

				// grammar/HiveParser.g:966:9: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				// grammar/HiveParser.g:967:9: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				// grammar/HiveParser.g:968:9: ( indexComment )?
				if ( stream_indexComment.hasNext() ) {
					adaptor.addChild(root_1, stream_indexComment.nextTree());
				}
				stream_indexComment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createIndexStatement"


	public static class indexComment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexComment"
	// grammar/HiveParser.g:971:1: indexComment : KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) ;
	public final HiveParser.indexComment_return indexComment() throws RecognitionException {
		HiveParser.indexComment_return retval = new HiveParser.indexComment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_COMMENT151=null;

		CommonTree comment_tree=null;
		CommonTree KW_COMMENT151_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 pushMsg("comment on an index", state);
		try {
			// grammar/HiveParser.g:974:9: ( KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) )
			// grammar/HiveParser.g:975:17: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT151=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_indexComment3391); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT151);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_indexComment3395); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 975:51: -> ^( TOK_INDEXCOMMENT $comment)
			{
				// grammar/HiveParser.g:975:54: ^( TOK_INDEXCOMMENT $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INDEXCOMMENT, "TOK_INDEXCOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexComment"


	public static class autoRebuild_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "autoRebuild"
	// grammar/HiveParser.g:978:1: autoRebuild : KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) ;
	public final HiveParser.autoRebuild_return autoRebuild() throws RecognitionException {
		HiveParser.autoRebuild_return retval = new HiveParser.autoRebuild_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_WITH152=null;
		Token KW_DEFERRED153=null;
		Token KW_REBUILD154=null;

		CommonTree KW_WITH152_tree=null;
		CommonTree KW_DEFERRED153_tree=null;
		CommonTree KW_REBUILD154_tree=null;
		RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_DEFERRED=new RewriteRuleTokenStream(adaptor,"token KW_DEFERRED");

		 pushMsg("auto rebuild index", state);
		try {
			// grammar/HiveParser.g:981:5: ( KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) )
			// grammar/HiveParser.g:981:7: KW_WITH KW_DEFERRED KW_REBUILD
			{
			KW_WITH152=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_autoRebuild3436); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH152);

			KW_DEFERRED153=(Token)match(input,KW_DEFERRED,FOLLOW_KW_DEFERRED_in_autoRebuild3438); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DEFERRED.add(KW_DEFERRED153);

			KW_REBUILD154=(Token)match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_autoRebuild3440); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REBUILD.add(KW_REBUILD154);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 982:5: -> ^( TOK_DEFERRED_REBUILDINDEX )
			{
				// grammar/HiveParser.g:982:7: ^( TOK_DEFERRED_REBUILDINDEX )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DEFERRED_REBUILDINDEX, "TOK_DEFERRED_REBUILDINDEX"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "autoRebuild"


	public static class indexTblName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexTblName"
	// grammar/HiveParser.g:985:1: indexTblName : KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) ;
	public final HiveParser.indexTblName_return indexTblName() throws RecognitionException {
		HiveParser.indexTblName_return retval = new HiveParser.indexTblName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_IN155=null;
		Token KW_TABLE156=null;
		ParserRuleReturnScope indexTbl =null;

		CommonTree KW_IN155_tree=null;
		CommonTree KW_TABLE156_tree=null;
		RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("index table name", state);
		try {
			// grammar/HiveParser.g:988:5: ( KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) )
			// grammar/HiveParser.g:988:7: KW_IN KW_TABLE indexTbl= tableName
			{
			KW_IN155=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_indexTblName3476); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN155);

			KW_TABLE156=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_indexTblName3478); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE156);

			pushFollow(FOLLOW_tableName_in_indexTblName3482);
			indexTbl=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(indexTbl.getTree());
			// AST REWRITE
			// elements: indexTbl
			// token labels: 
			// rule labels: indexTbl, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_indexTbl=new RewriteRuleSubtreeStream(adaptor,"rule indexTbl",indexTbl!=null?indexTbl.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 989:5: -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
			{
				// grammar/HiveParser.g:989:7: ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEINDEX_INDEXTBLNAME, "TOK_CREATEINDEX_INDEXTBLNAME"), root_1);
				adaptor.addChild(root_1, stream_indexTbl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexTblName"


	public static class indexPropertiesPrefixed_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexPropertiesPrefixed"
	// grammar/HiveParser.g:992:1: indexPropertiesPrefixed : KW_IDXPROPERTIES ! indexProperties ;
	public final HiveParser.indexPropertiesPrefixed_return indexPropertiesPrefixed() throws RecognitionException {
		HiveParser.indexPropertiesPrefixed_return retval = new HiveParser.indexPropertiesPrefixed_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_IDXPROPERTIES157=null;
		ParserRuleReturnScope indexProperties158 =null;

		CommonTree KW_IDXPROPERTIES157_tree=null;

		 pushMsg("table properties with prefix", state); 
		try {
			// grammar/HiveParser.g:995:5: ( KW_IDXPROPERTIES ! indexProperties )
			// grammar/HiveParser.g:996:9: KW_IDXPROPERTIES ! indexProperties
			{
			root_0 = (CommonTree)adaptor.nil();


			KW_IDXPROPERTIES157=(Token)match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed3529); if (state.failed) return retval;
			pushFollow(FOLLOW_indexProperties_in_indexPropertiesPrefixed3532);
			indexProperties158=indexProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, indexProperties158.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexPropertiesPrefixed"


	public static class indexProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexProperties"
	// grammar/HiveParser.g:999:1: indexProperties : LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) ;
	public final HiveParser.indexProperties_return indexProperties() throws RecognitionException {
		HiveParser.indexProperties_return retval = new HiveParser.indexProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN159=null;
		Token RPAREN161=null;
		ParserRuleReturnScope indexPropertiesList160 =null;

		CommonTree LPAREN159_tree=null;
		CommonTree RPAREN161_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_indexPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesList");

		 pushMsg("index properties", state); 
		try {
			// grammar/HiveParser.g:1002:5: ( LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) )
			// grammar/HiveParser.g:1003:7: LPAREN indexPropertiesList RPAREN
			{
			LPAREN159=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_indexProperties3565); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN159);

			pushFollow(FOLLOW_indexPropertiesList_in_indexProperties3567);
			indexPropertiesList160=indexPropertiesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_indexPropertiesList.add(indexPropertiesList160.getTree());
			RPAREN161=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_indexProperties3569); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN161);

			// AST REWRITE
			// elements: indexPropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1003:41: -> ^( TOK_INDEXPROPERTIES indexPropertiesList )
			{
				// grammar/HiveParser.g:1003:44: ^( TOK_INDEXPROPERTIES indexPropertiesList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INDEXPROPERTIES, "TOK_INDEXPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_indexPropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexProperties"


	public static class indexPropertiesList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexPropertiesList"
	// grammar/HiveParser.g:1006:1: indexPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) ;
	public final HiveParser.indexPropertiesList_return indexPropertiesList() throws RecognitionException {
		HiveParser.indexPropertiesList_return retval = new HiveParser.indexPropertiesList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA163=null;
		ParserRuleReturnScope keyValueProperty162 =null;
		ParserRuleReturnScope keyValueProperty164 =null;

		CommonTree COMMA163_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");

		 pushMsg("index properties list", state); 
		try {
			// grammar/HiveParser.g:1009:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) )
			// grammar/HiveParser.g:1010:7: keyValueProperty ( COMMA keyValueProperty )*
			{
			pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList3610);
			keyValueProperty162=keyValueProperty();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty162.getTree());
			// grammar/HiveParser.g:1010:24: ( COMMA keyValueProperty )*
			loop50:
			while (true) {
				int alt50=2;
				int LA50_0 = input.LA(1);
				if ( (LA50_0==COMMA) ) {
					alt50=1;
				}

				switch (alt50) {
				case 1 :
					// grammar/HiveParser.g:1010:25: COMMA keyValueProperty
					{
					COMMA163=(Token)match(input,COMMA,FOLLOW_COMMA_in_indexPropertiesList3613); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA163);

					pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList3615);
					keyValueProperty164=keyValueProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty164.getTree());
					}
					break;

				default :
					break loop50;
				}
			}

			// AST REWRITE
			// elements: keyValueProperty
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1010:50: -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
			{
				// grammar/HiveParser.g:1010:53: ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INDEXPROPLIST, "TOK_INDEXPROPLIST"), root_1);
				if ( !(stream_keyValueProperty.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_keyValueProperty.hasNext() ) {
					adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
				}
				stream_keyValueProperty.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexPropertiesList"


	public static class dropIndexStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropIndexStatement"
	// grammar/HiveParser.g:1013:1: dropIndexStatement : KW_DROP KW_INDEX ( ifExists )? indexName= identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) ;
	public final HiveParser.dropIndexStatement_return dropIndexStatement() throws RecognitionException {
		HiveParser.dropIndexStatement_return retval = new HiveParser.dropIndexStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP165=null;
		Token KW_INDEX166=null;
		Token KW_ON168=null;
		ParserRuleReturnScope indexName =null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope ifExists167 =null;

		CommonTree KW_DROP165_tree=null;
		CommonTree KW_INDEX166_tree=null;
		CommonTree KW_ON168_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("drop index statement", state);
		try {
			// grammar/HiveParser.g:1016:5: ( KW_DROP KW_INDEX ( ifExists )? indexName= identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) )
			// grammar/HiveParser.g:1016:7: KW_DROP KW_INDEX ( ifExists )? indexName= identifier KW_ON tab= tableName
			{
			KW_DROP165=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropIndexStatement3653); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP165);

			KW_INDEX166=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_dropIndexStatement3655); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX166);

			// grammar/HiveParser.g:1016:24: ( ifExists )?
			int alt51=2;
			int LA51_0 = input.LA(1);
			if ( (LA51_0==KW_IF) ) {
				alt51=1;
			}
			switch (alt51) {
				case 1 :
					// grammar/HiveParser.g:1016:24: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropIndexStatement3657);
					ifExists167=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists167.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_dropIndexStatement3662);
			indexName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(indexName.getTree());
			KW_ON168=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_dropIndexStatement3664); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON168);

			pushFollow(FOLLOW_tableName_in_dropIndexStatement3668);
			tab=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tab.getTree());
			// AST REWRITE
			// elements: tab, ifExists, indexName
			// token labels: 
			// rule labels: tab, indexName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);
			RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1017:5: -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
			{
				// grammar/HiveParser.g:1017:7: ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPINDEX, "TOK_DROPINDEX"), root_1);
				adaptor.addChild(root_1, stream_indexName.nextTree());
				adaptor.addChild(root_1, stream_tab.nextTree());
				// grammar/HiveParser.g:1017:39: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropIndexStatement"


	public static class dropTableStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropTableStatement"
	// grammar/HiveParser.g:1020:1: dropTableStatement : KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )? -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) ;
	public final HiveParser.dropTableStatement_return dropTableStatement() throws RecognitionException {
		HiveParser.dropTableStatement_return retval = new HiveParser.dropTableStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP169=null;
		Token KW_TABLE170=null;
		Token KW_PURGE173=null;
		ParserRuleReturnScope ifExists171 =null;
		ParserRuleReturnScope tableName172 =null;
		ParserRuleReturnScope replicationClause174 =null;

		CommonTree KW_DROP169_tree=null;
		CommonTree KW_TABLE170_tree=null;
		CommonTree KW_PURGE173_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_PURGE=new RewriteRuleTokenStream(adaptor,"token KW_PURGE");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("drop statement", state); 
		try {
			// grammar/HiveParser.g:1023:5: ( KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )? -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) )
			// grammar/HiveParser.g:1023:7: KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )?
			{
			KW_DROP169=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropTableStatement3713); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP169);

			KW_TABLE170=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_dropTableStatement3715); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE170);

			// grammar/HiveParser.g:1023:24: ( ifExists )?
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==KW_IF) ) {
				alt52=1;
			}
			switch (alt52) {
				case 1 :
					// grammar/HiveParser.g:1023:24: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropTableStatement3717);
					ifExists171=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists171.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_dropTableStatement3720);
			tableName172=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName172.getTree());
			// grammar/HiveParser.g:1023:44: ( KW_PURGE )?
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==KW_PURGE) ) {
				alt53=1;
			}
			switch (alt53) {
				case 1 :
					// grammar/HiveParser.g:1023:44: KW_PURGE
					{
					KW_PURGE173=(Token)match(input,KW_PURGE,FOLLOW_KW_PURGE_in_dropTableStatement3722); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_PURGE.add(KW_PURGE173);

					}
					break;

			}

			// grammar/HiveParser.g:1023:54: ( replicationClause )?
			int alt54=2;
			int LA54_0 = input.LA(1);
			if ( (LA54_0==KW_FOR) ) {
				alt54=1;
			}
			switch (alt54) {
				case 1 :
					// grammar/HiveParser.g:1023:54: replicationClause
					{
					pushFollow(FOLLOW_replicationClause_in_dropTableStatement3725);
					replicationClause174=replicationClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause174.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableName, KW_PURGE, replicationClause, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1024:5: -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
			{
				// grammar/HiveParser.g:1024:8: ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPTABLE, "TOK_DROPTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// grammar/HiveParser.g:1024:34: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// grammar/HiveParser.g:1024:44: ( KW_PURGE )?
				if ( stream_KW_PURGE.hasNext() ) {
					adaptor.addChild(root_1, stream_KW_PURGE.nextNode());
				}
				stream_KW_PURGE.reset();

				// grammar/HiveParser.g:1024:54: ( replicationClause )?
				if ( stream_replicationClause.hasNext() ) {
					adaptor.addChild(root_1, stream_replicationClause.nextTree());
				}
				stream_replicationClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropTableStatement"


	public static class alterStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatement"
	// grammar/HiveParser.g:1027:1: alterStatement : ( KW_ALTER KW_TABLE tableName alterTableStatementSuffix -> ^( TOK_ALTERTABLE tableName alterTableStatementSuffix ) | KW_ALTER KW_VIEW tableName ( KW_AS )? alterViewStatementSuffix -> ^( TOK_ALTERVIEW tableName alterViewStatementSuffix ) | KW_ALTER KW_INDEX alterIndexStatementSuffix -> alterIndexStatementSuffix | KW_ALTER ( KW_DATABASE | KW_SCHEMA ) alterDatabaseStatementSuffix -> alterDatabaseStatementSuffix );
	public final HiveParser.alterStatement_return alterStatement() throws RecognitionException {
		HiveParser.alterStatement_return retval = new HiveParser.alterStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ALTER175=null;
		Token KW_TABLE176=null;
		Token KW_ALTER179=null;
		Token KW_VIEW180=null;
		Token KW_AS182=null;
		Token KW_ALTER184=null;
		Token KW_INDEX185=null;
		Token KW_ALTER187=null;
		Token KW_DATABASE188=null;
		Token KW_SCHEMA189=null;
		ParserRuleReturnScope tableName177 =null;
		ParserRuleReturnScope alterTableStatementSuffix178 =null;
		ParserRuleReturnScope tableName181 =null;
		ParserRuleReturnScope alterViewStatementSuffix183 =null;
		ParserRuleReturnScope alterIndexStatementSuffix186 =null;
		ParserRuleReturnScope alterDatabaseStatementSuffix190 =null;

		CommonTree KW_ALTER175_tree=null;
		CommonTree KW_TABLE176_tree=null;
		CommonTree KW_ALTER179_tree=null;
		CommonTree KW_VIEW180_tree=null;
		CommonTree KW_AS182_tree=null;
		CommonTree KW_ALTER184_tree=null;
		CommonTree KW_INDEX185_tree=null;
		CommonTree KW_ALTER187_tree=null;
		CommonTree KW_DATABASE188_tree=null;
		CommonTree KW_SCHEMA189_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_alterTableStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTableStatementSuffix");
		RewriteRuleSubtreeStream stream_alterViewStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterViewStatementSuffix");
		RewriteRuleSubtreeStream stream_alterDatabaseStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterDatabaseStatementSuffix");
		RewriteRuleSubtreeStream stream_alterIndexStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterIndexStatementSuffix");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("alter statement", state); 
		try {
			// grammar/HiveParser.g:1030:5: ( KW_ALTER KW_TABLE tableName alterTableStatementSuffix -> ^( TOK_ALTERTABLE tableName alterTableStatementSuffix ) | KW_ALTER KW_VIEW tableName ( KW_AS )? alterViewStatementSuffix -> ^( TOK_ALTERVIEW tableName alterViewStatementSuffix ) | KW_ALTER KW_INDEX alterIndexStatementSuffix -> alterIndexStatementSuffix | KW_ALTER ( KW_DATABASE | KW_SCHEMA ) alterDatabaseStatementSuffix -> alterDatabaseStatementSuffix )
			int alt57=4;
			int LA57_0 = input.LA(1);
			if ( (LA57_0==KW_ALTER) ) {
				switch ( input.LA(2) ) {
				case KW_TABLE:
					{
					alt57=1;
					}
					break;
				case KW_VIEW:
					{
					alt57=2;
					}
					break;
				case KW_INDEX:
					{
					alt57=3;
					}
					break;
				case KW_DATABASE:
				case KW_SCHEMA:
					{
					alt57=4;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 57, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 57, 0, input);
				throw nvae;
			}

			switch (alt57) {
				case 1 :
					// grammar/HiveParser.g:1030:7: KW_ALTER KW_TABLE tableName alterTableStatementSuffix
					{
					KW_ALTER175=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement3774); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER175);

					KW_TABLE176=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatement3776); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE176);

					pushFollow(FOLLOW_tableName_in_alterStatement3778);
					tableName177=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName177.getTree());
					pushFollow(FOLLOW_alterTableStatementSuffix_in_alterStatement3780);
					alterTableStatementSuffix178=alterTableStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterTableStatementSuffix.add(alterTableStatementSuffix178.getTree());
					// AST REWRITE
					// elements: alterTableStatementSuffix, tableName
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1030:61: -> ^( TOK_ALTERTABLE tableName alterTableStatementSuffix )
					{
						// grammar/HiveParser.g:1030:64: ^( TOK_ALTERTABLE tableName alterTableStatementSuffix )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE, "TOK_ALTERTABLE"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						adaptor.addChild(root_1, stream_alterTableStatementSuffix.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1031:7: KW_ALTER KW_VIEW tableName ( KW_AS )? alterViewStatementSuffix
					{
					KW_ALTER179=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement3798); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER179);

					KW_VIEW180=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_alterStatement3800); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW180);

					pushFollow(FOLLOW_tableName_in_alterStatement3802);
					tableName181=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName181.getTree());
					// grammar/HiveParser.g:1031:34: ( KW_AS )?
					int alt55=2;
					int LA55_0 = input.LA(1);
					if ( (LA55_0==KW_AS) ) {
						alt55=1;
					}
					switch (alt55) {
						case 1 :
							// grammar/HiveParser.g:1031:34: KW_AS
							{
							KW_AS182=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_alterStatement3804); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS182);

							}
							break;

					}

					pushFollow(FOLLOW_alterViewStatementSuffix_in_alterStatement3807);
					alterViewStatementSuffix183=alterViewStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterViewStatementSuffix.add(alterViewStatementSuffix183.getTree());
					// AST REWRITE
					// elements: alterViewStatementSuffix, tableName
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1031:66: -> ^( TOK_ALTERVIEW tableName alterViewStatementSuffix )
					{
						// grammar/HiveParser.g:1031:69: ^( TOK_ALTERVIEW tableName alterViewStatementSuffix )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW, "TOK_ALTERVIEW"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						adaptor.addChild(root_1, stream_alterViewStatementSuffix.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1032:7: KW_ALTER KW_INDEX alterIndexStatementSuffix
					{
					KW_ALTER184=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement3825); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER184);

					KW_INDEX185=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_alterStatement3827); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX185);

					pushFollow(FOLLOW_alterIndexStatementSuffix_in_alterStatement3829);
					alterIndexStatementSuffix186=alterIndexStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterIndexStatementSuffix.add(alterIndexStatementSuffix186.getTree());
					// AST REWRITE
					// elements: alterIndexStatementSuffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1032:51: -> alterIndexStatementSuffix
					{
						adaptor.addChild(root_0, stream_alterIndexStatementSuffix.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// grammar/HiveParser.g:1033:7: KW_ALTER ( KW_DATABASE | KW_SCHEMA ) alterDatabaseStatementSuffix
					{
					KW_ALTER187=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement3841); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER187);

					// grammar/HiveParser.g:1033:16: ( KW_DATABASE | KW_SCHEMA )
					int alt56=2;
					int LA56_0 = input.LA(1);
					if ( (LA56_0==KW_DATABASE) ) {
						alt56=1;
					}
					else if ( (LA56_0==KW_SCHEMA) ) {
						alt56=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 56, 0, input);
						throw nvae;
					}

					switch (alt56) {
						case 1 :
							// grammar/HiveParser.g:1033:17: KW_DATABASE
							{
							KW_DATABASE188=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_alterStatement3844); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE188);

							}
							break;
						case 2 :
							// grammar/HiveParser.g:1033:29: KW_SCHEMA
							{
							KW_SCHEMA189=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_alterStatement3846); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA189);

							}
							break;

					}

					pushFollow(FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3849);
					alterDatabaseStatementSuffix190=alterDatabaseStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterDatabaseStatementSuffix.add(alterDatabaseStatementSuffix190.getTree());
					// AST REWRITE
					// elements: alterDatabaseStatementSuffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1033:69: -> alterDatabaseStatementSuffix
					{
						adaptor.addChild(root_0, stream_alterDatabaseStatementSuffix.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatement"


	public static class alterTableStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterTableStatementSuffix"
	// grammar/HiveParser.g:1036:1: alterTableStatementSuffix : ( ( alterStatementSuffixRename[true] )=> alterStatementSuffixRename[true] | alterStatementSuffixDropPartitions[true] | alterStatementSuffixAddPartitions[true] | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSkewedby | alterStatementSuffixExchangePartition | alterStatementPartitionKeyType | alterStatementSuffixDropConstraint | alterStatementSuffixAddConstraint | ( partitionSpec )? alterTblPartitionStatementSuffix -> alterTblPartitionStatementSuffix ( partitionSpec )? );
	public final HiveParser.alterTableStatementSuffix_return alterTableStatementSuffix() throws RecognitionException {
		HiveParser.alterTableStatementSuffix_return retval = new HiveParser.alterTableStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alterStatementSuffixRename191 =null;
		ParserRuleReturnScope alterStatementSuffixDropPartitions192 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitions193 =null;
		ParserRuleReturnScope alterStatementSuffixTouch194 =null;
		ParserRuleReturnScope alterStatementSuffixArchive195 =null;
		ParserRuleReturnScope alterStatementSuffixUnArchive196 =null;
		ParserRuleReturnScope alterStatementSuffixProperties197 =null;
		ParserRuleReturnScope alterStatementSuffixSkewedby198 =null;
		ParserRuleReturnScope alterStatementSuffixExchangePartition199 =null;
		ParserRuleReturnScope alterStatementPartitionKeyType200 =null;
		ParserRuleReturnScope alterStatementSuffixDropConstraint201 =null;
		ParserRuleReturnScope alterStatementSuffixAddConstraint202 =null;
		ParserRuleReturnScope partitionSpec203 =null;
		ParserRuleReturnScope alterTblPartitionStatementSuffix204 =null;

		RewriteRuleSubtreeStream stream_alterTblPartitionStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTblPartitionStatementSuffix");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("alter table statement", state); 
		try {
			// grammar/HiveParser.g:1039:5: ( ( alterStatementSuffixRename[true] )=> alterStatementSuffixRename[true] | alterStatementSuffixDropPartitions[true] | alterStatementSuffixAddPartitions[true] | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSkewedby | alterStatementSuffixExchangePartition | alterStatementPartitionKeyType | alterStatementSuffixDropConstraint | alterStatementSuffixAddConstraint | ( partitionSpec )? alterTblPartitionStatementSuffix -> alterTblPartitionStatementSuffix ( partitionSpec )? )
			int alt59=13;
			switch ( input.LA(1) ) {
			case KW_RENAME:
				{
				int LA59_1 = input.LA(2);
				if ( (LA59_1==KW_TO) ) {
					int LA59_20 = input.LA(3);
					if ( (LA59_20==Identifier) && (synpred3_HiveParser())) {
						alt59=1;
					}
					else if ( ((LA59_20 >= KW_ABORT && LA59_20 <= KW_AFTER)||LA59_20==KW_ANALYZE||LA59_20==KW_ARCHIVE||LA59_20==KW_ASC||(LA59_20 >= KW_AUTOCOMMIT && LA59_20 <= KW_BEFORE)||(LA59_20 >= KW_BUCKET && LA59_20 <= KW_BUCKETS)||LA59_20==KW_CASCADE||LA59_20==KW_CHANGE||(LA59_20 >= KW_CLUSTER && LA59_20 <= KW_COLLECTION)||(LA59_20 >= KW_COLUMNS && LA59_20 <= KW_COMMENT)||(LA59_20 >= KW_COMPACT && LA59_20 <= KW_CONCATENATE)||LA59_20==KW_CONTINUE||LA59_20==KW_DATA||LA59_20==KW_DATABASES||(LA59_20 >= KW_DATETIME && LA59_20 <= KW_DBPROPERTIES)||(LA59_20 >= KW_DEFERRED && LA59_20 <= KW_DEFINED)||(LA59_20 >= KW_DELIMITED && LA59_20 <= KW_DESC)||(LA59_20 >= KW_DIRECTORIES && LA59_20 <= KW_DISABLE)||LA59_20==KW_DISTRIBUTE||LA59_20==KW_ELEM_TYPE||LA59_20==KW_ENABLE||LA59_20==KW_ESCAPED||LA59_20==KW_EXCLUSIVE||(LA59_20 >= KW_EXPLAIN && LA59_20 <= KW_EXPORT)||(LA59_20 >= KW_FIELDS && LA59_20 <= KW_FIRST)||(LA59_20 >= KW_FORMAT && LA59_20 <= KW_FORMATTED)||LA59_20==KW_FUNCTIONS||(LA59_20 >= KW_HOUR && LA59_20 <= KW_IDXPROPERTIES)||(LA59_20 >= KW_INDEX && LA59_20 <= KW_INDEXES)||(LA59_20 >= KW_INPATH && LA59_20 <= KW_INPUTFORMAT)||(LA59_20 >= KW_ISOLATION && LA59_20 <= KW_JAR)||(LA59_20 >= KW_KEY && LA59_20 <= KW_LAST)||LA59_20==KW_LEVEL||(LA59_20 >= KW_LIMIT && LA59_20 <= KW_LOAD)||(LA59_20 >= KW_LOCATION && LA59_20 <= KW_LONG)||(LA59_20 >= KW_MAPJOIN && LA59_20 <= KW_MONTH)||LA59_20==KW_MSCK||(LA59_20 >= KW_NORELY && LA59_20 <= KW_NOSCAN)||LA59_20==KW_NOVALIDATE||LA59_20==KW_NULLS||LA59_20==KW_OFFSET||LA59_20==KW_OPTION||(LA59_20 >= KW_OUTPUTDRIVER && LA59_20 <= KW_OUTPUTFORMAT)||(LA59_20 >= KW_OVERWRITE && LA59_20 <= KW_OWNER)||(LA59_20 >= KW_PARTITIONED && LA59_20 <= KW_PARTITIONS)||LA59_20==KW_PLUS||LA59_20==KW_PRETTY||LA59_20==KW_PRINCIPALS||LA59_20==KW_PURGE||LA59_20==KW_READ||(LA59_20 >= KW_REBUILD && LA59_20 <= KW_RECORDWRITER)||(LA59_20 >= KW_RELOAD && LA59_20 <= KW_RESTRICT)||LA59_20==KW_REWRITE||(LA59_20 >= KW_ROLE && LA59_20 <= KW_ROLES)||(LA59_20 >= KW_SCHEMA && LA59_20 <= KW_SECOND)||(LA59_20 >= KW_SEMI && LA59_20 <= KW_SERVER)||(LA59_20 >= KW_SETS && LA59_20 <= KW_SKEWED)||(LA59_20 >= KW_SNAPSHOT && LA59_20 <= KW_SSL)||(LA59_20 >= KW_STATISTICS && LA59_20 <= KW_STRUCT)||LA59_20==KW_TABLES||(LA59_20 >= KW_TBLPROPERTIES && LA59_20 <= KW_TERMINATED)||LA59_20==KW_TINYINT||(LA59_20 >= KW_TOUCH && LA59_20 <= KW_TRANSACTIONS)||LA59_20==KW_UNARCHIVE||LA59_20==KW_UNDO||LA59_20==KW_UNIONTYPE||(LA59_20 >= KW_UNLOCK && LA59_20 <= KW_UNSIGNED)||(LA59_20 >= KW_URI && LA59_20 <= KW_USE)||(LA59_20 >= KW_UTC && LA59_20 <= KW_VALIDATE)||LA59_20==KW_VALUE_TYPE||LA59_20==KW_VIEW||LA59_20==KW_WHILE||(LA59_20 >= KW_WORK && LA59_20 <= KW_YEAR)||LA59_20==KW_HOLD_DDLTIME||LA59_20==KW_IGNORE||LA59_20==KW_NO_DROP||LA59_20==KW_OFFLINE||LA59_20==KW_PROTECTION||LA59_20==KW_READONLY) && (synpred3_HiveParser())) {
						alt59=1;
					}
					else if ( (LA59_20==KW_PARTITION) ) {
						int LA59_42 = input.LA(4);
						if ( (synpred3_HiveParser()) ) {
							alt59=1;
						}
						else if ( (true) ) {
							alt59=13;
						}

					}
					else if ( ((LA59_20 >= KW_ALL && LA59_20 <= KW_ALTER)||(LA59_20 >= KW_ARRAY && LA59_20 <= KW_AS)||LA59_20==KW_AUTHORIZATION||(LA59_20 >= KW_BETWEEN && LA59_20 <= KW_BOTH)||LA59_20==KW_BY||LA59_20==KW_CONSTRAINT||LA59_20==KW_CREATE||LA59_20==KW_CUBE||(LA59_20 >= KW_CURRENT_DATE && LA59_20 <= KW_CURSOR)||LA59_20==KW_DATE||LA59_20==KW_DECIMAL||LA59_20==KW_DELETE||LA59_20==KW_DESCRIBE||(LA59_20 >= KW_DOUBLE && LA59_20 <= KW_DROP)||LA59_20==KW_EXISTS||(LA59_20 >= KW_EXTERNAL && LA59_20 <= KW_FETCH)||LA59_20==KW_FLOAT||(LA59_20 >= KW_FOR && LA59_20 <= KW_FOREIGN)||LA59_20==KW_FULL||(LA59_20 >= KW_GRANT && LA59_20 <= KW_GROUPING)||(LA59_20 >= KW_IMPORT && LA59_20 <= KW_IN)||LA59_20==KW_INNER||(LA59_20 >= KW_INSERT && LA59_20 <= KW_INTERSECT)||(LA59_20 >= KW_INTO && LA59_20 <= KW_IS)||(LA59_20 >= KW_LATERAL && LA59_20 <= KW_LEFT)||LA59_20==KW_LIKE||LA59_20==KW_LOCAL||LA59_20==KW_NONE||LA59_20==KW_NULL||LA59_20==KW_OF||(LA59_20 >= KW_ORDER && LA59_20 <= KW_OUTER)||LA59_20==KW_PERCENT||LA59_20==KW_PRIMARY||LA59_20==KW_PROCEDURE||LA59_20==KW_RANGE||LA59_20==KW_READS||(LA59_20 >= KW_REFERENCES && LA59_20 <= KW_REGEXP)||LA59_20==KW_REVOKE||(LA59_20 >= KW_RIGHT && LA59_20 <= KW_RLIKE)||(LA59_20 >= KW_ROLLUP && LA59_20 <= KW_ROWS)||LA59_20==KW_SET||LA59_20==KW_SMALLINT||LA59_20==KW_TABLE||LA59_20==KW_TIMESTAMP||LA59_20==KW_TO||(LA59_20 >= KW_TRIGGER && LA59_20 <= KW_TRUNCATE)||LA59_20==KW_UNION||LA59_20==KW_UPDATE||(LA59_20 >= KW_USER && LA59_20 <= KW_USING)||LA59_20==KW_VALUES||LA59_20==KW_WITH) && (synpred3_HiveParser())) {
						alt59=1;
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 59, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_DROP:
				{
				int LA59_2 = input.LA(2);
				if ( (LA59_2==KW_CONSTRAINT) ) {
					alt59=11;
				}
				else if ( (LA59_2==KW_IF||LA59_2==KW_PARTITION) ) {
					alt59=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 59, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_ADD:
				{
				switch ( input.LA(2) ) {
				case KW_IF:
				case KW_PARTITION:
					{
					alt59=3;
					}
					break;
				case KW_CONSTRAINT:
					{
					alt59=12;
					}
					break;
				case KW_COLUMNS:
					{
					alt59=13;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 59, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case KW_TOUCH:
				{
				alt59=4;
				}
				break;
			case KW_ARCHIVE:
				{
				alt59=5;
				}
				break;
			case KW_UNARCHIVE:
				{
				alt59=6;
				}
				break;
			case KW_SET:
				{
				int LA59_7 = input.LA(2);
				if ( (LA59_7==KW_TBLPROPERTIES) ) {
					alt59=7;
				}
				else if ( (LA59_7==KW_FILEFORMAT||LA59_7==KW_LOCATION||(LA59_7 >= KW_SERDE && LA59_7 <= KW_SERDEPROPERTIES)||LA59_7==KW_SKEWED) ) {
					alt59=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 59, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_UNSET:
				{
				alt59=7;
				}
				break;
			case KW_SKEWED:
				{
				alt59=8;
				}
				break;
			case KW_NOT:
				{
				int LA59_10 = input.LA(2);
				if ( (LA59_10==KW_SKEWED||LA59_10==KW_STORED) ) {
					alt59=8;
				}
				else if ( (LA59_10==KW_CLUSTERED||LA59_10==KW_SORTED) ) {
					alt59=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 59, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_EXCHANGE:
				{
				alt59=9;
				}
				break;
			case KW_PARTITION:
				{
				int LA59_12 = input.LA(2);
				if ( (LA59_12==KW_COLUMN) ) {
					alt59=10;
				}
				else if ( (LA59_12==LPAREN) ) {
					alt59=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 59, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_CHANGE:
			case KW_CLUSTERED:
			case KW_COMPACT:
			case KW_CONCATENATE:
			case KW_INTO:
			case KW_REPLACE:
			case KW_UPDATE:
				{
				alt59=13;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 59, 0, input);
				throw nvae;
			}
			switch (alt59) {
				case 1 :
					// grammar/HiveParser.g:1039:7: ( alterStatementSuffixRename[true] )=> alterStatementSuffixRename[true]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3887);
					alterStatementSuffixRename191=alterStatementSuffixRename(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRename191.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1040:7: alterStatementSuffixDropPartitions[true]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3896);
					alterStatementSuffixDropPartitions192=alterStatementSuffixDropPartitions(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixDropPartitions192.getTree());

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1041:7: alterStatementSuffixAddPartitions[true]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3905);
					alterStatementSuffixAddPartitions193=alterStatementSuffixAddPartitions(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddPartitions193.getTree());

					}
					break;
				case 4 :
					// grammar/HiveParser.g:1042:7: alterStatementSuffixTouch
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3914);
					alterStatementSuffixTouch194=alterStatementSuffixTouch();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixTouch194.getTree());

					}
					break;
				case 5 :
					// grammar/HiveParser.g:1043:7: alterStatementSuffixArchive
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3922);
					alterStatementSuffixArchive195=alterStatementSuffixArchive();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixArchive195.getTree());

					}
					break;
				case 6 :
					// grammar/HiveParser.g:1044:7: alterStatementSuffixUnArchive
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3930);
					alterStatementSuffixUnArchive196=alterStatementSuffixUnArchive();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixUnArchive196.getTree());

					}
					break;
				case 7 :
					// grammar/HiveParser.g:1045:7: alterStatementSuffixProperties
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3938);
					alterStatementSuffixProperties197=alterStatementSuffixProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixProperties197.getTree());

					}
					break;
				case 8 :
					// grammar/HiveParser.g:1046:7: alterStatementSuffixSkewedby
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix3946);
					alterStatementSuffixSkewedby198=alterStatementSuffixSkewedby();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixSkewedby198.getTree());

					}
					break;
				case 9 :
					// grammar/HiveParser.g:1047:7: alterStatementSuffixExchangePartition
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixExchangePartition_in_alterTableStatementSuffix3954);
					alterStatementSuffixExchangePartition199=alterStatementSuffixExchangePartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixExchangePartition199.getTree());

					}
					break;
				case 10 :
					// grammar/HiveParser.g:1048:7: alterStatementPartitionKeyType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementPartitionKeyType_in_alterTableStatementSuffix3962);
					alterStatementPartitionKeyType200=alterStatementPartitionKeyType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementPartitionKeyType200.getTree());

					}
					break;
				case 11 :
					// grammar/HiveParser.g:1049:7: alterStatementSuffixDropConstraint
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixDropConstraint_in_alterTableStatementSuffix3970);
					alterStatementSuffixDropConstraint201=alterStatementSuffixDropConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixDropConstraint201.getTree());

					}
					break;
				case 12 :
					// grammar/HiveParser.g:1050:7: alterStatementSuffixAddConstraint
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddConstraint_in_alterTableStatementSuffix3978);
					alterStatementSuffixAddConstraint202=alterStatementSuffixAddConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddConstraint202.getTree());

					}
					break;
				case 13 :
					// grammar/HiveParser.g:1051:7: ( partitionSpec )? alterTblPartitionStatementSuffix
					{
					// grammar/HiveParser.g:1051:7: ( partitionSpec )?
					int alt58=2;
					int LA58_0 = input.LA(1);
					if ( (LA58_0==KW_PARTITION) ) {
						alt58=1;
					}
					switch (alt58) {
						case 1 :
							// grammar/HiveParser.g:1051:7: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_alterTableStatementSuffix3986);
							partitionSpec203=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec203.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_alterTblPartitionStatementSuffix_in_alterTableStatementSuffix3989);
					alterTblPartitionStatementSuffix204=alterTblPartitionStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterTblPartitionStatementSuffix.add(alterTblPartitionStatementSuffix204.getTree());
					// AST REWRITE
					// elements: alterTblPartitionStatementSuffix, partitionSpec
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1051:55: -> alterTblPartitionStatementSuffix ( partitionSpec )?
					{
						adaptor.addChild(root_0, stream_alterTblPartitionStatementSuffix.nextTree());
						// grammar/HiveParser.g:1051:91: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_0, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTableStatementSuffix"


	public static class alterTblPartitionStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterTblPartitionStatementSuffix"
	// grammar/HiveParser.g:1054:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation | alterStatementSuffixClusterbySortby | alterStatementSuffixCompact | alterStatementSuffixUpdateStatsCol | alterStatementSuffixUpdateStats | alterStatementSuffixRenameCol | alterStatementSuffixAddCol );
	public final HiveParser.alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix() throws RecognitionException {
		HiveParser.alterTblPartitionStatementSuffix_return retval = new HiveParser.alterTblPartitionStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alterStatementSuffixFileFormat205 =null;
		ParserRuleReturnScope alterStatementSuffixLocation206 =null;
		ParserRuleReturnScope alterStatementSuffixMergeFiles207 =null;
		ParserRuleReturnScope alterStatementSuffixSerdeProperties208 =null;
		ParserRuleReturnScope alterStatementSuffixRenamePart209 =null;
		ParserRuleReturnScope alterStatementSuffixBucketNum210 =null;
		ParserRuleReturnScope alterTblPartitionStatementSuffixSkewedLocation211 =null;
		ParserRuleReturnScope alterStatementSuffixClusterbySortby212 =null;
		ParserRuleReturnScope alterStatementSuffixCompact213 =null;
		ParserRuleReturnScope alterStatementSuffixUpdateStatsCol214 =null;
		ParserRuleReturnScope alterStatementSuffixUpdateStats215 =null;
		ParserRuleReturnScope alterStatementSuffixRenameCol216 =null;
		ParserRuleReturnScope alterStatementSuffixAddCol217 =null;


		pushMsg("alter table partition statement suffix", state);
		try {
			// grammar/HiveParser.g:1057:3: ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation | alterStatementSuffixClusterbySortby | alterStatementSuffixCompact | alterStatementSuffixUpdateStatsCol | alterStatementSuffixUpdateStats | alterStatementSuffixRenameCol | alterStatementSuffixAddCol )
			int alt60=13;
			switch ( input.LA(1) ) {
			case KW_SET:
				{
				switch ( input.LA(2) ) {
				case KW_FILEFORMAT:
					{
					alt60=1;
					}
					break;
				case KW_LOCATION:
					{
					alt60=2;
					}
					break;
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
					{
					alt60=4;
					}
					break;
				case KW_SKEWED:
					{
					alt60=7;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 60, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case KW_CONCATENATE:
				{
				alt60=3;
				}
				break;
			case KW_RENAME:
				{
				alt60=5;
				}
				break;
			case KW_INTO:
				{
				alt60=6;
				}
				break;
			case KW_CLUSTERED:
			case KW_NOT:
				{
				alt60=8;
				}
				break;
			case KW_COMPACT:
				{
				alt60=9;
				}
				break;
			case KW_UPDATE:
				{
				int LA60_8 = input.LA(2);
				if ( (LA60_8==KW_STATISTICS) ) {
					int LA60_17 = input.LA(3);
					if ( (LA60_17==KW_FOR) ) {
						alt60=10;
					}
					else if ( (LA60_17==KW_SET) ) {
						alt60=11;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 60, 17, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 60, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_CHANGE:
				{
				alt60=12;
				}
				break;
			case KW_ADD:
			case KW_REPLACE:
				{
				alt60=13;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 60, 0, input);
				throw nvae;
			}
			switch (alt60) {
				case 1 :
					// grammar/HiveParser.g:1057:5: alterStatementSuffixFileFormat
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4021);
					alterStatementSuffixFileFormat205=alterStatementSuffixFileFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixFileFormat205.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1058:5: alterStatementSuffixLocation
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4027);
					alterStatementSuffixLocation206=alterStatementSuffixLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixLocation206.getTree());

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1059:5: alterStatementSuffixMergeFiles
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4033);
					alterStatementSuffixMergeFiles207=alterStatementSuffixMergeFiles();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixMergeFiles207.getTree());

					}
					break;
				case 4 :
					// grammar/HiveParser.g:1060:5: alterStatementSuffixSerdeProperties
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4039);
					alterStatementSuffixSerdeProperties208=alterStatementSuffixSerdeProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixSerdeProperties208.getTree());

					}
					break;
				case 5 :
					// grammar/HiveParser.g:1061:5: alterStatementSuffixRenamePart
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4045);
					alterStatementSuffixRenamePart209=alterStatementSuffixRenamePart();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRenamePart209.getTree());

					}
					break;
				case 6 :
					// grammar/HiveParser.g:1062:5: alterStatementSuffixBucketNum
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixBucketNum_in_alterTblPartitionStatementSuffix4051);
					alterStatementSuffixBucketNum210=alterStatementSuffixBucketNum();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixBucketNum210.getTree());

					}
					break;
				case 7 :
					// grammar/HiveParser.g:1063:5: alterTblPartitionStatementSuffixSkewedLocation
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix4057);
					alterTblPartitionStatementSuffixSkewedLocation211=alterTblPartitionStatementSuffixSkewedLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterTblPartitionStatementSuffixSkewedLocation211.getTree());

					}
					break;
				case 8 :
					// grammar/HiveParser.g:1064:5: alterStatementSuffixClusterbySortby
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixClusterbySortby_in_alterTblPartitionStatementSuffix4063);
					alterStatementSuffixClusterbySortby212=alterStatementSuffixClusterbySortby();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixClusterbySortby212.getTree());

					}
					break;
				case 9 :
					// grammar/HiveParser.g:1065:5: alterStatementSuffixCompact
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixCompact_in_alterTblPartitionStatementSuffix4069);
					alterStatementSuffixCompact213=alterStatementSuffixCompact();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixCompact213.getTree());

					}
					break;
				case 10 :
					// grammar/HiveParser.g:1066:5: alterStatementSuffixUpdateStatsCol
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixUpdateStatsCol_in_alterTblPartitionStatementSuffix4075);
					alterStatementSuffixUpdateStatsCol214=alterStatementSuffixUpdateStatsCol();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixUpdateStatsCol214.getTree());

					}
					break;
				case 11 :
					// grammar/HiveParser.g:1067:5: alterStatementSuffixUpdateStats
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixUpdateStats_in_alterTblPartitionStatementSuffix4081);
					alterStatementSuffixUpdateStats215=alterStatementSuffixUpdateStats();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixUpdateStats215.getTree());

					}
					break;
				case 12 :
					// grammar/HiveParser.g:1068:5: alterStatementSuffixRenameCol
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRenameCol_in_alterTblPartitionStatementSuffix4087);
					alterStatementSuffixRenameCol216=alterStatementSuffixRenameCol();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRenameCol216.getTree());

					}
					break;
				case 13 :
					// grammar/HiveParser.g:1069:5: alterStatementSuffixAddCol
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddCol_in_alterTblPartitionStatementSuffix4093);
					alterStatementSuffixAddCol217=alterStatementSuffixAddCol();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddCol217.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTblPartitionStatementSuffix"


	public static class alterStatementPartitionKeyType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementPartitionKeyType"
	// grammar/HiveParser.g:1072:1: alterStatementPartitionKeyType : KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN -> ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType ) ;
	public final HiveParser.alterStatementPartitionKeyType_return alterStatementPartitionKeyType() throws RecognitionException {
		HiveParser.alterStatementPartitionKeyType_return retval = new HiveParser.alterStatementPartitionKeyType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_PARTITION218=null;
		Token KW_COLUMN219=null;
		Token LPAREN220=null;
		Token RPAREN222=null;
		ParserRuleReturnScope columnNameType221 =null;

		CommonTree KW_PARTITION218_tree=null;
		CommonTree KW_COLUMN219_tree=null;
		CommonTree LPAREN220_tree=null;
		CommonTree RPAREN222_tree=null;
		RewriteRuleTokenStream stream_KW_PARTITION=new RewriteRuleTokenStream(adaptor,"token KW_PARTITION");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");

		msgs.push("alter partition key type"); 
		try {
			// grammar/HiveParser.g:1075:2: ( KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN -> ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType ) )
			// grammar/HiveParser.g:1075:4: KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN
			{
			KW_PARTITION218=(Token)match(input,KW_PARTITION,FOLLOW_KW_PARTITION_in_alterStatementPartitionKeyType4115); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PARTITION.add(KW_PARTITION218);

			KW_COLUMN219=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementPartitionKeyType4117); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN219);

			LPAREN220=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementPartitionKeyType4119); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN220);

			pushFollow(FOLLOW_columnNameType_in_alterStatementPartitionKeyType4121);
			columnNameType221=columnNameType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType221.getTree());
			RPAREN222=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementPartitionKeyType4123); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN222);

			// AST REWRITE
			// elements: columnNameType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1076:2: -> ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType )
			{
				// grammar/HiveParser.g:1076:5: ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_PARTCOLTYPE, "TOK_ALTERTABLE_PARTCOLTYPE"), root_1);
				adaptor.addChild(root_1, stream_columnNameType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {msgs.pop();}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementPartitionKeyType"


	public static class alterViewStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterViewStatementSuffix"
	// grammar/HiveParser.g:1079:1: alterViewStatementSuffix : ( alterViewSuffixProperties | alterStatementSuffixRename[false] | alterStatementSuffixAddPartitions[false] | alterStatementSuffixDropPartitions[false] | selectStatementWithCTE );
	public final HiveParser.alterViewStatementSuffix_return alterViewStatementSuffix() throws RecognitionException {
		HiveParser.alterViewStatementSuffix_return retval = new HiveParser.alterViewStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alterViewSuffixProperties223 =null;
		ParserRuleReturnScope alterStatementSuffixRename224 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitions225 =null;
		ParserRuleReturnScope alterStatementSuffixDropPartitions226 =null;
		ParserRuleReturnScope selectStatementWithCTE227 =null;


		 pushMsg("alter view statement", state); 
		try {
			// grammar/HiveParser.g:1082:5: ( alterViewSuffixProperties | alterStatementSuffixRename[false] | alterStatementSuffixAddPartitions[false] | alterStatementSuffixDropPartitions[false] | selectStatementWithCTE )
			int alt61=5;
			switch ( input.LA(1) ) {
			case KW_SET:
			case KW_UNSET:
				{
				alt61=1;
				}
				break;
			case KW_RENAME:
				{
				alt61=2;
				}
				break;
			case KW_ADD:
				{
				alt61=3;
				}
				break;
			case KW_DROP:
				{
				alt61=4;
				}
				break;
			case KW_MAP:
			case KW_REDUCE:
			case KW_SELECT:
			case KW_WITH:
				{
				alt61=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 61, 0, input);
				throw nvae;
			}
			switch (alt61) {
				case 1 :
					// grammar/HiveParser.g:1082:7: alterViewSuffixProperties
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix4156);
					alterViewSuffixProperties223=alterViewSuffixProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterViewSuffixProperties223.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1083:7: alterStatementSuffixRename[false]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix4164);
					alterStatementSuffixRename224=alterStatementSuffixRename(false);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRename224.getTree());

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1084:7: alterStatementSuffixAddPartitions[false]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix4173);
					alterStatementSuffixAddPartitions225=alterStatementSuffixAddPartitions(false);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddPartitions225.getTree());

					}
					break;
				case 4 :
					// grammar/HiveParser.g:1085:7: alterStatementSuffixDropPartitions[false]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix4182);
					alterStatementSuffixDropPartitions226=alterStatementSuffixDropPartitions(false);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixDropPartitions226.getTree());

					}
					break;
				case 5 :
					// grammar/HiveParser.g:1086:7: selectStatementWithCTE
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_selectStatementWithCTE_in_alterViewStatementSuffix4191);
					selectStatementWithCTE227=selectStatementWithCTE();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, selectStatementWithCTE227.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterViewStatementSuffix"


	public static class alterIndexStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterIndexStatementSuffix"
	// grammar/HiveParser.g:1089:1: alterIndexStatementSuffix : indexName= identifier KW_ON tableName ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties ) ) ;
	public final HiveParser.alterIndexStatementSuffix_return alterIndexStatementSuffix() throws RecognitionException {
		HiveParser.alterIndexStatementSuffix_return retval = new HiveParser.alterIndexStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ON228=null;
		Token KW_REBUILD231=null;
		Token KW_SET232=null;
		Token KW_IDXPROPERTIES233=null;
		ParserRuleReturnScope indexName =null;
		ParserRuleReturnScope tableName229 =null;
		ParserRuleReturnScope partitionSpec230 =null;
		ParserRuleReturnScope indexProperties234 =null;

		CommonTree KW_ON228_tree=null;
		CommonTree KW_REBUILD231_tree=null;
		CommonTree KW_SET232_tree=null;
		CommonTree KW_IDXPROPERTIES233_tree=null;
		RewriteRuleTokenStream stream_KW_IDXPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_IDXPROPERTIES");
		RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_indexProperties=new RewriteRuleSubtreeStream(adaptor,"rule indexProperties");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("alter index statement", state); 
		try {
			// grammar/HiveParser.g:1092:5: (indexName= identifier KW_ON tableName ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties ) ) )
			// grammar/HiveParser.g:1092:7: indexName= identifier KW_ON tableName ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties ) )
			{
			pushFollow(FOLLOW_identifier_in_alterIndexStatementSuffix4220);
			indexName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(indexName.getTree());
			KW_ON228=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_alterIndexStatementSuffix4222); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON228);

			pushFollow(FOLLOW_tableName_in_alterIndexStatementSuffix4224);
			tableName229=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName229.getTree());
			// grammar/HiveParser.g:1092:44: ( partitionSpec )?
			int alt62=2;
			int LA62_0 = input.LA(1);
			if ( (LA62_0==KW_PARTITION) ) {
				alt62=1;
			}
			switch (alt62) {
				case 1 :
					// grammar/HiveParser.g:1092:44: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterIndexStatementSuffix4226);
					partitionSpec230=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec230.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:1093:5: ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties ) )
			int alt63=2;
			int LA63_0 = input.LA(1);
			if ( (LA63_0==KW_REBUILD) ) {
				alt63=1;
			}
			else if ( (LA63_0==KW_SET) ) {
				alt63=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 63, 0, input);
				throw nvae;
			}

			switch (alt63) {
				case 1 :
					// grammar/HiveParser.g:1094:7: KW_REBUILD
					{
					KW_REBUILD231=(Token)match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix4241); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_REBUILD.add(KW_REBUILD231);

					// AST REWRITE
					// elements: tableName, partitionSpec, indexName
					// token labels: 
					// rule labels: indexName, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1095:7: -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? )
					{
						// grammar/HiveParser.g:1095:9: ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERINDEX_REBUILD, "TOK_ALTERINDEX_REBUILD"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						adaptor.addChild(root_1, stream_indexName.nextTree());
						// grammar/HiveParser.g:1095:55: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1097:7: KW_SET KW_IDXPROPERTIES indexProperties
					{
					KW_SET232=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterIndexStatementSuffix4274); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET232);

					KW_IDXPROPERTIES233=(Token)match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix4276); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_IDXPROPERTIES.add(KW_IDXPROPERTIES233);

					pushFollow(FOLLOW_indexProperties_in_alterIndexStatementSuffix4284);
					indexProperties234=indexProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_indexProperties.add(indexProperties234.getTree());
					// AST REWRITE
					// elements: indexProperties, indexName, tableName
					// token labels: 
					// rule labels: indexName, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1099:7: -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties )
					{
						// grammar/HiveParser.g:1099:9: ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERINDEX_PROPERTIES, "TOK_ALTERINDEX_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						adaptor.addChild(root_1, stream_indexName.nextTree());
						adaptor.addChild(root_1, stream_indexProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterIndexStatementSuffix"


	public static class alterDatabaseStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseStatementSuffix"
	// grammar/HiveParser.g:1103:1: alterDatabaseStatementSuffix : ( alterDatabaseSuffixProperties | alterDatabaseSuffixSetOwner );
	public final HiveParser.alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix() throws RecognitionException {
		HiveParser.alterDatabaseStatementSuffix_return retval = new HiveParser.alterDatabaseStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alterDatabaseSuffixProperties235 =null;
		ParserRuleReturnScope alterDatabaseSuffixSetOwner236 =null;


		 pushMsg("alter database statement", state); 
		try {
			// grammar/HiveParser.g:1106:5: ( alterDatabaseSuffixProperties | alterDatabaseSuffixSetOwner )
			int alt64=2;
			switch ( input.LA(1) ) {
			case Identifier:
				{
				int LA64_1 = input.LA(2);
				if ( (LA64_1==KW_SET) ) {
					int LA64_4 = input.LA(3);
					if ( (LA64_4==KW_DBPROPERTIES) ) {
						alt64=1;
					}
					else if ( (LA64_4==KW_OWNER) ) {
						alt64=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 64, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 64, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_ABORT:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AUTOCOMMIT:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CASCADE:
			case KW_CHANGE:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DBPROPERTIES:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ESCAPED:
			case KW_EXCLUSIVE:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MAPJOIN:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUS:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NULLS:
			case KW_OFFSET:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PLUS:
			case KW_PRETTY:
			case KW_PRINCIPALS:
			case KW_PURGE:
			case KW_READ:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_RENAME:
			case KW_REPAIR:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SETS:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONS:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNLOCK:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_URI:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VIEW:
			case KW_WHILE:
			case KW_WORK:
			case KW_WRITE:
			case KW_YEAR:
			case KW_HOLD_DDLTIME:
			case KW_IGNORE:
			case KW_NO_DROP:
			case KW_OFFLINE:
			case KW_PROTECTION:
			case KW_READONLY:
				{
				int LA64_2 = input.LA(2);
				if ( (LA64_2==KW_SET) ) {
					int LA64_5 = input.LA(3);
					if ( (LA64_5==KW_DBPROPERTIES) ) {
						alt64=1;
					}
					else if ( (LA64_5==KW_OWNER) ) {
						alt64=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 64, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 64, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_ALL:
			case KW_ALTER:
			case KW_ARRAY:
			case KW_AS:
			case KW_AUTHORIZATION:
			case KW_BETWEEN:
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_BOTH:
			case KW_BY:
			case KW_CONSTRAINT:
			case KW_CREATE:
			case KW_CUBE:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_CURSOR:
			case KW_DATE:
			case KW_DECIMAL:
			case KW_DELETE:
			case KW_DESCRIBE:
			case KW_DOUBLE:
			case KW_DROP:
			case KW_EXISTS:
			case KW_EXTERNAL:
			case KW_FALSE:
			case KW_FETCH:
			case KW_FLOAT:
			case KW_FOR:
			case KW_FOREIGN:
			case KW_FULL:
			case KW_GRANT:
			case KW_GROUP:
			case KW_GROUPING:
			case KW_IMPORT:
			case KW_IN:
			case KW_INNER:
			case KW_INSERT:
			case KW_INT:
			case KW_INTERSECT:
			case KW_INTO:
			case KW_IS:
			case KW_LATERAL:
			case KW_LEFT:
			case KW_LIKE:
			case KW_LOCAL:
			case KW_NONE:
			case KW_NULL:
			case KW_OF:
			case KW_ORDER:
			case KW_OUT:
			case KW_OUTER:
			case KW_PARTITION:
			case KW_PERCENT:
			case KW_PRIMARY:
			case KW_PROCEDURE:
			case KW_RANGE:
			case KW_READS:
			case KW_REFERENCES:
			case KW_REGEXP:
			case KW_REVOKE:
			case KW_RIGHT:
			case KW_RLIKE:
			case KW_ROLLUP:
			case KW_ROW:
			case KW_ROWS:
			case KW_SET:
			case KW_SMALLINT:
			case KW_TABLE:
			case KW_TIMESTAMP:
			case KW_TO:
			case KW_TRIGGER:
			case KW_TRUE:
			case KW_TRUNCATE:
			case KW_UNION:
			case KW_UPDATE:
			case KW_USER:
			case KW_USING:
			case KW_VALUES:
			case KW_WITH:
				{
				int LA64_3 = input.LA(2);
				if ( (LA64_3==KW_SET) ) {
					int LA64_6 = input.LA(3);
					if ( (LA64_6==KW_DBPROPERTIES) ) {
						alt64=1;
					}
					else if ( (LA64_6==KW_OWNER) ) {
						alt64=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 64, 6, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 64, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 64, 0, input);
				throw nvae;
			}
			switch (alt64) {
				case 1 :
					// grammar/HiveParser.g:1106:7: alterDatabaseSuffixProperties
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix4335);
					alterDatabaseSuffixProperties235=alterDatabaseSuffixProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterDatabaseSuffixProperties235.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1107:7: alterDatabaseSuffixSetOwner
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterDatabaseSuffixSetOwner_in_alterDatabaseStatementSuffix4343);
					alterDatabaseSuffixSetOwner236=alterDatabaseSuffixSetOwner();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterDatabaseSuffixSetOwner236.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseStatementSuffix"


	public static class alterDatabaseSuffixProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseSuffixProperties"
	// grammar/HiveParser.g:1110:1: alterDatabaseSuffixProperties : name= identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) ;
	public final HiveParser.alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties() throws RecognitionException {
		HiveParser.alterDatabaseSuffixProperties_return retval = new HiveParser.alterDatabaseSuffixProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET237=null;
		Token KW_DBPROPERTIES238=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope dbProperties239 =null;

		CommonTree KW_SET237_tree=null;
		CommonTree KW_DBPROPERTIES238_tree=null;
		RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");

		 pushMsg("alter database properties statement", state); 
		try {
			// grammar/HiveParser.g:1113:5: (name= identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) )
			// grammar/HiveParser.g:1113:7: name= identifier KW_SET KW_DBPROPERTIES dbProperties
			{
			pushFollow(FOLLOW_identifier_in_alterDatabaseSuffixProperties4372);
			name=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(name.getTree());
			KW_SET237=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixProperties4374); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET237);

			KW_DBPROPERTIES238=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties4376); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES238);

			pushFollow(FOLLOW_dbProperties_in_alterDatabaseSuffixProperties4378);
			dbProperties239=dbProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dbProperties.add(dbProperties239.getTree());
			// AST REWRITE
			// elements: dbProperties, name
			// token labels: 
			// rule labels: name, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1114:5: -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
			{
				// grammar/HiveParser.g:1114:8: ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERDATABASE_PROPERTIES, "TOK_ALTERDATABASE_PROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				adaptor.addChild(root_1, stream_dbProperties.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseSuffixProperties"


	public static class alterDatabaseSuffixSetOwner_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseSuffixSetOwner"
	// grammar/HiveParser.g:1117:1: alterDatabaseSuffixSetOwner : dbName= identifier KW_SET KW_OWNER principalName -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName ) ;
	public final HiveParser.alterDatabaseSuffixSetOwner_return alterDatabaseSuffixSetOwner() throws RecognitionException {
		HiveParser.alterDatabaseSuffixSetOwner_return retval = new HiveParser.alterDatabaseSuffixSetOwner_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET240=null;
		Token KW_OWNER241=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope principalName242 =null;

		CommonTree KW_SET240_tree=null;
		CommonTree KW_OWNER241_tree=null;
		RewriteRuleTokenStream stream_KW_OWNER=new RewriteRuleTokenStream(adaptor,"token KW_OWNER");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		 pushMsg("alter database set owner", state); 
		try {
			// grammar/HiveParser.g:1120:5: (dbName= identifier KW_SET KW_OWNER principalName -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName ) )
			// grammar/HiveParser.g:1120:7: dbName= identifier KW_SET KW_OWNER principalName
			{
			pushFollow(FOLLOW_identifier_in_alterDatabaseSuffixSetOwner4422);
			dbName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
			KW_SET240=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixSetOwner4424); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET240);

			KW_OWNER241=(Token)match(input,KW_OWNER,FOLLOW_KW_OWNER_in_alterDatabaseSuffixSetOwner4426); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OWNER.add(KW_OWNER241);

			pushFollow(FOLLOW_principalName_in_alterDatabaseSuffixSetOwner4428);
			principalName242=principalName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalName.add(principalName242.getTree());
			// AST REWRITE
			// elements: dbName, principalName
			// token labels: 
			// rule labels: dbName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1121:5: -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName )
			{
				// grammar/HiveParser.g:1121:8: ^( TOK_ALTERDATABASE_OWNER $dbName principalName )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERDATABASE_OWNER, "TOK_ALTERDATABASE_OWNER"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextTree());
				adaptor.addChild(root_1, stream_principalName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseSuffixSetOwner"


	public static class alterStatementSuffixRename_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRename"
	// grammar/HiveParser.g:1124:1: alterStatementSuffixRename[boolean table] : KW_RENAME KW_TO tableName -> { table }? ^( TOK_ALTERTABLE_RENAME tableName ) -> ^( TOK_ALTERVIEW_RENAME tableName ) ;
	public final HiveParser.alterStatementSuffixRename_return alterStatementSuffixRename(boolean table) throws RecognitionException {
		HiveParser.alterStatementSuffixRename_return retval = new HiveParser.alterStatementSuffixRename_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RENAME243=null;
		Token KW_TO244=null;
		ParserRuleReturnScope tableName245 =null;

		CommonTree KW_RENAME243_tree=null;
		CommonTree KW_TO244_tree=null;
		RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("rename statement", state); 
		try {
			// grammar/HiveParser.g:1127:5: ( KW_RENAME KW_TO tableName -> { table }? ^( TOK_ALTERTABLE_RENAME tableName ) -> ^( TOK_ALTERVIEW_RENAME tableName ) )
			// grammar/HiveParser.g:1127:7: KW_RENAME KW_TO tableName
			{
			KW_RENAME243=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRename4471); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_RENAME.add(KW_RENAME243);

			KW_TO244=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRename4473); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO244);

			pushFollow(FOLLOW_tableName_in_alterStatementSuffixRename4475);
			tableName245=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName245.getTree());
			// AST REWRITE
			// elements: tableName, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1128:5: -> { table }? ^( TOK_ALTERTABLE_RENAME tableName )
			if ( table ) {
				// grammar/HiveParser.g:1128:19: ^( TOK_ALTERTABLE_RENAME tableName )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_RENAME, "TOK_ALTERTABLE_RENAME"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1129:5: -> ^( TOK_ALTERVIEW_RENAME tableName )
			{
				// grammar/HiveParser.g:1129:19: ^( TOK_ALTERVIEW_RENAME tableName )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_RENAME, "TOK_ALTERVIEW_RENAME"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRename"


	public static class alterStatementSuffixAddCol_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddCol"
	// grammar/HiveParser.g:1132:1: alterStatementSuffixAddCol : (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN ( restrictOrCascade )? -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? ) -> ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? ) ;
	public final HiveParser.alterStatementSuffixAddCol_return alterStatementSuffixAddCol() throws RecognitionException {
		HiveParser.alterStatementSuffixAddCol_return retval = new HiveParser.alterStatementSuffixAddCol_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token add=null;
		Token replace=null;
		Token KW_COLUMNS246=null;
		Token LPAREN247=null;
		Token RPAREN249=null;
		ParserRuleReturnScope columnNameTypeList248 =null;
		ParserRuleReturnScope restrictOrCascade250 =null;

		CommonTree add_tree=null;
		CommonTree replace_tree=null;
		CommonTree KW_COLUMNS246_tree=null;
		CommonTree LPAREN247_tree=null;
		CommonTree RPAREN249_tree=null;
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
		RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");

		 pushMsg("add column statement", state); 
		try {
			// grammar/HiveParser.g:1135:5: ( (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN ( restrictOrCascade )? -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? ) -> ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? ) )
			// grammar/HiveParser.g:1135:7: (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN ( restrictOrCascade )?
			{
			// grammar/HiveParser.g:1135:7: (add= KW_ADD |replace= KW_REPLACE )
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==KW_ADD) ) {
				alt65=1;
			}
			else if ( (LA65_0==KW_REPLACE) ) {
				alt65=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 65, 0, input);
				throw nvae;
			}

			switch (alt65) {
				case 1 :
					// grammar/HiveParser.g:1135:8: add= KW_ADD
					{
					add=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddCol4542); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ADD.add(add);

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1135:21: replace= KW_REPLACE
					{
					replace=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol4548); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_REPLACE.add(replace);

					}
					break;

			}

			KW_COLUMNS246=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol4551); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS246);

			LPAREN247=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementSuffixAddCol4553); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN247);

			pushFollow(FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol4555);
			columnNameTypeList248=columnNameTypeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameTypeList.add(columnNameTypeList248.getTree());
			RPAREN249=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementSuffixAddCol4557); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN249);

			// grammar/HiveParser.g:1135:85: ( restrictOrCascade )?
			int alt66=2;
			int LA66_0 = input.LA(1);
			if ( (LA66_0==KW_CASCADE||LA66_0==KW_RESTRICT) ) {
				alt66=1;
			}
			switch (alt66) {
				case 1 :
					// grammar/HiveParser.g:1135:85: restrictOrCascade
					{
					pushFollow(FOLLOW_restrictOrCascade_in_alterStatementSuffixAddCol4559);
					restrictOrCascade250=restrictOrCascade();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade250.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: restrictOrCascade, columnNameTypeList, restrictOrCascade, columnNameTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1136:5: -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? )
			if (add != null) {
				// grammar/HiveParser.g:1136:24: ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_ADDCOLS, "TOK_ALTERTABLE_ADDCOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				// grammar/HiveParser.g:1136:68: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1137:5: -> ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? )
			{
				// grammar/HiveParser.g:1137:24: ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_REPLACECOLS, "TOK_ALTERTABLE_REPLACECOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				// grammar/HiveParser.g:1137:72: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddCol"


	public static class alterStatementSuffixAddConstraint_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddConstraint"
	// grammar/HiveParser.g:1140:1: alterStatementSuffixAddConstraint : KW_ADD (fk= foreignKeyWithName | primaryKeyWithName ) -> {fk != null}? ^( TOK_ALTERTABLE_ADDCONSTRAINT foreignKeyWithName ) -> ^( TOK_ALTERTABLE_ADDCONSTRAINT primaryKeyWithName ) ;
	public final HiveParser.alterStatementSuffixAddConstraint_return alterStatementSuffixAddConstraint() throws RecognitionException {
		HiveParser.alterStatementSuffixAddConstraint_return retval = new HiveParser.alterStatementSuffixAddConstraint_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ADD251=null;
		ParserRuleReturnScope fk =null;
		ParserRuleReturnScope primaryKeyWithName252 =null;

		CommonTree KW_ADD251_tree=null;
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleSubtreeStream stream_foreignKeyWithName=new RewriteRuleSubtreeStream(adaptor,"rule foreignKeyWithName");
		RewriteRuleSubtreeStream stream_primaryKeyWithName=new RewriteRuleSubtreeStream(adaptor,"rule primaryKeyWithName");

		 pushMsg("add constraint statement", state); 
		try {
			// grammar/HiveParser.g:1143:4: ( KW_ADD (fk= foreignKeyWithName | primaryKeyWithName ) -> {fk != null}? ^( TOK_ALTERTABLE_ADDCONSTRAINT foreignKeyWithName ) -> ^( TOK_ALTERTABLE_ADDCONSTRAINT primaryKeyWithName ) )
			// grammar/HiveParser.g:1143:7: KW_ADD (fk= foreignKeyWithName | primaryKeyWithName )
			{
			KW_ADD251=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddConstraint4635); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ADD.add(KW_ADD251);

			// grammar/HiveParser.g:1143:14: (fk= foreignKeyWithName | primaryKeyWithName )
			int alt67=2;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==KW_CONSTRAINT) ) {
				switch ( input.LA(2) ) {
				case Identifier:
					{
					int LA67_2 = input.LA(3);
					if ( (LA67_2==KW_FOREIGN) ) {
						alt67=1;
					}
					else if ( (LA67_2==KW_PRIMARY) ) {
						alt67=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 67, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case KW_ABORT:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ASC:
				case KW_AUTOCOMMIT:
				case KW_BEFORE:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_CASCADE:
				case KW_CHANGE:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONTINUE:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATETIME:
				case KW_DAY:
				case KW_DBPROPERTIES:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTRIBUTE:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ESCAPED:
				case KW_EXCLUSIVE:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FUNCTIONS:
				case KW_HOUR:
				case KW_IDXPROPERTIES:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_ISOLATION:
				case KW_ITEMS:
				case KW_JAR:
				case KW_KEY:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LAST:
				case KW_LEVEL:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MAPJOIN:
				case KW_MATERIALIZED:
				case KW_METADATA:
				case KW_MINUS:
				case KW_MINUTE:
				case KW_MONTH:
				case KW_MSCK:
				case KW_NORELY:
				case KW_NOSCAN:
				case KW_NOVALIDATE:
				case KW_NULLS:
				case KW_OFFSET:
				case KW_OPTION:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PLUS:
				case KW_PRETTY:
				case KW_PRINCIPALS:
				case KW_PURGE:
				case KW_READ:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_RELOAD:
				case KW_RELY:
				case KW_RENAME:
				case KW_REPAIR:
				case KW_REPLACE:
				case KW_REPLICATION:
				case KW_RESTRICT:
				case KW_REWRITE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SECOND:
				case KW_SEMI:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SERVER:
				case KW_SETS:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SNAPSHOT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TINYINT:
				case KW_TOUCH:
				case KW_TRANSACTION:
				case KW_TRANSACTIONS:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNIONTYPE:
				case KW_UNLOCK:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_URI:
				case KW_USE:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALIDATE:
				case KW_VALUE_TYPE:
				case KW_VIEW:
				case KW_WHILE:
				case KW_WORK:
				case KW_WRITE:
				case KW_YEAR:
				case KW_HOLD_DDLTIME:
				case KW_IGNORE:
				case KW_NO_DROP:
				case KW_OFFLINE:
				case KW_PROTECTION:
				case KW_READONLY:
					{
					int LA67_3 = input.LA(3);
					if ( (LA67_3==KW_FOREIGN) ) {
						alt67=1;
					}
					else if ( (LA67_3==KW_PRIMARY) ) {
						alt67=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 67, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case KW_ALL:
				case KW_ALTER:
				case KW_ARRAY:
				case KW_AS:
				case KW_AUTHORIZATION:
				case KW_BETWEEN:
				case KW_BIGINT:
				case KW_BINARY:
				case KW_BOOLEAN:
				case KW_BOTH:
				case KW_BY:
				case KW_CONSTRAINT:
				case KW_CREATE:
				case KW_CUBE:
				case KW_CURRENT_DATE:
				case KW_CURRENT_TIMESTAMP:
				case KW_CURSOR:
				case KW_DATE:
				case KW_DECIMAL:
				case KW_DELETE:
				case KW_DESCRIBE:
				case KW_DOUBLE:
				case KW_DROP:
				case KW_EXISTS:
				case KW_EXTERNAL:
				case KW_FALSE:
				case KW_FETCH:
				case KW_FLOAT:
				case KW_FOR:
				case KW_FOREIGN:
				case KW_FULL:
				case KW_GRANT:
				case KW_GROUP:
				case KW_GROUPING:
				case KW_IMPORT:
				case KW_IN:
				case KW_INNER:
				case KW_INSERT:
				case KW_INT:
				case KW_INTERSECT:
				case KW_INTO:
				case KW_IS:
				case KW_LATERAL:
				case KW_LEFT:
				case KW_LIKE:
				case KW_LOCAL:
				case KW_NONE:
				case KW_NULL:
				case KW_OF:
				case KW_ORDER:
				case KW_OUT:
				case KW_OUTER:
				case KW_PARTITION:
				case KW_PERCENT:
				case KW_PRIMARY:
				case KW_PROCEDURE:
				case KW_RANGE:
				case KW_READS:
				case KW_REFERENCES:
				case KW_REGEXP:
				case KW_REVOKE:
				case KW_RIGHT:
				case KW_RLIKE:
				case KW_ROLLUP:
				case KW_ROW:
				case KW_ROWS:
				case KW_SET:
				case KW_SMALLINT:
				case KW_TABLE:
				case KW_TIMESTAMP:
				case KW_TO:
				case KW_TRIGGER:
				case KW_TRUE:
				case KW_TRUNCATE:
				case KW_UNION:
				case KW_UPDATE:
				case KW_USER:
				case KW_USING:
				case KW_VALUES:
				case KW_WITH:
					{
					int LA67_4 = input.LA(3);
					if ( (LA67_4==KW_FOREIGN) ) {
						alt67=1;
					}
					else if ( (LA67_4==KW_PRIMARY) ) {
						alt67=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 67, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 67, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 67, 0, input);
				throw nvae;
			}

			switch (alt67) {
				case 1 :
					// grammar/HiveParser.g:1143:15: fk= foreignKeyWithName
					{
					pushFollow(FOLLOW_foreignKeyWithName_in_alterStatementSuffixAddConstraint4640);
					fk=foreignKeyWithName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_foreignKeyWithName.add(fk.getTree());
					}
					break;
				case 2 :
					// grammar/HiveParser.g:1143:39: primaryKeyWithName
					{
					pushFollow(FOLLOW_primaryKeyWithName_in_alterStatementSuffixAddConstraint4644);
					primaryKeyWithName252=primaryKeyWithName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_primaryKeyWithName.add(primaryKeyWithName252.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: foreignKeyWithName, primaryKeyWithName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1144:4: -> {fk != null}? ^( TOK_ALTERTABLE_ADDCONSTRAINT foreignKeyWithName )
			if (fk != null) {
				// grammar/HiveParser.g:1144:21: ^( TOK_ALTERTABLE_ADDCONSTRAINT foreignKeyWithName )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_ADDCONSTRAINT, "TOK_ALTERTABLE_ADDCONSTRAINT"), root_1);
				adaptor.addChild(root_1, stream_foreignKeyWithName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1145:4: -> ^( TOK_ALTERTABLE_ADDCONSTRAINT primaryKeyWithName )
			{
				// grammar/HiveParser.g:1145:21: ^( TOK_ALTERTABLE_ADDCONSTRAINT primaryKeyWithName )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_ADDCONSTRAINT, "TOK_ALTERTABLE_ADDCONSTRAINT"), root_1);
				adaptor.addChild(root_1, stream_primaryKeyWithName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddConstraint"


	public static class alterStatementSuffixDropConstraint_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixDropConstraint"
	// grammar/HiveParser.g:1148:1: alterStatementSuffixDropConstraint : KW_DROP KW_CONSTRAINT cName= identifier -> ^( TOK_ALTERTABLE_DROPCONSTRAINT $cName) ;
	public final HiveParser.alterStatementSuffixDropConstraint_return alterStatementSuffixDropConstraint() throws RecognitionException {
		HiveParser.alterStatementSuffixDropConstraint_return retval = new HiveParser.alterStatementSuffixDropConstraint_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP253=null;
		Token KW_CONSTRAINT254=null;
		ParserRuleReturnScope cName =null;

		CommonTree KW_DROP253_tree=null;
		CommonTree KW_CONSTRAINT254_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("drop constraint statement", state); 
		try {
			// grammar/HiveParser.g:1151:4: ( KW_DROP KW_CONSTRAINT cName= identifier -> ^( TOK_ALTERTABLE_DROPCONSTRAINT $cName) )
			// grammar/HiveParser.g:1151:6: KW_DROP KW_CONSTRAINT cName= identifier
			{
			KW_DROP253=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_alterStatementSuffixDropConstraint4708); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP253);

			KW_CONSTRAINT254=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterStatementSuffixDropConstraint4710); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT254);

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixDropConstraint4714);
			cName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(cName.getTree());
			// AST REWRITE
			// elements: cName
			// token labels: 
			// rule labels: cName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_cName=new RewriteRuleSubtreeStream(adaptor,"rule cName",cName!=null?cName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1152:4: -> ^( TOK_ALTERTABLE_DROPCONSTRAINT $cName)
			{
				// grammar/HiveParser.g:1152:6: ^( TOK_ALTERTABLE_DROPCONSTRAINT $cName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_DROPCONSTRAINT, "TOK_ALTERTABLE_DROPCONSTRAINT"), root_1);
				adaptor.addChild(root_1, stream_cName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixDropConstraint"


	public static class alterStatementSuffixRenameCol_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRenameCol"
	// grammar/HiveParser.g:1155:1: alterStatementSuffixRenameCol : KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? -> ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ( restrictOrCascade )? ) ;
	public final HiveParser.alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol() throws RecognitionException {
		HiveParser.alterStatementSuffixRenameCol_return retval = new HiveParser.alterStatementSuffixRenameCol_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_CHANGE255=null;
		Token KW_COLUMN256=null;
		Token KW_COMMENT258=null;
		ParserRuleReturnScope oldName =null;
		ParserRuleReturnScope newName =null;
		ParserRuleReturnScope colType257 =null;
		ParserRuleReturnScope alterStatementChangeColPosition259 =null;
		ParserRuleReturnScope restrictOrCascade260 =null;

		CommonTree comment_tree=null;
		CommonTree KW_CHANGE255_tree=null;
		CommonTree KW_COLUMN256_tree=null;
		CommonTree KW_COMMENT258_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleTokenStream stream_KW_CHANGE=new RewriteRuleTokenStream(adaptor,"token KW_CHANGE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
		RewriteRuleSubtreeStream stream_alterStatementChangeColPosition=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementChangeColPosition");
		RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");

		 pushMsg("rename column name", state); 
		try {
			// grammar/HiveParser.g:1158:5: ( KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? -> ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ( restrictOrCascade )? ) )
			// grammar/HiveParser.g:1158:7: KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? ( restrictOrCascade )?
			{
			KW_CHANGE255=(Token)match(input,KW_CHANGE,FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol4751); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CHANGE.add(KW_CHANGE255);

			// grammar/HiveParser.g:1158:17: ( KW_COLUMN )?
			int alt68=2;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==KW_COLUMN) ) {
				alt68=1;
			}
			switch (alt68) {
				case 1 :
					// grammar/HiveParser.g:1158:17: KW_COLUMN
					{
					KW_COLUMN256=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol4753); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN256);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixRenameCol4758);
			oldName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(oldName.getTree());
			pushFollow(FOLLOW_identifier_in_alterStatementSuffixRenameCol4762);
			newName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(newName.getTree());
			pushFollow(FOLLOW_colType_in_alterStatementSuffixRenameCol4764);
			colType257=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType257.getTree());
			// grammar/HiveParser.g:1158:74: ( KW_COMMENT comment= StringLiteral )?
			int alt69=2;
			int LA69_0 = input.LA(1);
			if ( (LA69_0==KW_COMMENT) ) {
				alt69=1;
			}
			switch (alt69) {
				case 1 :
					// grammar/HiveParser.g:1158:75: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT258=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol4767); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT258);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol4771); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// grammar/HiveParser.g:1158:110: ( alterStatementChangeColPosition )?
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==KW_AFTER||LA70_0==KW_FIRST) ) {
				alt70=1;
			}
			switch (alt70) {
				case 1 :
					// grammar/HiveParser.g:1158:110: alterStatementChangeColPosition
					{
					pushFollow(FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol4775);
					alterStatementChangeColPosition259=alterStatementChangeColPosition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterStatementChangeColPosition.add(alterStatementChangeColPosition259.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:1158:143: ( restrictOrCascade )?
			int alt71=2;
			int LA71_0 = input.LA(1);
			if ( (LA71_0==KW_CASCADE||LA71_0==KW_RESTRICT) ) {
				alt71=1;
			}
			switch (alt71) {
				case 1 :
					// grammar/HiveParser.g:1158:143: restrictOrCascade
					{
					pushFollow(FOLLOW_restrictOrCascade_in_alterStatementSuffixRenameCol4778);
					restrictOrCascade260=restrictOrCascade();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade260.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: alterStatementChangeColPosition, oldName, colType, newName, restrictOrCascade, comment
			// token labels: comment
			// rule labels: newName, oldName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_newName=new RewriteRuleSubtreeStream(adaptor,"rule newName",newName!=null?newName.getTree():null);
			RewriteRuleSubtreeStream stream_oldName=new RewriteRuleSubtreeStream(adaptor,"rule oldName",oldName!=null?oldName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1159:5: -> ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ( restrictOrCascade )? )
			{
				// grammar/HiveParser.g:1159:7: ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ( restrictOrCascade )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_RENAMECOL, "TOK_ALTERTABLE_RENAMECOL"), root_1);
				adaptor.addChild(root_1, stream_oldName.nextTree());
				adaptor.addChild(root_1, stream_newName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				// grammar/HiveParser.g:1159:61: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				// grammar/HiveParser.g:1159:70: ( alterStatementChangeColPosition )?
				if ( stream_alterStatementChangeColPosition.hasNext() ) {
					adaptor.addChild(root_1, stream_alterStatementChangeColPosition.nextTree());
				}
				stream_alterStatementChangeColPosition.reset();

				// grammar/HiveParser.g:1159:103: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRenameCol"


	public static class alterStatementSuffixUpdateStatsCol_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixUpdateStatsCol"
	// grammar/HiveParser.g:1162:1: alterStatementSuffixUpdateStatsCol : KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) ;
	public final HiveParser.alterStatementSuffixUpdateStatsCol_return alterStatementSuffixUpdateStatsCol() throws RecognitionException {
		HiveParser.alterStatementSuffixUpdateStatsCol_return retval = new HiveParser.alterStatementSuffixUpdateStatsCol_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_UPDATE261=null;
		Token KW_STATISTICS262=null;
		Token KW_FOR263=null;
		Token KW_COLUMN264=null;
		Token KW_SET265=null;
		Token KW_COMMENT267=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope tableProperties266 =null;

		CommonTree comment_tree=null;
		CommonTree KW_UPDATE261_tree=null;
		CommonTree KW_STATISTICS262_tree=null;
		CommonTree KW_FOR263_tree=null;
		CommonTree KW_COLUMN264_tree=null;
		CommonTree KW_SET265_tree=null;
		CommonTree KW_COMMENT267_tree=null;
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("update column statistics", state); 
		try {
			// grammar/HiveParser.g:1165:5: ( KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) )
			// grammar/HiveParser.g:1165:7: KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )?
			{
			KW_UPDATE261=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStatsCol4833); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE261);

			KW_STATISTICS262=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStatsCol4835); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS262);

			KW_FOR263=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_alterStatementSuffixUpdateStatsCol4837); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR263);

			// grammar/HiveParser.g:1165:38: ( KW_COLUMN )?
			int alt72=2;
			int LA72_0 = input.LA(1);
			if ( (LA72_0==KW_COLUMN) ) {
				alt72=1;
			}
			switch (alt72) {
				case 1 :
					// grammar/HiveParser.g:1165:38: KW_COLUMN
					{
					KW_COLUMN264=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixUpdateStatsCol4839); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN264);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixUpdateStatsCol4844);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			KW_SET265=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixUpdateStatsCol4846); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET265);

			pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixUpdateStatsCol4848);
			tableProperties266=tableProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties266.getTree());
			// grammar/HiveParser.g:1165:91: ( KW_COMMENT comment= StringLiteral )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==KW_COMMENT) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// grammar/HiveParser.g:1165:92: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT267=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixUpdateStatsCol4851); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT267);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixUpdateStatsCol4855); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: comment, colName, tableProperties
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1166:5: -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
			{
				// grammar/HiveParser.g:1166:7: ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_UPDATECOLSTATS, "TOK_ALTERTABLE_UPDATECOLSTATS"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_tableProperties.nextTree());
				// grammar/HiveParser.g:1166:65: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixUpdateStatsCol"


	public static class alterStatementSuffixUpdateStats_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixUpdateStats"
	// grammar/HiveParser.g:1169:1: alterStatementSuffixUpdateStats : KW_UPDATE KW_STATISTICS KW_SET tableProperties -> ^( TOK_ALTERTABLE_UPDATESTATS tableProperties ) ;
	public final HiveParser.alterStatementSuffixUpdateStats_return alterStatementSuffixUpdateStats() throws RecognitionException {
		HiveParser.alterStatementSuffixUpdateStats_return retval = new HiveParser.alterStatementSuffixUpdateStats_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UPDATE268=null;
		Token KW_STATISTICS269=null;
		Token KW_SET270=null;
		ParserRuleReturnScope tableProperties271 =null;

		CommonTree KW_UPDATE268_tree=null;
		CommonTree KW_STATISTICS269_tree=null;
		CommonTree KW_SET270_tree=null;
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("update basic statistics", state); 
		try {
			// grammar/HiveParser.g:1172:5: ( KW_UPDATE KW_STATISTICS KW_SET tableProperties -> ^( TOK_ALTERTABLE_UPDATESTATS tableProperties ) )
			// grammar/HiveParser.g:1172:7: KW_UPDATE KW_STATISTICS KW_SET tableProperties
			{
			KW_UPDATE268=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStats4902); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE268);

			KW_STATISTICS269=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStats4904); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS269);

			KW_SET270=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixUpdateStats4906); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET270);

			pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixUpdateStats4908);
			tableProperties271=tableProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties271.getTree());
			// AST REWRITE
			// elements: tableProperties
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1173:5: -> ^( TOK_ALTERTABLE_UPDATESTATS tableProperties )
			{
				// grammar/HiveParser.g:1173:7: ^( TOK_ALTERTABLE_UPDATESTATS tableProperties )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_UPDATESTATS, "TOK_ALTERTABLE_UPDATESTATS"), root_1);
				adaptor.addChild(root_1, stream_tableProperties.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixUpdateStats"


	public static class alterStatementChangeColPosition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementChangeColPosition"
	// grammar/HiveParser.g:1176:1: alterStatementChangeColPosition : (first= KW_FIRST | KW_AFTER afterCol= identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) );
	public final HiveParser.alterStatementChangeColPosition_return alterStatementChangeColPosition() throws RecognitionException {
		HiveParser.alterStatementChangeColPosition_return retval = new HiveParser.alterStatementChangeColPosition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token first=null;
		Token KW_AFTER272=null;
		ParserRuleReturnScope afterCol =null;

		CommonTree first_tree=null;
		CommonTree KW_AFTER272_tree=null;
		RewriteRuleTokenStream stream_KW_AFTER=new RewriteRuleTokenStream(adaptor,"token KW_AFTER");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		try {
			// grammar/HiveParser.g:1177:5: (first= KW_FIRST | KW_AFTER afterCol= identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) )
			int alt74=2;
			int LA74_0 = input.LA(1);
			if ( (LA74_0==KW_FIRST) ) {
				alt74=1;
			}
			else if ( (LA74_0==KW_AFTER) ) {
				alt74=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 74, 0, input);
				throw nvae;
			}

			switch (alt74) {
				case 1 :
					// grammar/HiveParser.g:1177:7: first= KW_FIRST
					{
					root_0 = (CommonTree)adaptor.nil();


					first=(Token)match(input,KW_FIRST,FOLLOW_KW_FIRST_in_alterStatementChangeColPosition4938); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					first_tree = (CommonTree)adaptor.create(first);
					adaptor.addChild(root_0, first_tree);
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1177:22: KW_AFTER afterCol= identifier
					{
					KW_AFTER272=(Token)match(input,KW_AFTER,FOLLOW_KW_AFTER_in_alterStatementChangeColPosition4940); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_AFTER.add(KW_AFTER272);

					pushFollow(FOLLOW_identifier_in_alterStatementChangeColPosition4944);
					afterCol=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(afterCol.getTree());
					// AST REWRITE
					// elements: afterCol
					// token labels: 
					// rule labels: afterCol, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_afterCol=new RewriteRuleSubtreeStream(adaptor,"rule afterCol",afterCol!=null?afterCol.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1178:5: -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
					if (first != null) {
						// grammar/HiveParser.g:1178:25: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}

					else // 1179:5: -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
					{
						// grammar/HiveParser.g:1179:8: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);
						adaptor.addChild(root_1, stream_afterCol.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementChangeColPosition"


	public static class alterStatementSuffixAddPartitions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddPartitions"
	// grammar/HiveParser.g:1182:1: alterStatementSuffixAddPartitions[boolean table] : KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ -> { table }? ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) -> ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) ;
	public final HiveParser.alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions(boolean table) throws RecognitionException {
		HiveParser.alterStatementSuffixAddPartitions_return retval = new HiveParser.alterStatementSuffixAddPartitions_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ADD273=null;
		ParserRuleReturnScope ifNotExists274 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitionsElement275 =null;

		CommonTree KW_ADD273_tree=null;
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_alterStatementSuffixAddPartitionsElement=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixAddPartitionsElement");

		 pushMsg("add partition statement", state); 
		try {
			// grammar/HiveParser.g:1185:5: ( KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ -> { table }? ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) -> ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) )
			// grammar/HiveParser.g:1185:7: KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+
			{
			KW_ADD273=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions4997); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ADD.add(KW_ADD273);

			// grammar/HiveParser.g:1185:14: ( ifNotExists )?
			int alt75=2;
			int LA75_0 = input.LA(1);
			if ( (LA75_0==KW_IF) ) {
				alt75=1;
			}
			switch (alt75) {
				case 1 :
					// grammar/HiveParser.g:1185:14: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions4999);
					ifNotExists274=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists274.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:1185:27: ( alterStatementSuffixAddPartitionsElement )+
			int cnt76=0;
			loop76:
			while (true) {
				int alt76=2;
				int LA76_0 = input.LA(1);
				if ( (LA76_0==KW_PARTITION) ) {
					alt76=1;
				}

				switch (alt76) {
				case 1 :
					// grammar/HiveParser.g:1185:27: alterStatementSuffixAddPartitionsElement
					{
					pushFollow(FOLLOW_alterStatementSuffixAddPartitionsElement_in_alterStatementSuffixAddPartitions5002);
					alterStatementSuffixAddPartitionsElement275=alterStatementSuffixAddPartitionsElement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterStatementSuffixAddPartitionsElement.add(alterStatementSuffixAddPartitionsElement275.getTree());
					}
					break;

				default :
					if ( cnt76 >= 1 ) break loop76;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(76, input);
					throw eee;
				}
				cnt76++;
			}

			// AST REWRITE
			// elements: alterStatementSuffixAddPartitionsElement, ifNotExists, ifNotExists, alterStatementSuffixAddPartitionsElement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1186:5: -> { table }? ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
			if ( table ) {
				// grammar/HiveParser.g:1186:19: ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_ADDPARTS, "TOK_ALTERTABLE_ADDPARTS"), root_1);
				// grammar/HiveParser.g:1186:45: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				if ( !(stream_alterStatementSuffixAddPartitionsElement.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_alterStatementSuffixAddPartitionsElement.hasNext() ) {
					adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitionsElement.nextTree());
				}
				stream_alterStatementSuffixAddPartitionsElement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1187:5: -> ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
			{
				// grammar/HiveParser.g:1187:19: ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_ADDPARTS, "TOK_ALTERVIEW_ADDPARTS"), root_1);
				// grammar/HiveParser.g:1187:44: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				if ( !(stream_alterStatementSuffixAddPartitionsElement.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_alterStatementSuffixAddPartitionsElement.hasNext() ) {
					adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitionsElement.nextTree());
				}
				stream_alterStatementSuffixAddPartitionsElement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddPartitions"


	public static class alterStatementSuffixAddPartitionsElement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddPartitionsElement"
	// grammar/HiveParser.g:1190:1: alterStatementSuffixAddPartitionsElement : partitionSpec ( partitionLocation )? ;
	public final HiveParser.alterStatementSuffixAddPartitionsElement_return alterStatementSuffixAddPartitionsElement() throws RecognitionException {
		HiveParser.alterStatementSuffixAddPartitionsElement_return retval = new HiveParser.alterStatementSuffixAddPartitionsElement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope partitionSpec276 =null;
		ParserRuleReturnScope partitionLocation277 =null;


		try {
			// grammar/HiveParser.g:1191:5: ( partitionSpec ( partitionLocation )? )
			// grammar/HiveParser.g:1191:7: partitionSpec ( partitionLocation )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitionsElement5065);
			partitionSpec276=partitionSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partitionSpec276.getTree());

			// grammar/HiveParser.g:1191:21: ( partitionLocation )?
			int alt77=2;
			int LA77_0 = input.LA(1);
			if ( (LA77_0==KW_LOCATION) ) {
				alt77=1;
			}
			switch (alt77) {
				case 1 :
					// grammar/HiveParser.g:1191:21: partitionLocation
					{
					pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitionsElement5067);
					partitionLocation277=partitionLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partitionLocation277.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddPartitionsElement"


	public static class alterStatementSuffixTouch_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixTouch"
	// grammar/HiveParser.g:1194:1: alterStatementSuffixTouch : KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* ) ;
	public final HiveParser.alterStatementSuffixTouch_return alterStatementSuffixTouch() throws RecognitionException {
		HiveParser.alterStatementSuffixTouch_return retval = new HiveParser.alterStatementSuffixTouch_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_TOUCH278=null;
		ParserRuleReturnScope partitionSpec279 =null;

		CommonTree KW_TOUCH278_tree=null;
		RewriteRuleTokenStream stream_KW_TOUCH=new RewriteRuleTokenStream(adaptor,"token KW_TOUCH");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("touch statement", state); 
		try {
			// grammar/HiveParser.g:1197:5: ( KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* ) )
			// grammar/HiveParser.g:1197:7: KW_TOUCH ( partitionSpec )*
			{
			KW_TOUCH278=(Token)match(input,KW_TOUCH,FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch5095); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TOUCH.add(KW_TOUCH278);

			// grammar/HiveParser.g:1197:16: ( partitionSpec )*
			loop78:
			while (true) {
				int alt78=2;
				int LA78_0 = input.LA(1);
				if ( (LA78_0==KW_PARTITION) ) {
					alt78=1;
				}

				switch (alt78) {
				case 1 :
					// grammar/HiveParser.g:1197:17: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixTouch5098);
					partitionSpec279=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec279.getTree());
					}
					break;

				default :
					break loop78;
				}
			}

			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1198:5: -> ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* )
			{
				// grammar/HiveParser.g:1198:8: ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_TOUCH, "TOK_ALTERTABLE_TOUCH"), root_1);
				// grammar/HiveParser.g:1198:31: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixTouch"


	public static class alterStatementSuffixArchive_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixArchive"
	// grammar/HiveParser.g:1201:1: alterStatementSuffixArchive : KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* ) ;
	public final HiveParser.alterStatementSuffixArchive_return alterStatementSuffixArchive() throws RecognitionException {
		HiveParser.alterStatementSuffixArchive_return retval = new HiveParser.alterStatementSuffixArchive_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ARCHIVE280=null;
		ParserRuleReturnScope partitionSpec281 =null;

		CommonTree KW_ARCHIVE280_tree=null;
		RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("archive statement", state); 
		try {
			// grammar/HiveParser.g:1204:5: ( KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* ) )
			// grammar/HiveParser.g:1204:7: KW_ARCHIVE ( partitionSpec )*
			{
			KW_ARCHIVE280=(Token)match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive5142); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ARCHIVE.add(KW_ARCHIVE280);

			// grammar/HiveParser.g:1204:18: ( partitionSpec )*
			loop79:
			while (true) {
				int alt79=2;
				int LA79_0 = input.LA(1);
				if ( (LA79_0==KW_PARTITION) ) {
					alt79=1;
				}

				switch (alt79) {
				case 1 :
					// grammar/HiveParser.g:1204:19: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixArchive5145);
					partitionSpec281=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec281.getTree());
					}
					break;

				default :
					break loop79;
				}
			}

			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1205:5: -> ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* )
			{
				// grammar/HiveParser.g:1205:8: ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_ARCHIVE, "TOK_ALTERTABLE_ARCHIVE"), root_1);
				// grammar/HiveParser.g:1205:33: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixArchive"


	public static class alterStatementSuffixUnArchive_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixUnArchive"
	// grammar/HiveParser.g:1208:1: alterStatementSuffixUnArchive : KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* ) ;
	public final HiveParser.alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive() throws RecognitionException {
		HiveParser.alterStatementSuffixUnArchive_return retval = new HiveParser.alterStatementSuffixUnArchive_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UNARCHIVE282=null;
		ParserRuleReturnScope partitionSpec283 =null;

		CommonTree KW_UNARCHIVE282_tree=null;
		RewriteRuleTokenStream stream_KW_UNARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_UNARCHIVE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("unarchive statement", state); 
		try {
			// grammar/HiveParser.g:1211:5: ( KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* ) )
			// grammar/HiveParser.g:1211:7: KW_UNARCHIVE ( partitionSpec )*
			{
			KW_UNARCHIVE282=(Token)match(input,KW_UNARCHIVE,FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive5189); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UNARCHIVE.add(KW_UNARCHIVE282);

			// grammar/HiveParser.g:1211:20: ( partitionSpec )*
			loop80:
			while (true) {
				int alt80=2;
				int LA80_0 = input.LA(1);
				if ( (LA80_0==KW_PARTITION) ) {
					alt80=1;
				}

				switch (alt80) {
				case 1 :
					// grammar/HiveParser.g:1211:21: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive5192);
					partitionSpec283=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec283.getTree());
					}
					break;

				default :
					break loop80;
				}
			}

			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1212:5: -> ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* )
			{
				// grammar/HiveParser.g:1212:8: ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_UNARCHIVE, "TOK_ALTERTABLE_UNARCHIVE"), root_1);
				// grammar/HiveParser.g:1212:35: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixUnArchive"


	public static class partitionLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partitionLocation"
	// grammar/HiveParser.g:1215:1: partitionLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) ;
	public final HiveParser.partitionLocation_return partitionLocation() throws RecognitionException {
		HiveParser.partitionLocation_return retval = new HiveParser.partitionLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token locn=null;
		Token KW_LOCATION284=null;

		CommonTree locn_tree=null;
		CommonTree KW_LOCATION284_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 pushMsg("partition location", state); 
		try {
			// grammar/HiveParser.g:1218:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) )
			// grammar/HiveParser.g:1219:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION284=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_partitionLocation5242); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION284);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_partitionLocation5246); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1219:38: -> ^( TOK_PARTITIONLOCATION $locn)
			{
				// grammar/HiveParser.g:1219:41: ^( TOK_PARTITIONLOCATION $locn)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PARTITIONLOCATION, "TOK_PARTITIONLOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partitionLocation"


	public static class alterStatementSuffixDropPartitions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixDropPartitions"
	// grammar/HiveParser.g:1222:1: alterStatementSuffixDropPartitions[boolean table] : KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( KW_PURGE )? ( replicationClause )? -> { table }? ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) -> ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( replicationClause )? ) ;
	public final HiveParser.alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions(boolean table) throws RecognitionException {
		HiveParser.alterStatementSuffixDropPartitions_return retval = new HiveParser.alterStatementSuffixDropPartitions_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP285=null;
		Token COMMA288=null;
		Token KW_PURGE290=null;
		ParserRuleReturnScope ifExists286 =null;
		ParserRuleReturnScope dropPartitionSpec287 =null;
		ParserRuleReturnScope dropPartitionSpec289 =null;
		ParserRuleReturnScope replicationClause291 =null;

		CommonTree KW_DROP285_tree=null;
		CommonTree COMMA288_tree=null;
		CommonTree KW_PURGE290_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_PURGE=new RewriteRuleTokenStream(adaptor,"token KW_PURGE");
		RewriteRuleSubtreeStream stream_dropPartitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionSpec");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");

		 pushMsg("drop partition statement", state); 
		try {
			// grammar/HiveParser.g:1225:5: ( KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( KW_PURGE )? ( replicationClause )? -> { table }? ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) -> ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( replicationClause )? ) )
			// grammar/HiveParser.g:1225:7: KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( KW_PURGE )? ( replicationClause )?
			{
			KW_DROP285=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions5283); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP285);

			// grammar/HiveParser.g:1225:15: ( ifExists )?
			int alt81=2;
			int LA81_0 = input.LA(1);
			if ( (LA81_0==KW_IF) ) {
				alt81=1;
			}
			switch (alt81) {
				case 1 :
					// grammar/HiveParser.g:1225:15: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_alterStatementSuffixDropPartitions5285);
					ifExists286=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists286.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions5288);
			dropPartitionSpec287=dropPartitionSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dropPartitionSpec.add(dropPartitionSpec287.getTree());
			// grammar/HiveParser.g:1225:43: ( COMMA dropPartitionSpec )*
			loop82:
			while (true) {
				int alt82=2;
				int LA82_0 = input.LA(1);
				if ( (LA82_0==COMMA) ) {
					alt82=1;
				}

				switch (alt82) {
				case 1 :
					// grammar/HiveParser.g:1225:44: COMMA dropPartitionSpec
					{
					COMMA288=(Token)match(input,COMMA,FOLLOW_COMMA_in_alterStatementSuffixDropPartitions5291); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA288);

					pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions5293);
					dropPartitionSpec289=dropPartitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dropPartitionSpec.add(dropPartitionSpec289.getTree());
					}
					break;

				default :
					break loop82;
				}
			}

			// grammar/HiveParser.g:1225:70: ( KW_PURGE )?
			int alt83=2;
			int LA83_0 = input.LA(1);
			if ( (LA83_0==KW_PURGE) ) {
				alt83=1;
			}
			switch (alt83) {
				case 1 :
					// grammar/HiveParser.g:1225:70: KW_PURGE
					{
					KW_PURGE290=(Token)match(input,KW_PURGE,FOLLOW_KW_PURGE_in_alterStatementSuffixDropPartitions5297); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_PURGE.add(KW_PURGE290);

					}
					break;

			}

			// grammar/HiveParser.g:1225:80: ( replicationClause )?
			int alt84=2;
			int LA84_0 = input.LA(1);
			if ( (LA84_0==KW_FOR) ) {
				alt84=1;
			}
			switch (alt84) {
				case 1 :
					// grammar/HiveParser.g:1225:80: replicationClause
					{
					pushFollow(FOLLOW_replicationClause_in_alterStatementSuffixDropPartitions5300);
					replicationClause291=replicationClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause291.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: ifExists, ifExists, dropPartitionSpec, replicationClause, dropPartitionSpec, KW_PURGE, replicationClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1226:5: -> { table }? ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
			if ( table ) {
				// grammar/HiveParser.g:1226:19: ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_DROPPARTS, "TOK_ALTERTABLE_DROPPARTS"), root_1);
				if ( !(stream_dropPartitionSpec.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_dropPartitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_dropPartitionSpec.nextTree());
				}
				stream_dropPartitionSpec.reset();

				// grammar/HiveParser.g:1226:65: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// grammar/HiveParser.g:1226:75: ( KW_PURGE )?
				if ( stream_KW_PURGE.hasNext() ) {
					adaptor.addChild(root_1, stream_KW_PURGE.nextNode());
				}
				stream_KW_PURGE.reset();

				// grammar/HiveParser.g:1226:85: ( replicationClause )?
				if ( stream_replicationClause.hasNext() ) {
					adaptor.addChild(root_1, stream_replicationClause.nextTree());
				}
				stream_replicationClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1227:5: -> ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( replicationClause )? )
			{
				// grammar/HiveParser.g:1227:19: ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( replicationClause )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_DROPPARTS, "TOK_ALTERVIEW_DROPPARTS"), root_1);
				if ( !(stream_dropPartitionSpec.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_dropPartitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_dropPartitionSpec.nextTree());
				}
				stream_dropPartitionSpec.reset();

				// grammar/HiveParser.g:1227:64: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// grammar/HiveParser.g:1227:74: ( replicationClause )?
				if ( stream_replicationClause.hasNext() ) {
					adaptor.addChild(root_1, stream_replicationClause.nextTree());
				}
				stream_replicationClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixDropPartitions"


	public static class alterStatementSuffixProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixProperties"
	// grammar/HiveParser.g:1230:1: alterStatementSuffixProperties : ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? ) );
	public final HiveParser.alterStatementSuffixProperties_return alterStatementSuffixProperties() throws RecognitionException {
		HiveParser.alterStatementSuffixProperties_return retval = new HiveParser.alterStatementSuffixProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET292=null;
		Token KW_TBLPROPERTIES293=null;
		Token KW_UNSET295=null;
		Token KW_TBLPROPERTIES296=null;
		ParserRuleReturnScope tableProperties294 =null;
		ParserRuleReturnScope ifExists297 =null;
		ParserRuleReturnScope tableProperties298 =null;

		CommonTree KW_SET292_tree=null;
		CommonTree KW_TBLPROPERTIES293_tree=null;
		CommonTree KW_UNSET295_tree=null;
		CommonTree KW_TBLPROPERTIES296_tree=null;
		RewriteRuleTokenStream stream_KW_UNSET=new RewriteRuleTokenStream(adaptor,"token KW_UNSET");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg("alter properties statement", state); 
		try {
			// grammar/HiveParser.g:1233:5: ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? ) )
			int alt86=2;
			int LA86_0 = input.LA(1);
			if ( (LA86_0==KW_SET) ) {
				alt86=1;
			}
			else if ( (LA86_0==KW_UNSET) ) {
				alt86=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 86, 0, input);
				throw nvae;
			}

			switch (alt86) {
				case 1 :
					// grammar/HiveParser.g:1233:7: KW_SET KW_TBLPROPERTIES tableProperties
					{
					KW_SET292=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixProperties5382); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET292);

					KW_TBLPROPERTIES293=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties5384); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES293);

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties5386);
					tableProperties294=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties294.getTree());
					// AST REWRITE
					// elements: tableProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1234:5: -> ^( TOK_ALTERTABLE_PROPERTIES tableProperties )
					{
						// grammar/HiveParser.g:1234:8: ^( TOK_ALTERTABLE_PROPERTIES tableProperties )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_PROPERTIES, "TOK_ALTERTABLE_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1235:7: KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties
					{
					KW_UNSET295=(Token)match(input,KW_UNSET,FOLLOW_KW_UNSET_in_alterStatementSuffixProperties5406); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNSET.add(KW_UNSET295);

					KW_TBLPROPERTIES296=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties5408); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES296);

					// grammar/HiveParser.g:1235:33: ( ifExists )?
					int alt85=2;
					int LA85_0 = input.LA(1);
					if ( (LA85_0==KW_IF) ) {
						alt85=1;
					}
					switch (alt85) {
						case 1 :
							// grammar/HiveParser.g:1235:33: ifExists
							{
							pushFollow(FOLLOW_ifExists_in_alterStatementSuffixProperties5410);
							ifExists297=ifExists();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_ifExists.add(ifExists297.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties5413);
					tableProperties298=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties298.getTree());
					// AST REWRITE
					// elements: tableProperties, ifExists
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1236:5: -> ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? )
					{
						// grammar/HiveParser.g:1236:8: ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_DROPPROPERTIES, "TOK_ALTERTABLE_DROPPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						// grammar/HiveParser.g:1236:56: ( ifExists )?
						if ( stream_ifExists.hasNext() ) {
							adaptor.addChild(root_1, stream_ifExists.nextTree());
						}
						stream_ifExists.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixProperties"


	public static class alterViewSuffixProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterViewSuffixProperties"
	// grammar/HiveParser.g:1239:1: alterViewSuffixProperties : ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? ) );
	public final HiveParser.alterViewSuffixProperties_return alterViewSuffixProperties() throws RecognitionException {
		HiveParser.alterViewSuffixProperties_return retval = new HiveParser.alterViewSuffixProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET299=null;
		Token KW_TBLPROPERTIES300=null;
		Token KW_UNSET302=null;
		Token KW_TBLPROPERTIES303=null;
		ParserRuleReturnScope tableProperties301 =null;
		ParserRuleReturnScope ifExists304 =null;
		ParserRuleReturnScope tableProperties305 =null;

		CommonTree KW_SET299_tree=null;
		CommonTree KW_TBLPROPERTIES300_tree=null;
		CommonTree KW_UNSET302_tree=null;
		CommonTree KW_TBLPROPERTIES303_tree=null;
		RewriteRuleTokenStream stream_KW_UNSET=new RewriteRuleTokenStream(adaptor,"token KW_UNSET");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg("alter view properties statement", state); 
		try {
			// grammar/HiveParser.g:1242:5: ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? ) )
			int alt88=2;
			int LA88_0 = input.LA(1);
			if ( (LA88_0==KW_SET) ) {
				alt88=1;
			}
			else if ( (LA88_0==KW_UNSET) ) {
				alt88=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 88, 0, input);
				throw nvae;
			}

			switch (alt88) {
				case 1 :
					// grammar/HiveParser.g:1242:7: KW_SET KW_TBLPROPERTIES tableProperties
					{
					KW_SET299=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterViewSuffixProperties5455); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET299);

					KW_TBLPROPERTIES300=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties5457); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES300);

					pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties5459);
					tableProperties301=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties301.getTree());
					// AST REWRITE
					// elements: tableProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1243:5: -> ^( TOK_ALTERVIEW_PROPERTIES tableProperties )
					{
						// grammar/HiveParser.g:1243:8: ^( TOK_ALTERVIEW_PROPERTIES tableProperties )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_PROPERTIES, "TOK_ALTERVIEW_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1244:7: KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties
					{
					KW_UNSET302=(Token)match(input,KW_UNSET,FOLLOW_KW_UNSET_in_alterViewSuffixProperties5479); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNSET.add(KW_UNSET302);

					KW_TBLPROPERTIES303=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties5481); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES303);

					// grammar/HiveParser.g:1244:33: ( ifExists )?
					int alt87=2;
					int LA87_0 = input.LA(1);
					if ( (LA87_0==KW_IF) ) {
						alt87=1;
					}
					switch (alt87) {
						case 1 :
							// grammar/HiveParser.g:1244:33: ifExists
							{
							pushFollow(FOLLOW_ifExists_in_alterViewSuffixProperties5483);
							ifExists304=ifExists();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_ifExists.add(ifExists304.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties5486);
					tableProperties305=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties305.getTree());
					// AST REWRITE
					// elements: tableProperties, ifExists
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1245:5: -> ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? )
					{
						// grammar/HiveParser.g:1245:8: ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_DROPPROPERTIES, "TOK_ALTERVIEW_DROPPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						// grammar/HiveParser.g:1245:55: ( ifExists )?
						if ( stream_ifExists.hasNext() ) {
							adaptor.addChild(root_1, stream_ifExists.nextTree());
						}
						stream_ifExists.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterViewSuffixProperties"


	public static class alterStatementSuffixSerdeProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixSerdeProperties"
	// grammar/HiveParser.g:1248:1: alterStatementSuffixSerdeProperties : ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) );
	public final HiveParser.alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties() throws RecognitionException {
		HiveParser.alterStatementSuffixSerdeProperties_return retval = new HiveParser.alterStatementSuffixSerdeProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token serdeName=null;
		Token KW_SET306=null;
		Token KW_SERDE307=null;
		Token KW_WITH308=null;
		Token KW_SERDEPROPERTIES309=null;
		Token KW_SET311=null;
		Token KW_SERDEPROPERTIES312=null;
		ParserRuleReturnScope tableProperties310 =null;
		ParserRuleReturnScope tableProperties313 =null;

		CommonTree serdeName_tree=null;
		CommonTree KW_SET306_tree=null;
		CommonTree KW_SERDE307_tree=null;
		CommonTree KW_WITH308_tree=null;
		CommonTree KW_SERDEPROPERTIES309_tree=null;
		CommonTree KW_SET311_tree=null;
		CommonTree KW_SERDEPROPERTIES312_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("alter serdes statement", state); 
		try {
			// grammar/HiveParser.g:1251:5: ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) )
			int alt90=2;
			int LA90_0 = input.LA(1);
			if ( (LA90_0==KW_SET) ) {
				int LA90_1 = input.LA(2);
				if ( (LA90_1==KW_SERDE) ) {
					alt90=1;
				}
				else if ( (LA90_1==KW_SERDEPROPERTIES) ) {
					alt90=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 90, 0, input);
				throw nvae;
			}

			switch (alt90) {
				case 1 :
					// grammar/HiveParser.g:1251:7: KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
					{
					KW_SET306=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties5528); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET306);

					KW_SERDE307=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties5530); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE307);

					serdeName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties5534); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(serdeName);

					// grammar/HiveParser.g:1251:47: ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
					int alt89=2;
					int LA89_0 = input.LA(1);
					if ( (LA89_0==KW_WITH) ) {
						alt89=1;
					}
					switch (alt89) {
						case 1 :
							// grammar/HiveParser.g:1251:48: KW_WITH KW_SERDEPROPERTIES tableProperties
							{
							KW_WITH308=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties5537); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH308);

							KW_SERDEPROPERTIES309=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties5539); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES309);

							pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties5541);
							tableProperties310=tableProperties();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties310.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: serdeName, tableProperties
					// token labels: serdeName
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_serdeName=new RewriteRuleTokenStream(adaptor,"token serdeName",serdeName);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1252:5: -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
					{
						// grammar/HiveParser.g:1252:8: ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_SERIALIZER, "TOK_ALTERTABLE_SERIALIZER"), root_1);
						adaptor.addChild(root_1, stream_serdeName.nextNode());
						// grammar/HiveParser.g:1252:47: ( tableProperties )?
						if ( stream_tableProperties.hasNext() ) {
							adaptor.addChild(root_1, stream_tableProperties.nextTree());
						}
						stream_tableProperties.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1253:7: KW_SET KW_SERDEPROPERTIES tableProperties
					{
					KW_SET311=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties5567); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET311);

					KW_SERDEPROPERTIES312=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties5569); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES312);

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties5571);
					tableProperties313=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties313.getTree());
					// AST REWRITE
					// elements: tableProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1254:5: -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
					{
						// grammar/HiveParser.g:1254:8: ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_SERDEPROPERTIES, "TOK_ALTERTABLE_SERDEPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixSerdeProperties"


	public static class tablePartitionPrefix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tablePartitionPrefix"
	// grammar/HiveParser.g:1257:1: tablePartitionPrefix : tableName ( partitionSpec )? -> ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? ) ;
	public final HiveParser.tablePartitionPrefix_return tablePartitionPrefix() throws RecognitionException {
		HiveParser.tablePartitionPrefix_return retval = new HiveParser.tablePartitionPrefix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope tableName314 =null;
		ParserRuleReturnScope partitionSpec315 =null;

		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		pushMsg("table partition prefix", state);
		try {
			// grammar/HiveParser.g:1260:3: ( tableName ( partitionSpec )? -> ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? ) )
			// grammar/HiveParser.g:1260:5: tableName ( partitionSpec )?
			{
			pushFollow(FOLLOW_tableName_in_tablePartitionPrefix5608);
			tableName314=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName314.getTree());
			// grammar/HiveParser.g:1260:15: ( partitionSpec )?
			int alt91=2;
			int LA91_0 = input.LA(1);
			if ( (LA91_0==KW_PARTITION) ) {
				alt91=1;
			}
			switch (alt91) {
				case 1 :
					// grammar/HiveParser.g:1260:15: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_tablePartitionPrefix5610);
					partitionSpec315=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec315.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableName, partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1261:3: -> ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? )
			{
				// grammar/HiveParser.g:1261:5: ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLE_PARTITION, "TOK_TABLE_PARTITION"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// grammar/HiveParser.g:1261:37: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePartitionPrefix"


	public static class alterStatementSuffixFileFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixFileFormat"
	// grammar/HiveParser.g:1264:1: alterStatementSuffixFileFormat : KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) ;
	public final HiveParser.alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat() throws RecognitionException {
		HiveParser.alterStatementSuffixFileFormat_return retval = new HiveParser.alterStatementSuffixFileFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET316=null;
		Token KW_FILEFORMAT317=null;
		ParserRuleReturnScope fileFormat318 =null;

		CommonTree KW_SET316_tree=null;
		CommonTree KW_FILEFORMAT317_tree=null;
		RewriteRuleTokenStream stream_KW_FILEFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FILEFORMAT");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_fileFormat=new RewriteRuleSubtreeStream(adaptor,"rule fileFormat");

		pushMsg("alter fileformat statement", state); 
		try {
			// grammar/HiveParser.g:1267:2: ( KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) )
			// grammar/HiveParser.g:1267:4: KW_SET KW_FILEFORMAT fileFormat
			{
			KW_SET316=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixFileFormat5645); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET316);

			KW_FILEFORMAT317=(Token)match(input,KW_FILEFORMAT,FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat5647); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FILEFORMAT.add(KW_FILEFORMAT317);

			pushFollow(FOLLOW_fileFormat_in_alterStatementSuffixFileFormat5649);
			fileFormat318=fileFormat();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_fileFormat.add(fileFormat318.getTree());
			// AST REWRITE
			// elements: fileFormat
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1268:2: -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
			{
				// grammar/HiveParser.g:1268:5: ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_FILEFORMAT, "TOK_ALTERTABLE_FILEFORMAT"), root_1);
				adaptor.addChild(root_1, stream_fileFormat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixFileFormat"


	public static class alterStatementSuffixClusterbySortby_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixClusterbySortby"
	// grammar/HiveParser.g:1271:1: alterStatementSuffixClusterbySortby : ( KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED ) | KW_NOT KW_SORTED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED ) | tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets ) );
	public final HiveParser.alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby() throws RecognitionException {
		HiveParser.alterStatementSuffixClusterbySortby_return retval = new HiveParser.alterStatementSuffixClusterbySortby_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_NOT319=null;
		Token KW_CLUSTERED320=null;
		Token KW_NOT321=null;
		Token KW_SORTED322=null;
		ParserRuleReturnScope tableBuckets323 =null;

		CommonTree KW_NOT319_tree=null;
		CommonTree KW_CLUSTERED320_tree=null;
		CommonTree KW_NOT321_tree=null;
		CommonTree KW_SORTED322_tree=null;
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
		RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
		RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");

		pushMsg("alter partition cluster by sort by statement", state);
		try {
			// grammar/HiveParser.g:1274:3: ( KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED ) | KW_NOT KW_SORTED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED ) | tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets ) )
			int alt92=3;
			int LA92_0 = input.LA(1);
			if ( (LA92_0==KW_NOT) ) {
				int LA92_1 = input.LA(2);
				if ( (LA92_1==KW_CLUSTERED) ) {
					alt92=1;
				}
				else if ( (LA92_1==KW_SORTED) ) {
					alt92=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 92, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA92_0==KW_CLUSTERED) ) {
				alt92=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 92, 0, input);
				throw nvae;
			}

			switch (alt92) {
				case 1 :
					// grammar/HiveParser.g:1274:5: KW_NOT KW_CLUSTERED
					{
					KW_NOT319=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5680); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT319);

					KW_CLUSTERED320=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby5682); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CLUSTERED.add(KW_CLUSTERED320);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1274:25: -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED )
					{
						// grammar/HiveParser.g:1274:28: ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_NOT_CLUSTERED, "TOK_NOT_CLUSTERED"));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1275:5: KW_NOT KW_SORTED
					{
					KW_NOT321=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5696); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT321);

					KW_SORTED322=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_alterStatementSuffixClusterbySortby5698); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SORTED.add(KW_SORTED322);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1275:22: -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED )
					{
						// grammar/HiveParser.g:1275:25: ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_NOT_SORTED, "TOK_NOT_SORTED"));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1276:5: tableBuckets
					{
					pushFollow(FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby5712);
					tableBuckets323=tableBuckets();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableBuckets.add(tableBuckets323.getTree());
					// AST REWRITE
					// elements: tableBuckets
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1276:18: -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets )
					{
						// grammar/HiveParser.g:1276:21: ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, stream_tableBuckets.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixClusterbySortby"


	public static class alterTblPartitionStatementSuffixSkewedLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterTblPartitionStatementSuffixSkewedLocation"
	// grammar/HiveParser.g:1279:1: alterTblPartitionStatementSuffixSkewedLocation : KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations ) ;
	public final HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return alterTblPartitionStatementSuffixSkewedLocation() throws RecognitionException {
		HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return retval = new HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET324=null;
		Token KW_SKEWED325=null;
		Token KW_LOCATION326=null;
		ParserRuleReturnScope skewedLocations327 =null;

		CommonTree KW_SET324_tree=null;
		CommonTree KW_SKEWED325_tree=null;
		CommonTree KW_LOCATION326_tree=null;
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");
		RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_skewedLocations=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocations");

		pushMsg("alter partition skewed location", state);
		try {
			// grammar/HiveParser.g:1282:3: ( KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations ) )
			// grammar/HiveParser.g:1282:5: KW_SET KW_SKEWED KW_LOCATION skewedLocations
			{
			KW_SET324=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation5743); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET324);

			KW_SKEWED325=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation5745); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SKEWED.add(KW_SKEWED325);

			KW_LOCATION326=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation5747); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION326);

			pushFollow(FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation5749);
			skewedLocations327=skewedLocations();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedLocations.add(skewedLocations327.getTree());
			// AST REWRITE
			// elements: skewedLocations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1283:3: -> ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations )
			{
				// grammar/HiveParser.g:1283:6: ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED_LOCATION, "TOK_ALTERTABLE_SKEWED_LOCATION"), root_1);
				adaptor.addChild(root_1, stream_skewedLocations.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTblPartitionStatementSuffixSkewedLocation"


	public static class skewedLocations_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedLocations"
	// grammar/HiveParser.g:1286:1: skewedLocations : LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) ;
	public final HiveParser.skewedLocations_return skewedLocations() throws RecognitionException {
		HiveParser.skewedLocations_return retval = new HiveParser.skewedLocations_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN328=null;
		Token RPAREN330=null;
		ParserRuleReturnScope skewedLocationsList329 =null;

		CommonTree LPAREN328_tree=null;
		CommonTree RPAREN330_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_skewedLocationsList=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationsList");

		 pushMsg("skewed locations", state); 
		try {
			// grammar/HiveParser.g:1289:5: ( LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) )
			// grammar/HiveParser.g:1290:7: LPAREN skewedLocationsList RPAREN
			{
			LPAREN328=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_skewedLocations5792); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN328);

			pushFollow(FOLLOW_skewedLocationsList_in_skewedLocations5794);
			skewedLocationsList329=skewedLocationsList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedLocationsList.add(skewedLocationsList329.getTree());
			RPAREN330=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_skewedLocations5796); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN330);

			// AST REWRITE
			// elements: skewedLocationsList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1290:41: -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
			{
				// grammar/HiveParser.g:1290:44: ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SKEWED_LOCATIONS, "TOK_SKEWED_LOCATIONS"), root_1);
				adaptor.addChild(root_1, stream_skewedLocationsList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedLocations"


	public static class skewedLocationsList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedLocationsList"
	// grammar/HiveParser.g:1293:1: skewedLocationsList : skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) ;
	public final HiveParser.skewedLocationsList_return skewedLocationsList() throws RecognitionException {
		HiveParser.skewedLocationsList_return retval = new HiveParser.skewedLocationsList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA332=null;
		ParserRuleReturnScope skewedLocationMap331 =null;
		ParserRuleReturnScope skewedLocationMap333 =null;

		CommonTree COMMA332_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_skewedLocationMap=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationMap");

		 pushMsg("skewed locations list", state); 
		try {
			// grammar/HiveParser.g:1296:5: ( skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) )
			// grammar/HiveParser.g:1297:7: skewedLocationMap ( COMMA skewedLocationMap )*
			{
			pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList5837);
			skewedLocationMap331=skewedLocationMap();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedLocationMap.add(skewedLocationMap331.getTree());
			// grammar/HiveParser.g:1297:25: ( COMMA skewedLocationMap )*
			loop93:
			while (true) {
				int alt93=2;
				int LA93_0 = input.LA(1);
				if ( (LA93_0==COMMA) ) {
					alt93=1;
				}

				switch (alt93) {
				case 1 :
					// grammar/HiveParser.g:1297:26: COMMA skewedLocationMap
					{
					COMMA332=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedLocationsList5840); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA332);

					pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList5842);
					skewedLocationMap333=skewedLocationMap();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_skewedLocationMap.add(skewedLocationMap333.getTree());
					}
					break;

				default :
					break loop93;
				}
			}

			// AST REWRITE
			// elements: skewedLocationMap
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1297:52: -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
			{
				// grammar/HiveParser.g:1297:55: ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SKEWED_LOCATION_LIST, "TOK_SKEWED_LOCATION_LIST"), root_1);
				if ( !(stream_skewedLocationMap.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_skewedLocationMap.hasNext() ) {
					adaptor.addChild(root_1, stream_skewedLocationMap.nextTree());
				}
				stream_skewedLocationMap.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedLocationsList"


	public static class skewedLocationMap_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedLocationMap"
	// grammar/HiveParser.g:1300:1: skewedLocationMap : key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) ;
	public final HiveParser.skewedLocationMap_return skewedLocationMap() throws RecognitionException {
		HiveParser.skewedLocationMap_return retval = new HiveParser.skewedLocationMap_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token value=null;
		Token EQUAL334=null;
		ParserRuleReturnScope key =null;

		CommonTree value_tree=null;
		CommonTree EQUAL334_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleSubtreeStream stream_skewedValueLocationElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueLocationElement");

		 pushMsg("specifying skewed location map", state); 
		try {
			// grammar/HiveParser.g:1303:5: (key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) )
			// grammar/HiveParser.g:1304:7: key= skewedValueLocationElement EQUAL value= StringLiteral
			{
			pushFollow(FOLLOW_skewedValueLocationElement_in_skewedLocationMap5888);
			key=skewedValueLocationElement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedValueLocationElement.add(key.getTree());
			EQUAL334=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_skewedLocationMap5890); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL334);

			value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_skewedLocationMap5894); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(value);

			// AST REWRITE
			// elements: key, value
			// token labels: value
			// rule labels: key, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
			RewriteRuleSubtreeStream stream_key=new RewriteRuleSubtreeStream(adaptor,"rule key",key!=null?key.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1304:64: -> ^( TOK_SKEWED_LOCATION_MAP $key $value)
			{
				// grammar/HiveParser.g:1304:67: ^( TOK_SKEWED_LOCATION_MAP $key $value)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SKEWED_LOCATION_MAP, "TOK_SKEWED_LOCATION_MAP"), root_1);
				adaptor.addChild(root_1, stream_key.nextTree());
				adaptor.addChild(root_1, stream_value.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedLocationMap"


	public static class alterStatementSuffixLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixLocation"
	// grammar/HiveParser.g:1307:1: alterStatementSuffixLocation : KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) ;
	public final HiveParser.alterStatementSuffixLocation_return alterStatementSuffixLocation() throws RecognitionException {
		HiveParser.alterStatementSuffixLocation_return retval = new HiveParser.alterStatementSuffixLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token newLoc=null;
		Token KW_SET335=null;
		Token KW_LOCATION336=null;

		CommonTree newLoc_tree=null;
		CommonTree KW_SET335_tree=null;
		CommonTree KW_LOCATION336_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");

		pushMsg("alter location", state);
		try {
			// grammar/HiveParser.g:1310:3: ( KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) )
			// grammar/HiveParser.g:1310:5: KW_SET KW_LOCATION newLoc= StringLiteral
			{
			KW_SET335=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixLocation5931); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET335);

			KW_LOCATION336=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation5933); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION336);

			newLoc=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixLocation5937); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(newLoc);

			// AST REWRITE
			// elements: newLoc
			// token labels: newLoc
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_newLoc=new RewriteRuleTokenStream(adaptor,"token newLoc",newLoc);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1311:3: -> ^( TOK_ALTERTABLE_LOCATION $newLoc)
			{
				// grammar/HiveParser.g:1311:6: ^( TOK_ALTERTABLE_LOCATION $newLoc)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_LOCATION, "TOK_ALTERTABLE_LOCATION"), root_1);
				adaptor.addChild(root_1, stream_newLoc.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixLocation"


	public static class alterStatementSuffixSkewedby_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixSkewedby"
	// grammar/HiveParser.g:1315:1: alterStatementSuffixSkewedby : ( tableSkewed -> ^( TOK_ALTERTABLE_SKEWED tableSkewed ) | KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED ) | KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED storedAsDirs ) );
	public final HiveParser.alterStatementSuffixSkewedby_return alterStatementSuffixSkewedby() throws RecognitionException {
		HiveParser.alterStatementSuffixSkewedby_return retval = new HiveParser.alterStatementSuffixSkewedby_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_NOT338=null;
		Token KW_SKEWED339=null;
		Token KW_NOT340=null;
		ParserRuleReturnScope tableSkewed337 =null;
		ParserRuleReturnScope storedAsDirs341 =null;

		CommonTree KW_NOT338_tree=null;
		CommonTree KW_SKEWED339_tree=null;
		CommonTree KW_NOT340_tree=null;
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
		RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");
		RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");

		pushMsg("alter skewed by statement", state);
		try {
			// grammar/HiveParser.g:1318:2: ( tableSkewed -> ^( TOK_ALTERTABLE_SKEWED tableSkewed ) | KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED ) | KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED storedAsDirs ) )
			int alt94=3;
			int LA94_0 = input.LA(1);
			if ( (LA94_0==KW_SKEWED) ) {
				alt94=1;
			}
			else if ( (LA94_0==KW_NOT) ) {
				int LA94_2 = input.LA(2);
				if ( (LA94_2==KW_SKEWED) ) {
					alt94=2;
				}
				else if ( (LA94_2==KW_STORED) ) {
					alt94=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 94, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 94, 0, input);
				throw nvae;
			}

			switch (alt94) {
				case 1 :
					// grammar/HiveParser.g:1318:4: tableSkewed
					{
					pushFollow(FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby5971);
					tableSkewed337=tableSkewed();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableSkewed.add(tableSkewed337.getTree());
					// AST REWRITE
					// elements: tableSkewed
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1319:2: -> ^( TOK_ALTERTABLE_SKEWED tableSkewed )
					{
						// grammar/HiveParser.g:1319:4: ^( TOK_ALTERTABLE_SKEWED tableSkewed )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);
						adaptor.addChild(root_1, stream_tableSkewed.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1321:3: KW_NOT KW_SKEWED
					{
					KW_NOT338=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5986); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT338);

					KW_SKEWED339=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby5988); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SKEWED.add(KW_SKEWED339);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1322:2: -> ^( TOK_ALTERTABLE_SKEWED )
					{
						// grammar/HiveParser.g:1322:4: ^( TOK_ALTERTABLE_SKEWED )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1324:3: KW_NOT storedAsDirs
					{
					KW_NOT340=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby6001); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT340);

					pushFollow(FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby6003);
					storedAsDirs341=storedAsDirs();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_storedAsDirs.add(storedAsDirs341.getTree());
					// AST REWRITE
					// elements: storedAsDirs
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1325:2: -> ^( TOK_ALTERTABLE_SKEWED storedAsDirs )
					{
						// grammar/HiveParser.g:1325:4: ^( TOK_ALTERTABLE_SKEWED storedAsDirs )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);
						adaptor.addChild(root_1, stream_storedAsDirs.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixSkewedby"


	public static class alterStatementSuffixExchangePartition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixExchangePartition"
	// grammar/HiveParser.g:1328:1: alterStatementSuffixExchangePartition : KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName -> ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename) ;
	public final HiveParser.alterStatementSuffixExchangePartition_return alterStatementSuffixExchangePartition() throws RecognitionException {
		HiveParser.alterStatementSuffixExchangePartition_return retval = new HiveParser.alterStatementSuffixExchangePartition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_EXCHANGE342=null;
		Token KW_WITH344=null;
		Token KW_TABLE345=null;
		ParserRuleReturnScope exchangename =null;
		ParserRuleReturnScope partitionSpec343 =null;

		CommonTree KW_EXCHANGE342_tree=null;
		CommonTree KW_WITH344_tree=null;
		CommonTree KW_TABLE345_tree=null;
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_EXCHANGE=new RewriteRuleTokenStream(adaptor,"token KW_EXCHANGE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		pushMsg("alter exchange partition", state);
		try {
			// grammar/HiveParser.g:1331:5: ( KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName -> ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename) )
			// grammar/HiveParser.g:1331:7: KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName
			{
			KW_EXCHANGE342=(Token)match(input,KW_EXCHANGE,FOLLOW_KW_EXCHANGE_in_alterStatementSuffixExchangePartition6034); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXCHANGE.add(KW_EXCHANGE342);

			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixExchangePartition6036);
			partitionSpec343=partitionSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec343.getTree());
			KW_WITH344=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixExchangePartition6038); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH344);

			KW_TABLE345=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatementSuffixExchangePartition6040); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE345);

			pushFollow(FOLLOW_tableName_in_alterStatementSuffixExchangePartition6044);
			exchangename=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(exchangename.getTree());
			// AST REWRITE
			// elements: exchangename, partitionSpec
			// token labels: 
			// rule labels: exchangename, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_exchangename=new RewriteRuleSubtreeStream(adaptor,"rule exchangename",exchangename!=null?exchangename.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1332:5: -> ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename)
			{
				// grammar/HiveParser.g:1332:8: ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_EXCHANGEPARTITION, "TOK_ALTERTABLE_EXCHANGEPARTITION"), root_1);
				adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				adaptor.addChild(root_1, stream_exchangename.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixExchangePartition"


	public static class alterStatementSuffixRenamePart_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRenamePart"
	// grammar/HiveParser.g:1335:1: alterStatementSuffixRenamePart : KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) ;
	public final HiveParser.alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart() throws RecognitionException {
		HiveParser.alterStatementSuffixRenamePart_return retval = new HiveParser.alterStatementSuffixRenamePart_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RENAME346=null;
		Token KW_TO347=null;
		ParserRuleReturnScope partitionSpec348 =null;

		CommonTree KW_RENAME346_tree=null;
		CommonTree KW_TO347_tree=null;
		RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("alter table rename partition statement", state); 
		try {
			// grammar/HiveParser.g:1338:5: ( KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) )
			// grammar/HiveParser.g:1338:7: KW_RENAME KW_TO partitionSpec
			{
			KW_RENAME346=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart6086); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_RENAME.add(KW_RENAME346);

			KW_TO347=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRenamePart6088); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO347);

			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart6090);
			partitionSpec348=partitionSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec348.getTree());
			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1339:5: -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
			{
				// grammar/HiveParser.g:1339:7: ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_RENAMEPART, "TOK_ALTERTABLE_RENAMEPART"), root_1);
				adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRenamePart"


	public static class alterStatementSuffixStatsPart_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixStatsPart"
	// grammar/HiveParser.g:1342:1: alterStatementSuffixStatsPart : KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) ;
	public final HiveParser.alterStatementSuffixStatsPart_return alterStatementSuffixStatsPart() throws RecognitionException {
		HiveParser.alterStatementSuffixStatsPart_return retval = new HiveParser.alterStatementSuffixStatsPart_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_UPDATE349=null;
		Token KW_STATISTICS350=null;
		Token KW_FOR351=null;
		Token KW_COLUMN352=null;
		Token KW_SET353=null;
		Token KW_COMMENT355=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope tableProperties354 =null;

		CommonTree comment_tree=null;
		CommonTree KW_UPDATE349_tree=null;
		CommonTree KW_STATISTICS350_tree=null;
		CommonTree KW_FOR351_tree=null;
		CommonTree KW_COLUMN352_tree=null;
		CommonTree KW_SET353_tree=null;
		CommonTree KW_COMMENT355_tree=null;
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("alter table stats partition statement", state); 
		try {
			// grammar/HiveParser.g:1345:5: ( KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) )
			// grammar/HiveParser.g:1345:7: KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )?
			{
			KW_UPDATE349=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_alterStatementSuffixStatsPart6128); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE349);

			KW_STATISTICS350=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_alterStatementSuffixStatsPart6130); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS350);

			KW_FOR351=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_alterStatementSuffixStatsPart6132); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR351);

			// grammar/HiveParser.g:1345:38: ( KW_COLUMN )?
			int alt95=2;
			int LA95_0 = input.LA(1);
			if ( (LA95_0==KW_COLUMN) ) {
				alt95=1;
			}
			switch (alt95) {
				case 1 :
					// grammar/HiveParser.g:1345:38: KW_COLUMN
					{
					KW_COLUMN352=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixStatsPart6134); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN352);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixStatsPart6139);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			KW_SET353=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixStatsPart6141); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET353);

			pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixStatsPart6143);
			tableProperties354=tableProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties354.getTree());
			// grammar/HiveParser.g:1345:91: ( KW_COMMENT comment= StringLiteral )?
			int alt96=2;
			int LA96_0 = input.LA(1);
			if ( (LA96_0==KW_COMMENT) ) {
				alt96=1;
			}
			switch (alt96) {
				case 1 :
					// grammar/HiveParser.g:1345:92: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT355=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixStatsPart6146); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT355);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixStatsPart6150); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: comment, tableProperties, colName
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1346:5: -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
			{
				// grammar/HiveParser.g:1346:7: ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_UPDATECOLSTATS, "TOK_ALTERTABLE_UPDATECOLSTATS"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_tableProperties.nextTree());
				// grammar/HiveParser.g:1346:65: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixStatsPart"


	public static class alterStatementSuffixMergeFiles_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixMergeFiles"
	// grammar/HiveParser.g:1349:1: alterStatementSuffixMergeFiles : KW_CONCATENATE -> ^( TOK_ALTERTABLE_MERGEFILES ) ;
	public final HiveParser.alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles() throws RecognitionException {
		HiveParser.alterStatementSuffixMergeFiles_return retval = new HiveParser.alterStatementSuffixMergeFiles_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CONCATENATE356=null;

		CommonTree KW_CONCATENATE356_tree=null;
		RewriteRuleTokenStream stream_KW_CONCATENATE=new RewriteRuleTokenStream(adaptor,"token KW_CONCATENATE");

		 pushMsg("", state); 
		try {
			// grammar/HiveParser.g:1352:5: ( KW_CONCATENATE -> ^( TOK_ALTERTABLE_MERGEFILES ) )
			// grammar/HiveParser.g:1352:7: KW_CONCATENATE
			{
			KW_CONCATENATE356=(Token)match(input,KW_CONCATENATE,FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles6197); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CONCATENATE.add(KW_CONCATENATE356);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1353:5: -> ^( TOK_ALTERTABLE_MERGEFILES )
			{
				// grammar/HiveParser.g:1353:8: ^( TOK_ALTERTABLE_MERGEFILES )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_MERGEFILES, "TOK_ALTERTABLE_MERGEFILES"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixMergeFiles"


	public static class alterStatementSuffixBucketNum_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixBucketNum"
	// grammar/HiveParser.g:1356:1: alterStatementSuffixBucketNum : KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $num) ;
	public final HiveParser.alterStatementSuffixBucketNum_return alterStatementSuffixBucketNum() throws RecognitionException {
		HiveParser.alterStatementSuffixBucketNum_return retval = new HiveParser.alterStatementSuffixBucketNum_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token num=null;
		Token KW_INTO357=null;
		Token KW_BUCKETS358=null;

		CommonTree num_tree=null;
		CommonTree KW_INTO357_tree=null;
		CommonTree KW_BUCKETS358_tree=null;
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");

		 pushMsg("", state); 
		try {
			// grammar/HiveParser.g:1359:5: ( KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $num) )
			// grammar/HiveParser.g:1359:7: KW_INTO num= Number KW_BUCKETS
			{
			KW_INTO357=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_alterStatementSuffixBucketNum6234); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO357);

			num=(Token)match(input,Number,FOLLOW_Number_in_alterStatementSuffixBucketNum6238); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Number.add(num);

			KW_BUCKETS358=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_alterStatementSuffixBucketNum6240); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BUCKETS.add(KW_BUCKETS358);

			// AST REWRITE
			// elements: num
			// token labels: num
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1360:5: -> ^( TOK_ALTERTABLE_BUCKETS $num)
			{
				// grammar/HiveParser.g:1360:8: ^( TOK_ALTERTABLE_BUCKETS $num)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_BUCKETS, "TOK_ALTERTABLE_BUCKETS"), root_1);
				adaptor.addChild(root_1, stream_num.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixBucketNum"


	public static class alterStatementSuffixCompact_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixCompact"
	// grammar/HiveParser.g:1363:1: alterStatementSuffixCompact : KW_COMPACT compactType= StringLiteral ( KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_COMPACT $compactType ( tableProperties )? ) ;
	public final HiveParser.alterStatementSuffixCompact_return alterStatementSuffixCompact() throws RecognitionException {
		HiveParser.alterStatementSuffixCompact_return retval = new HiveParser.alterStatementSuffixCompact_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token compactType=null;
		Token KW_COMPACT359=null;
		Token KW_WITH360=null;
		Token KW_OVERWRITE361=null;
		Token KW_TBLPROPERTIES362=null;
		ParserRuleReturnScope tableProperties363 =null;

		CommonTree compactType_tree=null;
		CommonTree KW_COMPACT359_tree=null;
		CommonTree KW_WITH360_tree=null;
		CommonTree KW_OVERWRITE361_tree=null;
		CommonTree KW_TBLPROPERTIES362_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_COMPACT=new RewriteRuleTokenStream(adaptor,"token KW_COMPACT");
		RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 msgs.push("compaction request"); 
		try {
			// grammar/HiveParser.g:1366:5: ( KW_COMPACT compactType= StringLiteral ( KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_COMPACT $compactType ( tableProperties )? ) )
			// grammar/HiveParser.g:1366:7: KW_COMPACT compactType= StringLiteral ( KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties )?
			{
			KW_COMPACT359=(Token)match(input,KW_COMPACT,FOLLOW_KW_COMPACT_in_alterStatementSuffixCompact6280); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMPACT.add(KW_COMPACT359);

			compactType=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixCompact6284); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(compactType);

			// grammar/HiveParser.g:1366:44: ( KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties )?
			int alt97=2;
			int LA97_0 = input.LA(1);
			if ( (LA97_0==KW_WITH) ) {
				alt97=1;
			}
			switch (alt97) {
				case 1 :
					// grammar/HiveParser.g:1366:45: KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties
					{
					KW_WITH360=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixCompact6287); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH360);

					KW_OVERWRITE361=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_alterStatementSuffixCompact6289); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OVERWRITE.add(KW_OVERWRITE361);

					KW_TBLPROPERTIES362=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixCompact6291); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES362);

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixCompact6293);
					tableProperties363=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties363.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableProperties, compactType
			// token labels: compactType
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_compactType=new RewriteRuleTokenStream(adaptor,"token compactType",compactType);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1367:5: -> ^( TOK_ALTERTABLE_COMPACT $compactType ( tableProperties )? )
			{
				// grammar/HiveParser.g:1367:8: ^( TOK_ALTERTABLE_COMPACT $compactType ( tableProperties )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_COMPACT, "TOK_ALTERTABLE_COMPACT"), root_1);
				adaptor.addChild(root_1, stream_compactType.nextNode());
				// grammar/HiveParser.g:1367:46: ( tableProperties )?
				if ( stream_tableProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_tableProperties.nextTree());
				}
				stream_tableProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { msgs.pop(); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixCompact"


	public static class fileFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fileFormat"
	// grammar/HiveParser.g:1371:1: fileFormat : ( KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral KW_SERDE serdeCls= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? ) |genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
	public final HiveParser.fileFormat_return fileFormat() throws RecognitionException {
		HiveParser.fileFormat_return retval = new HiveParser.fileFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token inFmt=null;
		Token outFmt=null;
		Token serdeCls=null;
		Token inDriver=null;
		Token outDriver=null;
		Token KW_INPUTFORMAT364=null;
		Token KW_OUTPUTFORMAT365=null;
		Token KW_SERDE366=null;
		Token KW_INPUTDRIVER367=null;
		Token KW_OUTPUTDRIVER368=null;
		ParserRuleReturnScope genericSpec =null;

		CommonTree inFmt_tree=null;
		CommonTree outFmt_tree=null;
		CommonTree serdeCls_tree=null;
		CommonTree inDriver_tree=null;
		CommonTree outDriver_tree=null;
		CommonTree KW_INPUTFORMAT364_tree=null;
		CommonTree KW_OUTPUTFORMAT365_tree=null;
		CommonTree KW_SERDE366_tree=null;
		CommonTree KW_INPUTDRIVER367_tree=null;
		CommonTree KW_OUTPUTDRIVER368_tree=null;
		RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
		RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
		RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("file format specification", state); 
		try {
			// grammar/HiveParser.g:1374:5: ( KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral KW_SERDE serdeCls= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? ) |genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
			int alt99=2;
			int LA99_0 = input.LA(1);
			if ( (LA99_0==KW_INPUTFORMAT) ) {
				int LA99_1 = input.LA(2);
				if ( (LA99_1==StringLiteral) ) {
					alt99=1;
				}
				else if ( (LA99_1==EOF) ) {
					alt99=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 99, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA99_0 >= Identifier && LA99_0 <= KW_ANALYZE)||(LA99_0 >= KW_ARCHIVE && LA99_0 <= KW_BY)||LA99_0==KW_CASCADE||LA99_0==KW_CHANGE||(LA99_0 >= KW_CLUSTER && LA99_0 <= KW_COLLECTION)||(LA99_0 >= KW_COLUMNS && LA99_0 <= KW_COMMENT)||(LA99_0 >= KW_COMPACT && LA99_0 <= KW_CONCATENATE)||(LA99_0 >= KW_CONSTRAINT && LA99_0 <= KW_CREATE)||LA99_0==KW_CUBE||(LA99_0 >= KW_CURRENT_DATE && LA99_0 <= KW_DATA)||(LA99_0 >= KW_DATABASES && LA99_0 <= KW_DISABLE)||(LA99_0 >= KW_DISTRIBUTE && LA99_0 <= KW_ELEM_TYPE)||LA99_0==KW_ENABLE||LA99_0==KW_ESCAPED||(LA99_0 >= KW_EXCLUSIVE && LA99_0 <= KW_EXPORT)||(LA99_0 >= KW_EXTERNAL && LA99_0 <= KW_FLOAT)||(LA99_0 >= KW_FOR && LA99_0 <= KW_FORMATTED)||LA99_0==KW_FULL||(LA99_0 >= KW_FUNCTIONS && LA99_0 <= KW_GROUPING)||(LA99_0 >= KW_HOUR && LA99_0 <= KW_IDXPROPERTIES)||(LA99_0 >= KW_IMPORT && LA99_0 <= KW_INPUTDRIVER)||(LA99_0 >= KW_INSERT && LA99_0 <= KW_INTERSECT)||(LA99_0 >= KW_INTO && LA99_0 <= KW_JAR)||(LA99_0 >= KW_KEY && LA99_0 <= KW_LEFT)||(LA99_0 >= KW_LEVEL && LA99_0 <= KW_LONG)||(LA99_0 >= KW_MAPJOIN && LA99_0 <= KW_MONTH)||(LA99_0 >= KW_MSCK && LA99_0 <= KW_NOSCAN)||(LA99_0 >= KW_NOVALIDATE && LA99_0 <= KW_OFFSET)||LA99_0==KW_OPTION||(LA99_0 >= KW_ORDER && LA99_0 <= KW_OUTPUTFORMAT)||(LA99_0 >= KW_OVERWRITE && LA99_0 <= KW_OWNER)||(LA99_0 >= KW_PARTITION && LA99_0 <= KW_PLUS)||(LA99_0 >= KW_PRETTY && LA99_0 <= KW_RECORDWRITER)||(LA99_0 >= KW_REFERENCES && LA99_0 <= KW_ROLES)||(LA99_0 >= KW_ROLLUP && LA99_0 <= KW_SECOND)||(LA99_0 >= KW_SEMI && LA99_0 <= KW_SSL)||(LA99_0 >= KW_STATISTICS && LA99_0 <= KW_TABLES)||(LA99_0 >= KW_TBLPROPERTIES && LA99_0 <= KW_TERMINATED)||(LA99_0 >= KW_TIMESTAMP && LA99_0 <= KW_TRANSACTIONS)||(LA99_0 >= KW_TRIGGER && LA99_0 <= KW_UNARCHIVE)||(LA99_0 >= KW_UNDO && LA99_0 <= KW_UNIONTYPE)||(LA99_0 >= KW_UNLOCK && LA99_0 <= KW_VALUE_TYPE)||LA99_0==KW_VIEW||LA99_0==KW_WHILE||(LA99_0 >= KW_WITH && LA99_0 <= KW_YEAR)||LA99_0==KW_HOLD_DDLTIME||LA99_0==KW_IGNORE||LA99_0==KW_NO_DROP||LA99_0==KW_OFFLINE||LA99_0==KW_PROTECTION||LA99_0==KW_READONLY) ) {
				alt99=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 99, 0, input);
				throw nvae;
			}

			switch (alt99) {
				case 1 :
					// grammar/HiveParser.g:1374:7: KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral KW_SERDE serdeCls= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					{
					KW_INPUTFORMAT364=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_fileFormat6339); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT364);

					inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6343); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(inFmt);

					KW_OUTPUTFORMAT365=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_fileFormat6345); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT365);

					outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6349); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(outFmt);

					KW_SERDE366=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_fileFormat6351); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE366);

					serdeCls=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6355); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(serdeCls);

					// grammar/HiveParser.g:1374:111: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					int alt98=2;
					int LA98_0 = input.LA(1);
					if ( (LA98_0==KW_INPUTDRIVER) ) {
						alt98=1;
					}
					switch (alt98) {
						case 1 :
							// grammar/HiveParser.g:1374:112: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
							{
							KW_INPUTDRIVER367=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_fileFormat6358); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER367);

							inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6362); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(inDriver);

							KW_OUTPUTDRIVER368=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_fileFormat6364); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER368);

							outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6368); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(outDriver);

							}
							break;

					}

					// AST REWRITE
					// elements: outFmt, outDriver, inFmt, serdeCls, inDriver
					// token labels: inFmt, inDriver, outDriver, serdeCls, outFmt
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
					RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
					RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
					RewriteRuleTokenStream stream_serdeCls=new RewriteRuleTokenStream(adaptor,"token serdeCls",serdeCls);
					RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1375:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? )
					{
						// grammar/HiveParser.g:1375:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);
						adaptor.addChild(root_1, stream_inFmt.nextNode());
						adaptor.addChild(root_1, stream_outFmt.nextNode());
						adaptor.addChild(root_1, stream_serdeCls.nextNode());
						// grammar/HiveParser.g:1375:58: ( $inDriver)?
						if ( stream_inDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_inDriver.nextNode());
						}
						stream_inDriver.reset();

						// grammar/HiveParser.g:1375:69: ( $outDriver)?
						if ( stream_outDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_outDriver.nextNode());
						}
						stream_outDriver.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1376:7: genericSpec= identifier
					{
					pushFollow(FOLLOW_identifier_in_fileFormat6409);
					genericSpec=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(genericSpec.getTree());
					// AST REWRITE
					// elements: genericSpec
					// token labels: 
					// rule labels: genericSpec, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_genericSpec=new RewriteRuleSubtreeStream(adaptor,"rule genericSpec",genericSpec!=null?genericSpec.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1376:30: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
					{
						// grammar/HiveParser.g:1376:33: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);
						adaptor.addChild(root_1, stream_genericSpec.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fileFormat"


	public static class tabTypeExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tabTypeExpr"
	// grammar/HiveParser.g:1379:1: tabTypeExpr : identifier ( DOT ^ identifier )? ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )? ;
	public final HiveParser.tabTypeExpr_return tabTypeExpr() throws RecognitionException {
		HiveParser.tabTypeExpr_return retval = new HiveParser.tabTypeExpr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DOT370=null;
		Token DOT373=null;
		Token KW_ELEM_TYPE374=null;
		Token KW_KEY_TYPE375=null;
		Token KW_VALUE_TYPE376=null;
		ParserRuleReturnScope identifier369 =null;
		ParserRuleReturnScope identifier371 =null;
		ParserRuleReturnScope identifier372 =null;
		ParserRuleReturnScope identifier377 =null;

		CommonTree DOT370_tree=null;
		CommonTree DOT373_tree=null;
		CommonTree KW_ELEM_TYPE374_tree=null;
		CommonTree KW_KEY_TYPE375_tree=null;
		CommonTree KW_VALUE_TYPE376_tree=null;

		 pushMsg("specifying table types", state); 
		try {
			// grammar/HiveParser.g:1382:4: ( identifier ( DOT ^ identifier )? ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )? )
			// grammar/HiveParser.g:1382:6: identifier ( DOT ^ identifier )? ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_tabTypeExpr6444);
			identifier369=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier369.getTree());

			// grammar/HiveParser.g:1382:17: ( DOT ^ identifier )?
			int alt100=2;
			int LA100_0 = input.LA(1);
			if ( (LA100_0==DOT) ) {
				alt100=1;
			}
			switch (alt100) {
				case 1 :
					// grammar/HiveParser.g:1382:18: DOT ^ identifier
					{
					DOT370=(Token)match(input,DOT,FOLLOW_DOT_in_tabTypeExpr6447); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT370_tree = (CommonTree)adaptor.create(DOT370);
					root_0 = (CommonTree)adaptor.becomeRoot(DOT370_tree, root_0);
					}

					pushFollow(FOLLOW_identifier_in_tabTypeExpr6450);
					identifier371=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier371.getTree());

					}
					break;

			}

			// grammar/HiveParser.g:1383:4: ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )?
			int alt103=2;
			int LA103_0 = input.LA(1);
			if ( ((LA103_0 >= Identifier && LA103_0 <= KW_ANALYZE)||(LA103_0 >= KW_ARCHIVE && LA103_0 <= KW_BY)||LA103_0==KW_CASCADE||LA103_0==KW_CHANGE||(LA103_0 >= KW_CLUSTER && LA103_0 <= KW_COLLECTION)||(LA103_0 >= KW_COLUMNS && LA103_0 <= KW_COMMENT)||(LA103_0 >= KW_COMPACT && LA103_0 <= KW_CONCATENATE)||(LA103_0 >= KW_CONSTRAINT && LA103_0 <= KW_CREATE)||LA103_0==KW_CUBE||(LA103_0 >= KW_CURRENT_DATE && LA103_0 <= KW_DATA)||(LA103_0 >= KW_DATABASES && LA103_0 <= KW_DISABLE)||(LA103_0 >= KW_DISTRIBUTE && LA103_0 <= KW_ELEM_TYPE)||LA103_0==KW_ENABLE||LA103_0==KW_ESCAPED||(LA103_0 >= KW_EXCLUSIVE && LA103_0 <= KW_EXPORT)||(LA103_0 >= KW_EXTERNAL && LA103_0 <= KW_FLOAT)||(LA103_0 >= KW_FOR && LA103_0 <= KW_FORMATTED)||LA103_0==KW_FULL||(LA103_0 >= KW_FUNCTIONS && LA103_0 <= KW_GROUPING)||(LA103_0 >= KW_HOUR && LA103_0 <= KW_IDXPROPERTIES)||(LA103_0 >= KW_IMPORT && LA103_0 <= KW_INTERSECT)||(LA103_0 >= KW_INTO && LA103_0 <= KW_JAR)||(LA103_0 >= KW_KEY && LA103_0 <= KW_LEFT)||(LA103_0 >= KW_LEVEL && LA103_0 <= KW_LONG)||(LA103_0 >= KW_MAPJOIN && LA103_0 <= KW_MONTH)||(LA103_0 >= KW_MSCK && LA103_0 <= KW_NOSCAN)||(LA103_0 >= KW_NOVALIDATE && LA103_0 <= KW_OFFSET)||LA103_0==KW_OPTION||(LA103_0 >= KW_ORDER && LA103_0 <= KW_OUTPUTFORMAT)||(LA103_0 >= KW_OVERWRITE && LA103_0 <= KW_OWNER)||(LA103_0 >= KW_PARTITIONED && LA103_0 <= KW_PLUS)||(LA103_0 >= KW_PRETTY && LA103_0 <= KW_RECORDWRITER)||(LA103_0 >= KW_REFERENCES && LA103_0 <= KW_ROLES)||(LA103_0 >= KW_ROLLUP && LA103_0 <= KW_SECOND)||(LA103_0 >= KW_SEMI && LA103_0 <= KW_SSL)||(LA103_0 >= KW_STATISTICS && LA103_0 <= KW_TABLES)||(LA103_0 >= KW_TBLPROPERTIES && LA103_0 <= KW_TERMINATED)||(LA103_0 >= KW_TIMESTAMP && LA103_0 <= KW_TRANSACTIONS)||(LA103_0 >= KW_TRIGGER && LA103_0 <= KW_UNARCHIVE)||(LA103_0 >= KW_UNDO && LA103_0 <= KW_UNIONTYPE)||(LA103_0 >= KW_UNLOCK && LA103_0 <= KW_VALUE_TYPE)||LA103_0==KW_VIEW||LA103_0==KW_WHILE||(LA103_0 >= KW_WITH && LA103_0 <= KW_YEAR)||LA103_0==KW_HOLD_DDLTIME||LA103_0==KW_IGNORE||LA103_0==KW_NO_DROP||LA103_0==KW_OFFLINE||LA103_0==KW_PROTECTION||LA103_0==KW_READONLY) ) {
				alt103=1;
			}
			else if ( (LA103_0==KW_PARTITION) ) {
				int LA103_3 = input.LA(2);
				if ( (LA103_3==EOF||LA103_3==DOT||LA103_3==KW_EXTENDED||LA103_3==KW_PARTITION) ) {
					alt103=1;
				}
			}
			switch (alt103) {
				case 1 :
					// grammar/HiveParser.g:1383:5: identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
					{
					pushFollow(FOLLOW_identifier_in_tabTypeExpr6458);
					identifier372=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier372.getTree());

					// grammar/HiveParser.g:1383:16: ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
					loop102:
					while (true) {
						int alt102=2;
						int LA102_0 = input.LA(1);
						if ( (LA102_0==DOT) ) {
							alt102=1;
						}

						switch (alt102) {
						case 1 :
							// grammar/HiveParser.g:1383:17: DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
							{
							DOT373=(Token)match(input,DOT,FOLLOW_DOT_in_tabTypeExpr6461); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DOT373_tree = (CommonTree)adaptor.create(DOT373);
							root_0 = (CommonTree)adaptor.becomeRoot(DOT373_tree, root_0);
							}

							// grammar/HiveParser.g:1384:4: ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
							int alt101=4;
							switch ( input.LA(1) ) {
							case KW_ELEM_TYPE:
								{
								int LA101_1 = input.LA(2);
								if ( (synpred4_HiveParser()) ) {
									alt101=1;
								}
								else if ( (true) ) {
									alt101=4;
								}

								}
								break;
							case KW_KEY_TYPE:
								{
								int LA101_2 = input.LA(2);
								if ( (synpred5_HiveParser()) ) {
									alt101=2;
								}
								else if ( (true) ) {
									alt101=4;
								}

								}
								break;
							case KW_VALUE_TYPE:
								{
								int LA101_3 = input.LA(2);
								if ( (synpred6_HiveParser()) ) {
									alt101=3;
								}
								else if ( (true) ) {
									alt101=4;
								}

								}
								break;
							case Identifier:
							case KW_ABORT:
							case KW_ADD:
							case KW_ADMIN:
							case KW_AFTER:
							case KW_ALL:
							case KW_ALTER:
							case KW_ANALYZE:
							case KW_ARCHIVE:
							case KW_ARRAY:
							case KW_AS:
							case KW_ASC:
							case KW_AUTHORIZATION:
							case KW_AUTOCOMMIT:
							case KW_BEFORE:
							case KW_BETWEEN:
							case KW_BIGINT:
							case KW_BINARY:
							case KW_BOOLEAN:
							case KW_BOTH:
							case KW_BUCKET:
							case KW_BUCKETS:
							case KW_BY:
							case KW_CASCADE:
							case KW_CHANGE:
							case KW_CLUSTER:
							case KW_CLUSTERED:
							case KW_CLUSTERSTATUS:
							case KW_COLLECTION:
							case KW_COLUMNS:
							case KW_COMMENT:
							case KW_COMPACT:
							case KW_COMPACTIONS:
							case KW_COMPUTE:
							case KW_CONCATENATE:
							case KW_CONSTRAINT:
							case KW_CONTINUE:
							case KW_CREATE:
							case KW_CUBE:
							case KW_CURRENT_DATE:
							case KW_CURRENT_TIMESTAMP:
							case KW_CURSOR:
							case KW_DATA:
							case KW_DATABASES:
							case KW_DATE:
							case KW_DATETIME:
							case KW_DAY:
							case KW_DBPROPERTIES:
							case KW_DECIMAL:
							case KW_DEFERRED:
							case KW_DEFINED:
							case KW_DELETE:
							case KW_DELIMITED:
							case KW_DEPENDENCY:
							case KW_DESC:
							case KW_DESCRIBE:
							case KW_DIRECTORIES:
							case KW_DIRECTORY:
							case KW_DISABLE:
							case KW_DISTRIBUTE:
							case KW_DOUBLE:
							case KW_DROP:
							case KW_ENABLE:
							case KW_ESCAPED:
							case KW_EXCLUSIVE:
							case KW_EXISTS:
							case KW_EXPLAIN:
							case KW_EXPORT:
							case KW_EXTERNAL:
							case KW_FALSE:
							case KW_FETCH:
							case KW_FIELDS:
							case KW_FILE:
							case KW_FILEFORMAT:
							case KW_FIRST:
							case KW_FLOAT:
							case KW_FOR:
							case KW_FOREIGN:
							case KW_FORMAT:
							case KW_FORMATTED:
							case KW_FULL:
							case KW_FUNCTIONS:
							case KW_GRANT:
							case KW_GROUP:
							case KW_GROUPING:
							case KW_HOUR:
							case KW_IDXPROPERTIES:
							case KW_IMPORT:
							case KW_IN:
							case KW_INDEX:
							case KW_INDEXES:
							case KW_INNER:
							case KW_INPATH:
							case KW_INPUTDRIVER:
							case KW_INPUTFORMAT:
							case KW_INSERT:
							case KW_INT:
							case KW_INTERSECT:
							case KW_INTO:
							case KW_IS:
							case KW_ISOLATION:
							case KW_ITEMS:
							case KW_JAR:
							case KW_KEY:
							case KW_KEYS:
							case KW_LAST:
							case KW_LATERAL:
							case KW_LEFT:
							case KW_LEVEL:
							case KW_LIKE:
							case KW_LIMIT:
							case KW_LINES:
							case KW_LOAD:
							case KW_LOCAL:
							case KW_LOCATION:
							case KW_LOCK:
							case KW_LOCKS:
							case KW_LOGICAL:
							case KW_LONG:
							case KW_MAPJOIN:
							case KW_MATERIALIZED:
							case KW_METADATA:
							case KW_MINUS:
							case KW_MINUTE:
							case KW_MONTH:
							case KW_MSCK:
							case KW_NONE:
							case KW_NORELY:
							case KW_NOSCAN:
							case KW_NOVALIDATE:
							case KW_NULL:
							case KW_NULLS:
							case KW_OF:
							case KW_OFFSET:
							case KW_OPTION:
							case KW_ORDER:
							case KW_OUT:
							case KW_OUTER:
							case KW_OUTPUTDRIVER:
							case KW_OUTPUTFORMAT:
							case KW_OVERWRITE:
							case KW_OWNER:
							case KW_PARTITION:
							case KW_PARTITIONED:
							case KW_PARTITIONS:
							case KW_PERCENT:
							case KW_PLUS:
							case KW_PRETTY:
							case KW_PRIMARY:
							case KW_PRINCIPALS:
							case KW_PROCEDURE:
							case KW_PURGE:
							case KW_RANGE:
							case KW_READ:
							case KW_READS:
							case KW_REBUILD:
							case KW_RECORDREADER:
							case KW_RECORDWRITER:
							case KW_REFERENCES:
							case KW_REGEXP:
							case KW_RELOAD:
							case KW_RELY:
							case KW_RENAME:
							case KW_REPAIR:
							case KW_REPLACE:
							case KW_REPLICATION:
							case KW_RESTRICT:
							case KW_REVOKE:
							case KW_REWRITE:
							case KW_RIGHT:
							case KW_RLIKE:
							case KW_ROLE:
							case KW_ROLES:
							case KW_ROLLUP:
							case KW_ROW:
							case KW_ROWS:
							case KW_SCHEMA:
							case KW_SCHEMAS:
							case KW_SECOND:
							case KW_SEMI:
							case KW_SERDE:
							case KW_SERDEPROPERTIES:
							case KW_SERVER:
							case KW_SET:
							case KW_SETS:
							case KW_SHARED:
							case KW_SHOW:
							case KW_SHOW_DATABASE:
							case KW_SKEWED:
							case KW_SMALLINT:
							case KW_SNAPSHOT:
							case KW_SORT:
							case KW_SORTED:
							case KW_SSL:
							case KW_STATISTICS:
							case KW_STORED:
							case KW_STREAMTABLE:
							case KW_STRING:
							case KW_STRUCT:
							case KW_TABLE:
							case KW_TABLES:
							case KW_TBLPROPERTIES:
							case KW_TEMPORARY:
							case KW_TERMINATED:
							case KW_TIMESTAMP:
							case KW_TINYINT:
							case KW_TO:
							case KW_TOUCH:
							case KW_TRANSACTION:
							case KW_TRANSACTIONS:
							case KW_TRIGGER:
							case KW_TRUE:
							case KW_TRUNCATE:
							case KW_UNARCHIVE:
							case KW_UNDO:
							case KW_UNION:
							case KW_UNIONTYPE:
							case KW_UNLOCK:
							case KW_UNSET:
							case KW_UNSIGNED:
							case KW_UPDATE:
							case KW_URI:
							case KW_USE:
							case KW_USER:
							case KW_USING:
							case KW_UTC:
							case KW_UTCTIMESTAMP:
							case KW_VALIDATE:
							case KW_VALUES:
							case KW_VIEW:
							case KW_WHILE:
							case KW_WITH:
							case KW_WORK:
							case KW_WRITE:
							case KW_YEAR:
							case KW_HOLD_DDLTIME:
							case KW_IGNORE:
							case KW_NO_DROP:
							case KW_OFFLINE:
							case KW_PROTECTION:
							case KW_READONLY:
								{
								alt101=4;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 101, 0, input);
								throw nvae;
							}
							switch (alt101) {
								case 1 :
									// grammar/HiveParser.g:1385:4: ( KW_ELEM_TYPE )=> KW_ELEM_TYPE
									{
									KW_ELEM_TYPE374=(Token)match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_tabTypeExpr6478); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									KW_ELEM_TYPE374_tree = (CommonTree)adaptor.create(KW_ELEM_TYPE374);
									adaptor.addChild(root_0, KW_ELEM_TYPE374_tree);
									}

									}
									break;
								case 2 :
									// grammar/HiveParser.g:1387:4: ( KW_KEY_TYPE )=> KW_KEY_TYPE
									{
									KW_KEY_TYPE375=(Token)match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_tabTypeExpr6495); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									KW_KEY_TYPE375_tree = (CommonTree)adaptor.create(KW_KEY_TYPE375);
									adaptor.addChild(root_0, KW_KEY_TYPE375_tree);
									}

									}
									break;
								case 3 :
									// grammar/HiveParser.g:1389:4: ( KW_VALUE_TYPE )=> KW_VALUE_TYPE
									{
									KW_VALUE_TYPE376=(Token)match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_tabTypeExpr6512); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									KW_VALUE_TYPE376_tree = (CommonTree)adaptor.create(KW_VALUE_TYPE376);
									adaptor.addChild(root_0, KW_VALUE_TYPE376_tree);
									}

									}
									break;
								case 4 :
									// grammar/HiveParser.g:1390:6: identifier
									{
									pushFollow(FOLLOW_identifier_in_tabTypeExpr6520);
									identifier377=identifier();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier377.getTree());

									}
									break;

							}

							}
							break;

						default :
							break loop102;
						}
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tabTypeExpr"


	public static class partTypeExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partTypeExpr"
	// grammar/HiveParser.g:1395:1: partTypeExpr : tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) ;
	public final HiveParser.partTypeExpr_return partTypeExpr() throws RecognitionException {
		HiveParser.partTypeExpr_return retval = new HiveParser.partTypeExpr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope tabTypeExpr378 =null;
		ParserRuleReturnScope partitionSpec379 =null;

		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabTypeExpr");

		 pushMsg("specifying table partitions", state); 
		try {
			// grammar/HiveParser.g:1398:5: ( tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) )
			// grammar/HiveParser.g:1398:8: tabTypeExpr ( partitionSpec )?
			{
			pushFollow(FOLLOW_tabTypeExpr_in_partTypeExpr6560);
			tabTypeExpr378=tabTypeExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tabTypeExpr.add(tabTypeExpr378.getTree());
			// grammar/HiveParser.g:1398:20: ( partitionSpec )?
			int alt104=2;
			int LA104_0 = input.LA(1);
			if ( (LA104_0==KW_PARTITION) ) {
				alt104=1;
			}
			switch (alt104) {
				case 1 :
					// grammar/HiveParser.g:1398:20: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_partTypeExpr6562);
					partitionSpec379=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec379.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tabTypeExpr, partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1398:35: -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
			{
				// grammar/HiveParser.g:1398:38: ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE"), root_1);
				adaptor.addChild(root_1, stream_tabTypeExpr.nextTree());
				// grammar/HiveParser.g:1398:64: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partTypeExpr"


	public static class tabPartColTypeExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tabPartColTypeExpr"
	// grammar/HiveParser.g:1401:1: tabPartColTypeExpr : tableName ( partitionSpec )? ( extColumnName )? -> ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? ) ;
	public final HiveParser.tabPartColTypeExpr_return tabPartColTypeExpr() throws RecognitionException {
		HiveParser.tabPartColTypeExpr_return retval = new HiveParser.tabPartColTypeExpr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope tableName380 =null;
		ParserRuleReturnScope partitionSpec381 =null;
		ParserRuleReturnScope extColumnName382 =null;

		RewriteRuleSubtreeStream stream_extColumnName=new RewriteRuleSubtreeStream(adaptor,"rule extColumnName");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("specifying table partitions columnName", state); 
		try {
			// grammar/HiveParser.g:1404:5: ( tableName ( partitionSpec )? ( extColumnName )? -> ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? ) )
			// grammar/HiveParser.g:1404:8: tableName ( partitionSpec )? ( extColumnName )?
			{
			pushFollow(FOLLOW_tableName_in_tabPartColTypeExpr6602);
			tableName380=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName380.getTree());
			// grammar/HiveParser.g:1404:18: ( partitionSpec )?
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==KW_PARTITION) ) {
				int LA105_1 = input.LA(2);
				if ( (LA105_1==LPAREN) ) {
					alt105=1;
				}
			}
			switch (alt105) {
				case 1 :
					// grammar/HiveParser.g:1404:18: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_tabPartColTypeExpr6604);
					partitionSpec381=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec381.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:1404:33: ( extColumnName )?
			int alt106=2;
			int LA106_0 = input.LA(1);
			if ( ((LA106_0 >= Identifier && LA106_0 <= KW_ANALYZE)||(LA106_0 >= KW_ARCHIVE && LA106_0 <= KW_BY)||LA106_0==KW_CASCADE||LA106_0==KW_CHANGE||(LA106_0 >= KW_CLUSTER && LA106_0 <= KW_COLLECTION)||(LA106_0 >= KW_COLUMNS && LA106_0 <= KW_COMMENT)||(LA106_0 >= KW_COMPACT && LA106_0 <= KW_CONCATENATE)||(LA106_0 >= KW_CONSTRAINT && LA106_0 <= KW_CREATE)||LA106_0==KW_CUBE||(LA106_0 >= KW_CURRENT_DATE && LA106_0 <= KW_DATA)||(LA106_0 >= KW_DATABASES && LA106_0 <= KW_DISABLE)||(LA106_0 >= KW_DISTRIBUTE && LA106_0 <= KW_ELEM_TYPE)||LA106_0==KW_ENABLE||LA106_0==KW_ESCAPED||(LA106_0 >= KW_EXCLUSIVE && LA106_0 <= KW_EXPORT)||(LA106_0 >= KW_EXTERNAL && LA106_0 <= KW_FLOAT)||(LA106_0 >= KW_FOR && LA106_0 <= KW_FORMATTED)||LA106_0==KW_FULL||(LA106_0 >= KW_FUNCTIONS && LA106_0 <= KW_GROUPING)||(LA106_0 >= KW_HOUR && LA106_0 <= KW_IDXPROPERTIES)||(LA106_0 >= KW_IMPORT && LA106_0 <= KW_INTERSECT)||(LA106_0 >= KW_INTO && LA106_0 <= KW_JAR)||(LA106_0 >= KW_KEY && LA106_0 <= KW_LEFT)||(LA106_0 >= KW_LEVEL && LA106_0 <= KW_LONG)||(LA106_0 >= KW_MAPJOIN && LA106_0 <= KW_MONTH)||(LA106_0 >= KW_MSCK && LA106_0 <= KW_NOSCAN)||(LA106_0 >= KW_NOVALIDATE && LA106_0 <= KW_OFFSET)||LA106_0==KW_OPTION||(LA106_0 >= KW_ORDER && LA106_0 <= KW_OUTPUTFORMAT)||(LA106_0 >= KW_OVERWRITE && LA106_0 <= KW_OWNER)||(LA106_0 >= KW_PARTITION && LA106_0 <= KW_PLUS)||(LA106_0 >= KW_PRETTY && LA106_0 <= KW_RECORDWRITER)||(LA106_0 >= KW_REFERENCES && LA106_0 <= KW_ROLES)||(LA106_0 >= KW_ROLLUP && LA106_0 <= KW_SECOND)||(LA106_0 >= KW_SEMI && LA106_0 <= KW_SSL)||(LA106_0 >= KW_STATISTICS && LA106_0 <= KW_TABLES)||(LA106_0 >= KW_TBLPROPERTIES && LA106_0 <= KW_TERMINATED)||(LA106_0 >= KW_TIMESTAMP && LA106_0 <= KW_TRANSACTIONS)||(LA106_0 >= KW_TRIGGER && LA106_0 <= KW_UNARCHIVE)||(LA106_0 >= KW_UNDO && LA106_0 <= KW_UNIONTYPE)||(LA106_0 >= KW_UNLOCK && LA106_0 <= KW_VALUE_TYPE)||LA106_0==KW_VIEW||LA106_0==KW_WHILE||(LA106_0 >= KW_WITH && LA106_0 <= KW_YEAR)||LA106_0==KW_HOLD_DDLTIME||LA106_0==KW_IGNORE||LA106_0==KW_NO_DROP||LA106_0==KW_OFFLINE||LA106_0==KW_PROTECTION||LA106_0==KW_READONLY) ) {
				alt106=1;
			}
			switch (alt106) {
				case 1 :
					// grammar/HiveParser.g:1404:33: extColumnName
					{
					pushFollow(FOLLOW_extColumnName_in_tabPartColTypeExpr6607);
					extColumnName382=extColumnName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_extColumnName.add(extColumnName382.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: extColumnName, tableName, partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1404:48: -> ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? )
			{
				// grammar/HiveParser.g:1404:51: ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// grammar/HiveParser.g:1404:75: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				// grammar/HiveParser.g:1404:90: ( extColumnName )?
				if ( stream_extColumnName.hasNext() ) {
					adaptor.addChild(root_1, stream_extColumnName.nextTree());
				}
				stream_extColumnName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tabPartColTypeExpr"


	public static class descStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "descStatement"
	// grammar/HiveParser.g:1407:1: descStatement : ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) ) ;
	public final HiveParser.descStatement_return descStatement() throws RecognitionException {
		HiveParser.descStatement_return retval = new HiveParser.descStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token descOptions=null;
		Token KW_DESCRIBE383=null;
		Token KW_DESC384=null;
		Token KW_DATABASE385=null;
		Token KW_SCHEMA386=null;
		Token KW_EXTENDED387=null;
		Token KW_FUNCTION388=null;
		Token KW_EXTENDED389=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope parttype =null;

		CommonTree descOptions_tree=null;
		CommonTree KW_DESCRIBE383_tree=null;
		CommonTree KW_DESC384_tree=null;
		CommonTree KW_DATABASE385_tree=null;
		CommonTree KW_SCHEMA386_tree=null;
		CommonTree KW_EXTENDED387_tree=null;
		CommonTree KW_FUNCTION388_tree=null;
		CommonTree KW_EXTENDED389_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_PRETTY=new RewriteRuleTokenStream(adaptor,"token KW_PRETTY");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
		RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
		RewriteRuleTokenStream stream_KW_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token KW_DESCRIBE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tabPartColTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabPartColTypeExpr");
		RewriteRuleSubtreeStream stream_descFuncNames=new RewriteRuleSubtreeStream(adaptor,"rule descFuncNames");

		 pushMsg("describe statement", state); 
		try {
			// grammar/HiveParser.g:1410:5: ( ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) ) )
			// grammar/HiveParser.g:1411:5: ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) )
			{
			// grammar/HiveParser.g:1411:5: ( KW_DESCRIBE | KW_DESC )
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==KW_DESCRIBE) ) {
				alt107=1;
			}
			else if ( (LA107_0==KW_DESC) ) {
				alt107=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 107, 0, input);
				throw nvae;
			}

			switch (alt107) {
				case 1 :
					// grammar/HiveParser.g:1411:6: KW_DESCRIBE
					{
					KW_DESCRIBE383=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement6654); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DESCRIBE.add(KW_DESCRIBE383);

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1411:18: KW_DESC
					{
					KW_DESC384=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement6656); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DESC.add(KW_DESC384);

					}
					break;

			}

			// grammar/HiveParser.g:1412:5: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) )
			int alt112=4;
			alt112 = dfa112.predict(input);
			switch (alt112) {
				case 1 :
					// grammar/HiveParser.g:1413:5: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier )
					{
					// grammar/HiveParser.g:1413:32: ( KW_DATABASE | KW_SCHEMA )
					int alt108=2;
					int LA108_0 = input.LA(1);
					if ( (LA108_0==KW_DATABASE) ) {
						alt108=1;
					}
					else if ( (LA108_0==KW_SCHEMA) ) {
						alt108=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 108, 0, input);
						throw nvae;
					}

					switch (alt108) {
						case 1 :
							// grammar/HiveParser.g:1413:33: KW_DATABASE
							{
							KW_DATABASE385=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_descStatement6678); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE385);

							}
							break;
						case 2 :
							// grammar/HiveParser.g:1413:45: KW_SCHEMA
							{
							KW_SCHEMA386=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_descStatement6680); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA386);

							}
							break;

					}

					// grammar/HiveParser.g:1413:56: ( KW_EXTENDED )?
					int alt109=2;
					int LA109_0 = input.LA(1);
					if ( (LA109_0==KW_EXTENDED) ) {
						alt109=1;
					}
					switch (alt109) {
						case 1 :
							// grammar/HiveParser.g:1413:56: KW_EXTENDED
							{
							KW_EXTENDED387=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement6683); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED387);

							}
							break;

					}

					// grammar/HiveParser.g:1413:69: (dbName= identifier )
					// grammar/HiveParser.g:1413:70: dbName= identifier
					{
					pushFollow(FOLLOW_identifier_in_descStatement6689);
					dbName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
					}

					// AST REWRITE
					// elements: dbName, KW_EXTENDED
					// token labels: 
					// rule labels: dbName, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1413:89: -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
					{
						// grammar/HiveParser.g:1413:92: ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESCDATABASE, "TOK_DESCDATABASE"), root_1);
						adaptor.addChild(root_1, stream_dbName.nextTree());
						// grammar/HiveParser.g:1413:119: ( KW_EXTENDED )?
						if ( stream_KW_EXTENDED.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_EXTENDED.nextNode());
						}
						stream_KW_EXTENDED.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1415:5: ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames )
					{
					KW_FUNCTION388=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_descStatement6720); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION388);

					// grammar/HiveParser.g:1415:34: ( KW_EXTENDED )?
					int alt110=2;
					int LA110_0 = input.LA(1);
					if ( (LA110_0==KW_EXTENDED) ) {
						alt110=1;
					}
					switch (alt110) {
						case 1 :
							// grammar/HiveParser.g:1415:34: KW_EXTENDED
							{
							KW_EXTENDED389=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement6722); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED389);

							}
							break;

					}

					// grammar/HiveParser.g:1415:47: (name= descFuncNames )
					// grammar/HiveParser.g:1415:48: name= descFuncNames
					{
					pushFollow(FOLLOW_descFuncNames_in_descStatement6728);
					name=descFuncNames();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_descFuncNames.add(name.getTree());
					}

					// AST REWRITE
					// elements: name, KW_EXTENDED
					// token labels: 
					// rule labels: name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1415:68: -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
					{
						// grammar/HiveParser.g:1415:71: ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESCFUNCTION, "TOK_DESCFUNCTION"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						// grammar/HiveParser.g:1415:96: ( KW_EXTENDED )?
						if ( stream_KW_EXTENDED.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_EXTENDED.nextNode());
						}
						stream_KW_EXTENDED.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1417:5: ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr )
					{
					// grammar/HiveParser.g:1417:45: ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr )
					// grammar/HiveParser.g:1417:46: (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr
					{
					// grammar/HiveParser.g:1417:46: (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY )
					int alt111=3;
					switch ( input.LA(1) ) {
					case KW_FORMATTED:
						{
						alt111=1;
						}
						break;
					case KW_EXTENDED:
						{
						alt111=2;
						}
						break;
					case KW_PRETTY:
						{
						alt111=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 111, 0, input);
						throw nvae;
					}
					switch (alt111) {
						case 1 :
							// grammar/HiveParser.g:1417:47: descOptions= KW_FORMATTED
							{
							descOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_descStatement6767); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_FORMATTED.add(descOptions);

							}
							break;
						case 2 :
							// grammar/HiveParser.g:1417:72: descOptions= KW_EXTENDED
							{
							descOptions=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement6771); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_EXTENDED.add(descOptions);

							}
							break;
						case 3 :
							// grammar/HiveParser.g:1417:96: descOptions= KW_PRETTY
							{
							descOptions=(Token)match(input,KW_PRETTY,FOLLOW_KW_PRETTY_in_descStatement6775); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_PRETTY.add(descOptions);

							}
							break;

					}

					pushFollow(FOLLOW_tabPartColTypeExpr_in_descStatement6780);
					parttype=tabPartColTypeExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tabPartColTypeExpr.add(parttype.getTree());
					}

					// AST REWRITE
					// elements: descOptions, parttype
					// token labels: descOptions
					// rule labels: parttype, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_descOptions=new RewriteRuleTokenStream(adaptor,"token descOptions",descOptions);
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1417:148: -> ^( TOK_DESCTABLE $parttype $descOptions)
					{
						// grammar/HiveParser.g:1417:151: ^( TOK_DESCTABLE $parttype $descOptions)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						adaptor.addChild(root_1, stream_descOptions.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// grammar/HiveParser.g:1419:5: parttype= tabPartColTypeExpr
					{
					pushFollow(FOLLOW_tabPartColTypeExpr_in_descStatement6807);
					parttype=tabPartColTypeExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tabPartColTypeExpr.add(parttype.getTree());
					// AST REWRITE
					// elements: parttype
					// token labels: 
					// rule labels: parttype, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1419:33: -> ^( TOK_DESCTABLE $parttype)
					{
						// grammar/HiveParser.g:1419:36: ^( TOK_DESCTABLE $parttype)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "descStatement"


	public static class analyzeStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "analyzeStatement"
	// grammar/HiveParser.g:1423:1: analyzeStatement : KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) ) ;
	public final HiveParser.analyzeStatement_return analyzeStatement() throws RecognitionException {
		HiveParser.analyzeStatement_return retval = new HiveParser.analyzeStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token noscan=null;
		Token partialscan=null;
		Token KW_ANALYZE390=null;
		Token KW_TABLE391=null;
		Token KW_COMPUTE392=null;
		Token KW_STATISTICS393=null;
		Token KW_FOR394=null;
		Token KW_COLUMNS395=null;
		Token KW_CACHE396=null;
		Token KW_METADATA397=null;
		ParserRuleReturnScope parttype =null;
		ParserRuleReturnScope statsColumnName =null;

		CommonTree noscan_tree=null;
		CommonTree partialscan_tree=null;
		CommonTree KW_ANALYZE390_tree=null;
		CommonTree KW_TABLE391_tree=null;
		CommonTree KW_COMPUTE392_tree=null;
		CommonTree KW_STATISTICS393_tree=null;
		CommonTree KW_FOR394_tree=null;
		CommonTree KW_COLUMNS395_tree=null;
		CommonTree KW_CACHE396_tree=null;
		CommonTree KW_METADATA397_tree=null;
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_KW_ANALYZE=new RewriteRuleTokenStream(adaptor,"token KW_ANALYZE");
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_PARTIALSCAN=new RewriteRuleTokenStream(adaptor,"token KW_PARTIALSCAN");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_COMPUTE=new RewriteRuleTokenStream(adaptor,"token KW_COMPUTE");
		RewriteRuleTokenStream stream_KW_METADATA=new RewriteRuleTokenStream(adaptor,"token KW_METADATA");
		RewriteRuleTokenStream stream_KW_NOSCAN=new RewriteRuleTokenStream(adaptor,"token KW_NOSCAN");
		RewriteRuleTokenStream stream_KW_CACHE=new RewriteRuleTokenStream(adaptor,"token KW_CACHE");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg("analyze statement", state); 
		try {
			// grammar/HiveParser.g:1426:5: ( KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) ) )
			// grammar/HiveParser.g:1426:7: KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) )
			{
			KW_ANALYZE390=(Token)match(input,KW_ANALYZE,FOLLOW_KW_ANALYZE_in_analyzeStatement6849); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ANALYZE.add(KW_ANALYZE390);

			KW_TABLE391=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_analyzeStatement6851); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE391);

			// grammar/HiveParser.g:1426:27: (parttype= tableOrPartition )
			// grammar/HiveParser.g:1426:28: parttype= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_analyzeStatement6856);
			parttype=tableOrPartition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableOrPartition.add(parttype.getTree());
			}

			// grammar/HiveParser.g:1427:7: ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) )
			int alt115=2;
			int LA115_0 = input.LA(1);
			if ( (LA115_0==KW_COMPUTE) && (synpred10_HiveParser())) {
				alt115=1;
			}
			else if ( (LA115_0==KW_CACHE) && (synpred11_HiveParser())) {
				alt115=2;
			}

			switch (alt115) {
				case 1 :
					// grammar/HiveParser.g:1428:7: ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )?
					{
					KW_COMPUTE392=(Token)match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_analyzeStatement6879); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMPUTE.add(KW_COMPUTE392);

					KW_STATISTICS393=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_analyzeStatement6881); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS393);

					// grammar/HiveParser.g:1428:48: ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )?
					int alt114=4;
					switch ( input.LA(1) ) {
						case KW_NOSCAN:
							{
							alt114=1;
							}
							break;
						case KW_PARTIALSCAN:
							{
							alt114=2;
							}
							break;
						case KW_FOR:
							{
							alt114=3;
							}
							break;
					}
					switch (alt114) {
						case 1 :
							// grammar/HiveParser.g:1428:49: (noscan= KW_NOSCAN )
							{
							// grammar/HiveParser.g:1428:49: (noscan= KW_NOSCAN )
							// grammar/HiveParser.g:1428:50: noscan= KW_NOSCAN
							{
							noscan=(Token)match(input,KW_NOSCAN,FOLLOW_KW_NOSCAN_in_analyzeStatement6887); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_NOSCAN.add(noscan);

							}

							}
							break;
						case 2 :
							// grammar/HiveParser.g:1428:70: (partialscan= KW_PARTIALSCAN )
							{
							// grammar/HiveParser.g:1428:70: (partialscan= KW_PARTIALSCAN )
							// grammar/HiveParser.g:1428:71: partialscan= KW_PARTIALSCAN
							{
							partialscan=(Token)match(input,KW_PARTIALSCAN,FOLLOW_KW_PARTIALSCAN_in_analyzeStatement6895); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_PARTIALSCAN.add(partialscan);

							}

							}
							break;
						case 3 :
							// grammar/HiveParser.g:1429:57: ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? )
							{
							// grammar/HiveParser.g:1429:57: ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? )
							// grammar/HiveParser.g:1429:58: KW_FOR KW_COLUMNS (statsColumnName= columnNameList )?
							{
							KW_FOR394=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_analyzeStatement6955); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR394);

							KW_COLUMNS395=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_analyzeStatement6957); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS395);

							// grammar/HiveParser.g:1429:76: (statsColumnName= columnNameList )?
							int alt113=2;
							int LA113_0 = input.LA(1);
							if ( ((LA113_0 >= Identifier && LA113_0 <= KW_ANALYZE)||(LA113_0 >= KW_ARCHIVE && LA113_0 <= KW_BY)||LA113_0==KW_CASCADE||LA113_0==KW_CHANGE||(LA113_0 >= KW_CLUSTER && LA113_0 <= KW_COLLECTION)||(LA113_0 >= KW_COLUMNS && LA113_0 <= KW_COMMENT)||(LA113_0 >= KW_COMPACT && LA113_0 <= KW_CONCATENATE)||(LA113_0 >= KW_CONSTRAINT && LA113_0 <= KW_CREATE)||LA113_0==KW_CUBE||(LA113_0 >= KW_CURRENT_DATE && LA113_0 <= KW_DATA)||(LA113_0 >= KW_DATABASES && LA113_0 <= KW_DISABLE)||(LA113_0 >= KW_DISTRIBUTE && LA113_0 <= KW_ELEM_TYPE)||LA113_0==KW_ENABLE||LA113_0==KW_ESCAPED||(LA113_0 >= KW_EXCLUSIVE && LA113_0 <= KW_EXPORT)||(LA113_0 >= KW_EXTERNAL && LA113_0 <= KW_FLOAT)||(LA113_0 >= KW_FOR && LA113_0 <= KW_FORMATTED)||LA113_0==KW_FULL||(LA113_0 >= KW_FUNCTIONS && LA113_0 <= KW_GROUPING)||(LA113_0 >= KW_HOUR && LA113_0 <= KW_IDXPROPERTIES)||(LA113_0 >= KW_IMPORT && LA113_0 <= KW_INTERSECT)||(LA113_0 >= KW_INTO && LA113_0 <= KW_JAR)||(LA113_0 >= KW_KEY && LA113_0 <= KW_LEFT)||(LA113_0 >= KW_LEVEL && LA113_0 <= KW_LONG)||(LA113_0 >= KW_MAPJOIN && LA113_0 <= KW_MONTH)||(LA113_0 >= KW_MSCK && LA113_0 <= KW_NOSCAN)||(LA113_0 >= KW_NOVALIDATE && LA113_0 <= KW_OFFSET)||LA113_0==KW_OPTION||(LA113_0 >= KW_ORDER && LA113_0 <= KW_OUTPUTFORMAT)||(LA113_0 >= KW_OVERWRITE && LA113_0 <= KW_OWNER)||(LA113_0 >= KW_PARTITION && LA113_0 <= KW_PLUS)||(LA113_0 >= KW_PRETTY && LA113_0 <= KW_RECORDWRITER)||(LA113_0 >= KW_REFERENCES && LA113_0 <= KW_ROLES)||(LA113_0 >= KW_ROLLUP && LA113_0 <= KW_SECOND)||(LA113_0 >= KW_SEMI && LA113_0 <= KW_SSL)||(LA113_0 >= KW_STATISTICS && LA113_0 <= KW_TABLES)||(LA113_0 >= KW_TBLPROPERTIES && LA113_0 <= KW_TERMINATED)||(LA113_0 >= KW_TIMESTAMP && LA113_0 <= KW_TRANSACTIONS)||(LA113_0 >= KW_TRIGGER && LA113_0 <= KW_UNARCHIVE)||(LA113_0 >= KW_UNDO && LA113_0 <= KW_UNIONTYPE)||(LA113_0 >= KW_UNLOCK && LA113_0 <= KW_VALUE_TYPE)||LA113_0==KW_VIEW||LA113_0==KW_WHILE||(LA113_0 >= KW_WITH && LA113_0 <= KW_YEAR)||LA113_0==KW_HOLD_DDLTIME||LA113_0==KW_IGNORE||LA113_0==KW_NO_DROP||LA113_0==KW_OFFLINE||LA113_0==KW_PROTECTION||LA113_0==KW_READONLY) ) {
								alt113=1;
							}
							switch (alt113) {
								case 1 :
									// grammar/HiveParser.g:1429:77: statsColumnName= columnNameList
									{
									pushFollow(FOLLOW_columnNameList_in_analyzeStatement6962);
									statsColumnName=columnNameList();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_columnNameList.add(statsColumnName.getTree());
									}
									break;

							}

							}

							}
							break;

					}

					// AST REWRITE
					// elements: partialscan, KW_COLUMNS, noscan, parttype, statsColumnName
					// token labels: partialscan, noscan
					// rule labels: statsColumnName, parttype, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_partialscan=new RewriteRuleTokenStream(adaptor,"token partialscan",partialscan);
					RewriteRuleTokenStream stream_noscan=new RewriteRuleTokenStream(adaptor,"token noscan",noscan);
					RewriteRuleSubtreeStream stream_statsColumnName=new RewriteRuleSubtreeStream(adaptor,"rule statsColumnName",statsColumnName!=null?statsColumnName.getTree():null);
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1430:7: -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? )
					{
						// grammar/HiveParser.g:1430:10: ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ANALYZE, "TOK_ANALYZE"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						// grammar/HiveParser.g:1430:35: ( $noscan)?
						if ( stream_noscan.hasNext() ) {
							adaptor.addChild(root_1, stream_noscan.nextNode());
						}
						stream_noscan.reset();

						// grammar/HiveParser.g:1430:44: ( $partialscan)?
						if ( stream_partialscan.hasNext() ) {
							adaptor.addChild(root_1, stream_partialscan.nextNode());
						}
						stream_partialscan.reset();

						// grammar/HiveParser.g:1430:57: ( KW_COLUMNS )?
						if ( stream_KW_COLUMNS.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_COLUMNS.nextNode());
						}
						stream_KW_COLUMNS.reset();

						// grammar/HiveParser.g:1430:70: ( $statsColumnName)?
						if ( stream_statsColumnName.hasNext() ) {
							adaptor.addChild(root_1, stream_statsColumnName.nextTree());
						}
						stream_statsColumnName.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1432:7: ( KW_CACHE )=> KW_CACHE KW_METADATA
					{
					KW_CACHE396=(Token)match(input,KW_CACHE,FOLLOW_KW_CACHE_in_analyzeStatement7019); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CACHE.add(KW_CACHE396);

					KW_METADATA397=(Token)match(input,KW_METADATA,FOLLOW_KW_METADATA_in_analyzeStatement7021); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_METADATA.add(KW_METADATA397);

					// AST REWRITE
					// elements: parttype
					// token labels: 
					// rule labels: parttype, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1432:42: -> ^( TOK_CACHE_METADATA $parttype)
					{
						// grammar/HiveParser.g:1432:45: ^( TOK_CACHE_METADATA $parttype)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CACHE_METADATA, "TOK_CACHE_METADATA"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "analyzeStatement"


	public static class showStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showStatement"
	// grammar/HiveParser.g:1436:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWCOLUMNS tableName ( $db_name)? ) | KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? ) | KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ) | KW_SHOW KW_CREATE ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? ) | KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) | KW_SHOW KW_COMPACTIONS -> ^( TOK_SHOW_COMPACTIONS ) | KW_SHOW KW_TRANSACTIONS -> ^( TOK_SHOW_TRANSACTIONS ) | KW_SHOW KW_CONF StringLiteral -> ^( TOK_SHOWCONF StringLiteral ) );
	public final HiveParser.showStatement_return showStatement() throws RecognitionException {
		HiveParser.showStatement_return retval = new HiveParser.showStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token prptyName=null;
		Token dbName=null;
		Token isExtended=null;
		Token showOptions=null;
		Token KW_SHOW398=null;
		Token KW_DATABASES399=null;
		Token KW_SCHEMAS400=null;
		Token KW_LIKE401=null;
		Token KW_SHOW403=null;
		Token KW_TABLES404=null;
		Token KW_FROM405=null;
		Token KW_IN406=null;
		Token KW_LIKE407=null;
		Token KW_SHOW410=null;
		Token KW_COLUMNS411=null;
		Token KW_FROM412=null;
		Token KW_IN413=null;
		Token KW_FROM415=null;
		Token KW_IN416=null;
		Token KW_SHOW417=null;
		Token KW_FUNCTIONS418=null;
		Token KW_LIKE419=null;
		Token KW_SHOW422=null;
		Token KW_PARTITIONS423=null;
		Token KW_SHOW425=null;
		Token KW_CREATE426=null;
		Token KW_DATABASE427=null;
		Token KW_SCHEMA428=null;
		Token KW_TABLE429=null;
		Token KW_SHOW430=null;
		Token KW_TABLE431=null;
		Token KW_EXTENDED432=null;
		Token KW_FROM433=null;
		Token KW_IN434=null;
		Token KW_LIKE435=null;
		Token KW_SHOW438=null;
		Token KW_TBLPROPERTIES439=null;
		Token LPAREN441=null;
		Token RPAREN442=null;
		Token KW_SHOW443=null;
		Token KW_LOCKS444=null;
		Token KW_DATABASE445=null;
		Token KW_SCHEMA446=null;
		Token KW_SHOW447=null;
		Token KW_INDEX448=null;
		Token KW_INDEXES449=null;
		Token KW_ON450=null;
		Token KW_FROM452=null;
		Token KW_IN453=null;
		Token KW_SHOW454=null;
		Token KW_COMPACTIONS455=null;
		Token KW_SHOW456=null;
		Token KW_TRANSACTIONS457=null;
		Token KW_SHOW458=null;
		Token KW_CONF459=null;
		Token StringLiteral460=null;
		ParserRuleReturnScope db_name =null;
		ParserRuleReturnScope tabName =null;
		ParserRuleReturnScope parttype =null;
		ParserRuleReturnScope showStmtIdentifier402 =null;
		ParserRuleReturnScope showStmtIdentifier408 =null;
		ParserRuleReturnScope showStmtIdentifier409 =null;
		ParserRuleReturnScope tableName414 =null;
		ParserRuleReturnScope showFunctionIdentifier420 =null;
		ParserRuleReturnScope showFunctionIdentifier421 =null;
		ParserRuleReturnScope partitionSpec424 =null;
		ParserRuleReturnScope showStmtIdentifier436 =null;
		ParserRuleReturnScope partitionSpec437 =null;
		ParserRuleReturnScope tableName440 =null;
		ParserRuleReturnScope showStmtIdentifier451 =null;

		CommonTree prptyName_tree=null;
		CommonTree dbName_tree=null;
		CommonTree isExtended_tree=null;
		CommonTree showOptions_tree=null;
		CommonTree KW_SHOW398_tree=null;
		CommonTree KW_DATABASES399_tree=null;
		CommonTree KW_SCHEMAS400_tree=null;
		CommonTree KW_LIKE401_tree=null;
		CommonTree KW_SHOW403_tree=null;
		CommonTree KW_TABLES404_tree=null;
		CommonTree KW_FROM405_tree=null;
		CommonTree KW_IN406_tree=null;
		CommonTree KW_LIKE407_tree=null;
		CommonTree KW_SHOW410_tree=null;
		CommonTree KW_COLUMNS411_tree=null;
		CommonTree KW_FROM412_tree=null;
		CommonTree KW_IN413_tree=null;
		CommonTree KW_FROM415_tree=null;
		CommonTree KW_IN416_tree=null;
		CommonTree KW_SHOW417_tree=null;
		CommonTree KW_FUNCTIONS418_tree=null;
		CommonTree KW_LIKE419_tree=null;
		CommonTree KW_SHOW422_tree=null;
		CommonTree KW_PARTITIONS423_tree=null;
		CommonTree KW_SHOW425_tree=null;
		CommonTree KW_CREATE426_tree=null;
		CommonTree KW_DATABASE427_tree=null;
		CommonTree KW_SCHEMA428_tree=null;
		CommonTree KW_TABLE429_tree=null;
		CommonTree KW_SHOW430_tree=null;
		CommonTree KW_TABLE431_tree=null;
		CommonTree KW_EXTENDED432_tree=null;
		CommonTree KW_FROM433_tree=null;
		CommonTree KW_IN434_tree=null;
		CommonTree KW_LIKE435_tree=null;
		CommonTree KW_SHOW438_tree=null;
		CommonTree KW_TBLPROPERTIES439_tree=null;
		CommonTree LPAREN441_tree=null;
		CommonTree RPAREN442_tree=null;
		CommonTree KW_SHOW443_tree=null;
		CommonTree KW_LOCKS444_tree=null;
		CommonTree KW_DATABASE445_tree=null;
		CommonTree KW_SCHEMA446_tree=null;
		CommonTree KW_SHOW447_tree=null;
		CommonTree KW_INDEX448_tree=null;
		CommonTree KW_INDEXES449_tree=null;
		CommonTree KW_ON450_tree=null;
		CommonTree KW_FROM452_tree=null;
		CommonTree KW_IN453_tree=null;
		CommonTree KW_SHOW454_tree=null;
		CommonTree KW_COMPACTIONS455_tree=null;
		CommonTree KW_SHOW456_tree=null;
		CommonTree KW_TRANSACTIONS457_tree=null;
		CommonTree KW_SHOW458_tree=null;
		CommonTree KW_CONF459_tree=null;
		CommonTree StringLiteral460_tree=null;
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
		RewriteRuleTokenStream stream_KW_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONS");
		RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
		RewriteRuleTokenStream stream_KW_LOCKS=new RewriteRuleTokenStream(adaptor,"token KW_LOCKS");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_TABLES=new RewriteRuleTokenStream(adaptor,"token KW_TABLES");
		RewriteRuleTokenStream stream_KW_FUNCTIONS=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTIONS");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
		RewriteRuleTokenStream stream_KW_CONF=new RewriteRuleTokenStream(adaptor,"token KW_CONF");
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_KW_TRANSACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTIONS");
		RewriteRuleTokenStream stream_KW_SCHEMAS=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMAS");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_COMPACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_COMPACTIONS");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_DATABASES=new RewriteRuleTokenStream(adaptor,"token KW_DATABASES");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INDEXES=new RewriteRuleTokenStream(adaptor,"token KW_INDEXES");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleSubtreeStream stream_showStmtIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showStmtIdentifier");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_showFunctionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showFunctionIdentifier");
		RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("show statement", state); 
		try {
			// grammar/HiveParser.g:1439:5: ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWCOLUMNS tableName ( $db_name)? ) | KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? ) | KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ) | KW_SHOW KW_CREATE ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? ) | KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) | KW_SHOW KW_COMPACTIONS -> ^( TOK_SHOW_COMPACTIONS ) | KW_SHOW KW_TRANSACTIONS -> ^( TOK_SHOW_TRANSACTIONS ) | KW_SHOW KW_CONF StringLiteral -> ^( TOK_SHOWCONF StringLiteral ) )
			int alt141=13;
			int LA141_0 = input.LA(1);
			if ( (LA141_0==KW_SHOW) ) {
				switch ( input.LA(2) ) {
				case KW_TABLES:
					{
					alt141=2;
					}
					break;
				case KW_COLUMNS:
					{
					alt141=3;
					}
					break;
				case KW_FUNCTIONS:
					{
					alt141=4;
					}
					break;
				case KW_PARTITIONS:
					{
					alt141=5;
					}
					break;
				case KW_CREATE:
					{
					alt141=6;
					}
					break;
				case KW_TABLE:
					{
					alt141=7;
					}
					break;
				case KW_TBLPROPERTIES:
					{
					alt141=8;
					}
					break;
				case KW_LOCKS:
					{
					alt141=9;
					}
					break;
				case KW_COMPACTIONS:
					{
					alt141=11;
					}
					break;
				case KW_TRANSACTIONS:
					{
					alt141=12;
					}
					break;
				case KW_CONF:
					{
					alt141=13;
					}
					break;
				case KW_DATABASES:
				case KW_SCHEMAS:
					{
					alt141=1;
					}
					break;
				case KW_FORMATTED:
				case KW_INDEX:
				case KW_INDEXES:
					{
					alt141=10;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 141, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 141, 0, input);
				throw nvae;
			}

			switch (alt141) {
				case 1 :
					// grammar/HiveParser.g:1439:7: KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )?
					{
					KW_SHOW398=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7065); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW398);

					// grammar/HiveParser.g:1439:15: ( KW_DATABASES | KW_SCHEMAS )
					int alt116=2;
					int LA116_0 = input.LA(1);
					if ( (LA116_0==KW_DATABASES) ) {
						alt116=1;
					}
					else if ( (LA116_0==KW_SCHEMAS) ) {
						alt116=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 116, 0, input);
						throw nvae;
					}

					switch (alt116) {
						case 1 :
							// grammar/HiveParser.g:1439:16: KW_DATABASES
							{
							KW_DATABASES399=(Token)match(input,KW_DATABASES,FOLLOW_KW_DATABASES_in_showStatement7068); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASES.add(KW_DATABASES399);

							}
							break;
						case 2 :
							// grammar/HiveParser.g:1439:29: KW_SCHEMAS
							{
							KW_SCHEMAS400=(Token)match(input,KW_SCHEMAS,FOLLOW_KW_SCHEMAS_in_showStatement7070); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMAS.add(KW_SCHEMAS400);

							}
							break;

					}

					// grammar/HiveParser.g:1439:41: ( KW_LIKE showStmtIdentifier )?
					int alt117=2;
					int LA117_0 = input.LA(1);
					if ( (LA117_0==KW_LIKE) ) {
						alt117=1;
					}
					switch (alt117) {
						case 1 :
							// grammar/HiveParser.g:1439:42: KW_LIKE showStmtIdentifier
							{
							KW_LIKE401=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7074); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE401);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7076);
							showStmtIdentifier402=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier402.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1439:71: -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
					{
						// grammar/HiveParser.g:1439:74: ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWDATABASES, "TOK_SHOWDATABASES"), root_1);
						// grammar/HiveParser.g:1439:94: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1440:7: KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					{
					KW_SHOW403=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7095); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW403);

					KW_TABLES404=(Token)match(input,KW_TABLES,FOLLOW_KW_TABLES_in_showStatement7097); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLES.add(KW_TABLES404);

					// grammar/HiveParser.g:1440:25: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt119=2;
					int LA119_0 = input.LA(1);
					if ( (LA119_0==KW_FROM) ) {
						alt119=1;
					}
					else if ( (LA119_0==KW_IN) ) {
						int LA119_2 = input.LA(2);
						if ( ((LA119_2 >= Identifier && LA119_2 <= KW_ANALYZE)||(LA119_2 >= KW_ARCHIVE && LA119_2 <= KW_BY)||LA119_2==KW_CASCADE||LA119_2==KW_CHANGE||(LA119_2 >= KW_CLUSTER && LA119_2 <= KW_COLLECTION)||(LA119_2 >= KW_COLUMNS && LA119_2 <= KW_COMMENT)||(LA119_2 >= KW_COMPACT && LA119_2 <= KW_CONCATENATE)||(LA119_2 >= KW_CONSTRAINT && LA119_2 <= KW_CREATE)||LA119_2==KW_CUBE||(LA119_2 >= KW_CURRENT_DATE && LA119_2 <= KW_DATA)||(LA119_2 >= KW_DATABASES && LA119_2 <= KW_DISABLE)||(LA119_2 >= KW_DISTRIBUTE && LA119_2 <= KW_ELEM_TYPE)||LA119_2==KW_ENABLE||LA119_2==KW_ESCAPED||(LA119_2 >= KW_EXCLUSIVE && LA119_2 <= KW_EXPORT)||(LA119_2 >= KW_EXTERNAL && LA119_2 <= KW_FLOAT)||(LA119_2 >= KW_FOR && LA119_2 <= KW_FORMATTED)||LA119_2==KW_FULL||(LA119_2 >= KW_FUNCTIONS && LA119_2 <= KW_GROUPING)||(LA119_2 >= KW_HOUR && LA119_2 <= KW_IDXPROPERTIES)||(LA119_2 >= KW_IMPORT && LA119_2 <= KW_INTERSECT)||(LA119_2 >= KW_INTO && LA119_2 <= KW_JAR)||(LA119_2 >= KW_KEY && LA119_2 <= KW_LEFT)||(LA119_2 >= KW_LEVEL && LA119_2 <= KW_LONG)||(LA119_2 >= KW_MAPJOIN && LA119_2 <= KW_MONTH)||(LA119_2 >= KW_MSCK && LA119_2 <= KW_NOSCAN)||(LA119_2 >= KW_NOVALIDATE && LA119_2 <= KW_OFFSET)||LA119_2==KW_OPTION||(LA119_2 >= KW_ORDER && LA119_2 <= KW_OUTPUTFORMAT)||(LA119_2 >= KW_OVERWRITE && LA119_2 <= KW_OWNER)||(LA119_2 >= KW_PARTITION && LA119_2 <= KW_PLUS)||(LA119_2 >= KW_PRETTY && LA119_2 <= KW_RECORDWRITER)||(LA119_2 >= KW_REFERENCES && LA119_2 <= KW_ROLES)||(LA119_2 >= KW_ROLLUP && LA119_2 <= KW_SECOND)||(LA119_2 >= KW_SEMI && LA119_2 <= KW_SSL)||(LA119_2 >= KW_STATISTICS && LA119_2 <= KW_TABLES)||(LA119_2 >= KW_TBLPROPERTIES && LA119_2 <= KW_TERMINATED)||(LA119_2 >= KW_TIMESTAMP && LA119_2 <= KW_TRANSACTIONS)||(LA119_2 >= KW_TRIGGER && LA119_2 <= KW_UNARCHIVE)||(LA119_2 >= KW_UNDO && LA119_2 <= KW_UNIONTYPE)||(LA119_2 >= KW_UNLOCK && LA119_2 <= KW_VALUE_TYPE)||LA119_2==KW_VIEW||LA119_2==KW_WHILE||(LA119_2 >= KW_WITH && LA119_2 <= KW_YEAR)||LA119_2==KW_HOLD_DDLTIME||LA119_2==KW_IGNORE||LA119_2==KW_NO_DROP||LA119_2==KW_OFFLINE||LA119_2==KW_PROTECTION||LA119_2==KW_READONLY) ) {
							alt119=1;
						}
					}
					switch (alt119) {
						case 1 :
							// grammar/HiveParser.g:1440:26: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// grammar/HiveParser.g:1440:26: ( KW_FROM | KW_IN )
							int alt118=2;
							int LA118_0 = input.LA(1);
							if ( (LA118_0==KW_FROM) ) {
								alt118=1;
							}
							else if ( (LA118_0==KW_IN) ) {
								alt118=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 118, 0, input);
								throw nvae;
							}

							switch (alt118) {
								case 1 :
									// grammar/HiveParser.g:1440:27: KW_FROM
									{
									KW_FROM405=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7101); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM405);

									}
									break;
								case 2 :
									// grammar/HiveParser.g:1440:35: KW_IN
									{
									KW_IN406=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7103); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN406);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement7108);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:1440:63: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					int alt120=3;
					int LA120_0 = input.LA(1);
					if ( (LA120_0==KW_LIKE) ) {
						int LA120_1 = input.LA(2);
						if ( ((LA120_1 >= Identifier && LA120_1 <= KW_ANALYZE)||(LA120_1 >= KW_ARCHIVE && LA120_1 <= KW_BY)||LA120_1==KW_CASCADE||LA120_1==KW_CHANGE||(LA120_1 >= KW_CLUSTER && LA120_1 <= KW_COLLECTION)||(LA120_1 >= KW_COLUMNS && LA120_1 <= KW_COMMENT)||(LA120_1 >= KW_COMPACT && LA120_1 <= KW_CONCATENATE)||(LA120_1 >= KW_CONSTRAINT && LA120_1 <= KW_CREATE)||LA120_1==KW_CUBE||(LA120_1 >= KW_CURRENT_DATE && LA120_1 <= KW_DATA)||(LA120_1 >= KW_DATABASES && LA120_1 <= KW_DISABLE)||(LA120_1 >= KW_DISTRIBUTE && LA120_1 <= KW_ELEM_TYPE)||LA120_1==KW_ENABLE||LA120_1==KW_ESCAPED||(LA120_1 >= KW_EXCLUSIVE && LA120_1 <= KW_EXPORT)||(LA120_1 >= KW_EXTERNAL && LA120_1 <= KW_FLOAT)||(LA120_1 >= KW_FOR && LA120_1 <= KW_FORMATTED)||LA120_1==KW_FULL||(LA120_1 >= KW_FUNCTIONS && LA120_1 <= KW_GROUPING)||(LA120_1 >= KW_HOUR && LA120_1 <= KW_IDXPROPERTIES)||(LA120_1 >= KW_IMPORT && LA120_1 <= KW_INTERSECT)||(LA120_1 >= KW_INTO && LA120_1 <= KW_JAR)||(LA120_1 >= KW_KEY && LA120_1 <= KW_LEFT)||(LA120_1 >= KW_LEVEL && LA120_1 <= KW_LONG)||(LA120_1 >= KW_MAPJOIN && LA120_1 <= KW_MONTH)||(LA120_1 >= KW_MSCK && LA120_1 <= KW_NOSCAN)||(LA120_1 >= KW_NOVALIDATE && LA120_1 <= KW_OFFSET)||LA120_1==KW_OPTION||(LA120_1 >= KW_ORDER && LA120_1 <= KW_OUTPUTFORMAT)||(LA120_1 >= KW_OVERWRITE && LA120_1 <= KW_OWNER)||(LA120_1 >= KW_PARTITION && LA120_1 <= KW_PLUS)||(LA120_1 >= KW_PRETTY && LA120_1 <= KW_RECORDWRITER)||(LA120_1 >= KW_REFERENCES && LA120_1 <= KW_ROLES)||(LA120_1 >= KW_ROLLUP && LA120_1 <= KW_SECOND)||(LA120_1 >= KW_SEMI && LA120_1 <= KW_SSL)||(LA120_1 >= KW_STATISTICS && LA120_1 <= KW_TABLES)||(LA120_1 >= KW_TBLPROPERTIES && LA120_1 <= KW_TERMINATED)||(LA120_1 >= KW_TIMESTAMP && LA120_1 <= KW_TRANSACTIONS)||(LA120_1 >= KW_TRIGGER && LA120_1 <= KW_UNARCHIVE)||(LA120_1 >= KW_UNDO && LA120_1 <= KW_UNIONTYPE)||(LA120_1 >= KW_UNLOCK && LA120_1 <= KW_VALUE_TYPE)||LA120_1==KW_VIEW||LA120_1==KW_WHILE||(LA120_1 >= KW_WITH && LA120_1 <= KW_YEAR)||LA120_1==StringLiteral||LA120_1==KW_HOLD_DDLTIME||LA120_1==KW_IGNORE||LA120_1==KW_NO_DROP||LA120_1==KW_OFFLINE||LA120_1==KW_PROTECTION||LA120_1==KW_READONLY) ) {
							alt120=1;
						}
						else if ( (LA120_1==EOF) ) {
							alt120=2;
						}
					}
					else if ( ((LA120_0 >= Identifier && LA120_0 <= KW_ANALYZE)||(LA120_0 >= KW_ARCHIVE && LA120_0 <= KW_BY)||LA120_0==KW_CASCADE||LA120_0==KW_CHANGE||(LA120_0 >= KW_CLUSTER && LA120_0 <= KW_COLLECTION)||(LA120_0 >= KW_COLUMNS && LA120_0 <= KW_COMMENT)||(LA120_0 >= KW_COMPACT && LA120_0 <= KW_CONCATENATE)||(LA120_0 >= KW_CONSTRAINT && LA120_0 <= KW_CREATE)||LA120_0==KW_CUBE||(LA120_0 >= KW_CURRENT_DATE && LA120_0 <= KW_DATA)||(LA120_0 >= KW_DATABASES && LA120_0 <= KW_DISABLE)||(LA120_0 >= KW_DISTRIBUTE && LA120_0 <= KW_ELEM_TYPE)||LA120_0==KW_ENABLE||LA120_0==KW_ESCAPED||(LA120_0 >= KW_EXCLUSIVE && LA120_0 <= KW_EXPORT)||(LA120_0 >= KW_EXTERNAL && LA120_0 <= KW_FLOAT)||(LA120_0 >= KW_FOR && LA120_0 <= KW_FORMATTED)||LA120_0==KW_FULL||(LA120_0 >= KW_FUNCTIONS && LA120_0 <= KW_GROUPING)||(LA120_0 >= KW_HOUR && LA120_0 <= KW_IDXPROPERTIES)||(LA120_0 >= KW_IMPORT && LA120_0 <= KW_INTERSECT)||(LA120_0 >= KW_INTO && LA120_0 <= KW_JAR)||(LA120_0 >= KW_KEY && LA120_0 <= KW_LEFT)||LA120_0==KW_LEVEL||(LA120_0 >= KW_LIMIT && LA120_0 <= KW_LONG)||(LA120_0 >= KW_MAPJOIN && LA120_0 <= KW_MONTH)||(LA120_0 >= KW_MSCK && LA120_0 <= KW_NOSCAN)||(LA120_0 >= KW_NOVALIDATE && LA120_0 <= KW_OFFSET)||LA120_0==KW_OPTION||(LA120_0 >= KW_ORDER && LA120_0 <= KW_OUTPUTFORMAT)||(LA120_0 >= KW_OVERWRITE && LA120_0 <= KW_OWNER)||(LA120_0 >= KW_PARTITION && LA120_0 <= KW_PLUS)||(LA120_0 >= KW_PRETTY && LA120_0 <= KW_RECORDWRITER)||(LA120_0 >= KW_REFERENCES && LA120_0 <= KW_ROLES)||(LA120_0 >= KW_ROLLUP && LA120_0 <= KW_SECOND)||(LA120_0 >= KW_SEMI && LA120_0 <= KW_SSL)||(LA120_0 >= KW_STATISTICS && LA120_0 <= KW_TABLES)||(LA120_0 >= KW_TBLPROPERTIES && LA120_0 <= KW_TERMINATED)||(LA120_0 >= KW_TIMESTAMP && LA120_0 <= KW_TRANSACTIONS)||(LA120_0 >= KW_TRIGGER && LA120_0 <= KW_UNARCHIVE)||(LA120_0 >= KW_UNDO && LA120_0 <= KW_UNIONTYPE)||(LA120_0 >= KW_UNLOCK && LA120_0 <= KW_VALUE_TYPE)||LA120_0==KW_VIEW||LA120_0==KW_WHILE||(LA120_0 >= KW_WITH && LA120_0 <= KW_YEAR)||LA120_0==StringLiteral||LA120_0==KW_HOLD_DDLTIME||LA120_0==KW_IGNORE||LA120_0==KW_NO_DROP||LA120_0==KW_OFFLINE||LA120_0==KW_PROTECTION||LA120_0==KW_READONLY) ) {
						alt120=2;
					}
					switch (alt120) {
						case 1 :
							// grammar/HiveParser.g:1440:64: KW_LIKE showStmtIdentifier
							{
							KW_LIKE407=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7113); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE407);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7115);
							showStmtIdentifier408=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier408.getTree());
							}
							break;
						case 2 :
							// grammar/HiveParser.g:1440:91: showStmtIdentifier
							{
							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7117);
							showStmtIdentifier409=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier409.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier, db_name
					// token labels: 
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1440:113: -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
					{
						// grammar/HiveParser.g:1440:116: ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWTABLES, "TOK_SHOWTABLES"), root_1);
						// grammar/HiveParser.g:1440:133: ( TOK_FROM $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_FROM, "TOK_FROM"));
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						// grammar/HiveParser.g:1440:154: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1441:7: KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )?
					{
					KW_SHOW410=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7145); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW410);

					KW_COLUMNS411=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_showStatement7147); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS411);

					// grammar/HiveParser.g:1441:26: ( KW_FROM | KW_IN )
					int alt121=2;
					int LA121_0 = input.LA(1);
					if ( (LA121_0==KW_FROM) ) {
						alt121=1;
					}
					else if ( (LA121_0==KW_IN) ) {
						alt121=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 121, 0, input);
						throw nvae;
					}

					switch (alt121) {
						case 1 :
							// grammar/HiveParser.g:1441:27: KW_FROM
							{
							KW_FROM412=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7150); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM412);

							}
							break;
						case 2 :
							// grammar/HiveParser.g:1441:35: KW_IN
							{
							KW_IN413=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7152); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN413);

							}
							break;

					}

					pushFollow(FOLLOW_tableName_in_showStatement7155);
					tableName414=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName414.getTree());
					// grammar/HiveParser.g:1441:52: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt123=2;
					int LA123_0 = input.LA(1);
					if ( (LA123_0==KW_FROM||LA123_0==KW_IN) ) {
						alt123=1;
					}
					switch (alt123) {
						case 1 :
							// grammar/HiveParser.g:1441:53: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// grammar/HiveParser.g:1441:53: ( KW_FROM | KW_IN )
							int alt122=2;
							int LA122_0 = input.LA(1);
							if ( (LA122_0==KW_FROM) ) {
								alt122=1;
							}
							else if ( (LA122_0==KW_IN) ) {
								alt122=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 122, 0, input);
								throw nvae;
							}

							switch (alt122) {
								case 1 :
									// grammar/HiveParser.g:1441:54: KW_FROM
									{
									KW_FROM415=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7159); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM415);

									}
									break;
								case 2 :
									// grammar/HiveParser.g:1441:62: KW_IN
									{
									KW_IN416=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7161); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN416);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement7166);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: db_name, tableName
					// token labels: 
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1442:5: -> ^( TOK_SHOWCOLUMNS tableName ( $db_name)? )
					{
						// grammar/HiveParser.g:1442:8: ^( TOK_SHOWCOLUMNS tableName ( $db_name)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWCOLUMNS, "TOK_SHOWCOLUMNS"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						// grammar/HiveParser.g:1442:37: ( $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// grammar/HiveParser.g:1443:7: KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )?
					{
					KW_SHOW417=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7192); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW417);

					KW_FUNCTIONS418=(Token)match(input,KW_FUNCTIONS,FOLLOW_KW_FUNCTIONS_in_showStatement7194); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FUNCTIONS.add(KW_FUNCTIONS418);

					// grammar/HiveParser.g:1443:28: ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )?
					int alt124=3;
					int LA124_0 = input.LA(1);
					if ( (LA124_0==KW_LIKE) ) {
						int LA124_1 = input.LA(2);
						if ( ((LA124_1 >= Identifier && LA124_1 <= KW_ANALYZE)||(LA124_1 >= KW_ARCHIVE && LA124_1 <= KW_BY)||LA124_1==KW_CASCADE||LA124_1==KW_CHANGE||(LA124_1 >= KW_CLUSTER && LA124_1 <= KW_COLLECTION)||(LA124_1 >= KW_COLUMNS && LA124_1 <= KW_COMMENT)||(LA124_1 >= KW_COMPACT && LA124_1 <= KW_CONCATENATE)||(LA124_1 >= KW_CONSTRAINT && LA124_1 <= KW_CREATE)||LA124_1==KW_CUBE||(LA124_1 >= KW_CURRENT_DATE && LA124_1 <= KW_DATA)||(LA124_1 >= KW_DATABASES && LA124_1 <= KW_DISABLE)||(LA124_1 >= KW_DISTRIBUTE && LA124_1 <= KW_ELEM_TYPE)||LA124_1==KW_ENABLE||LA124_1==KW_ESCAPED||(LA124_1 >= KW_EXCLUSIVE && LA124_1 <= KW_EXPORT)||(LA124_1 >= KW_EXTERNAL && LA124_1 <= KW_FLOAT)||(LA124_1 >= KW_FOR && LA124_1 <= KW_FORMATTED)||LA124_1==KW_FULL||(LA124_1 >= KW_FUNCTIONS && LA124_1 <= KW_GROUPING)||(LA124_1 >= KW_HOUR && LA124_1 <= KW_IDXPROPERTIES)||(LA124_1 >= KW_IMPORT && LA124_1 <= KW_INTERSECT)||(LA124_1 >= KW_INTO && LA124_1 <= KW_JAR)||(LA124_1 >= KW_KEY && LA124_1 <= KW_LEFT)||(LA124_1 >= KW_LEVEL && LA124_1 <= KW_LONG)||(LA124_1 >= KW_MAPJOIN && LA124_1 <= KW_MONTH)||(LA124_1 >= KW_MSCK && LA124_1 <= KW_NOSCAN)||(LA124_1 >= KW_NOVALIDATE && LA124_1 <= KW_OFFSET)||LA124_1==KW_OPTION||(LA124_1 >= KW_ORDER && LA124_1 <= KW_OUTPUTFORMAT)||(LA124_1 >= KW_OVERWRITE && LA124_1 <= KW_OWNER)||(LA124_1 >= KW_PARTITION && LA124_1 <= KW_PLUS)||(LA124_1 >= KW_PRETTY && LA124_1 <= KW_RECORDWRITER)||(LA124_1 >= KW_REFERENCES && LA124_1 <= KW_ROLES)||(LA124_1 >= KW_ROLLUP && LA124_1 <= KW_SECOND)||(LA124_1 >= KW_SEMI && LA124_1 <= KW_SSL)||(LA124_1 >= KW_STATISTICS && LA124_1 <= KW_TABLES)||(LA124_1 >= KW_TBLPROPERTIES && LA124_1 <= KW_TERMINATED)||(LA124_1 >= KW_TIMESTAMP && LA124_1 <= KW_TRANSACTIONS)||(LA124_1 >= KW_TRIGGER && LA124_1 <= KW_UNARCHIVE)||(LA124_1 >= KW_UNDO && LA124_1 <= KW_UNIONTYPE)||(LA124_1 >= KW_UNLOCK && LA124_1 <= KW_VALUE_TYPE)||LA124_1==KW_VIEW||LA124_1==KW_WHILE||(LA124_1 >= KW_WITH && LA124_1 <= KW_YEAR)||LA124_1==StringLiteral||LA124_1==KW_HOLD_DDLTIME||LA124_1==KW_IGNORE||LA124_1==KW_NO_DROP||LA124_1==KW_OFFLINE||LA124_1==KW_PROTECTION||LA124_1==KW_READONLY) ) {
							alt124=1;
						}
						else if ( (LA124_1==EOF||LA124_1==DOT) ) {
							alt124=2;
						}
					}
					else if ( ((LA124_0 >= Identifier && LA124_0 <= KW_ANALYZE)||(LA124_0 >= KW_ARCHIVE && LA124_0 <= KW_BY)||LA124_0==KW_CASCADE||LA124_0==KW_CHANGE||(LA124_0 >= KW_CLUSTER && LA124_0 <= KW_COLLECTION)||(LA124_0 >= KW_COLUMNS && LA124_0 <= KW_COMMENT)||(LA124_0 >= KW_COMPACT && LA124_0 <= KW_CONCATENATE)||(LA124_0 >= KW_CONSTRAINT && LA124_0 <= KW_CREATE)||LA124_0==KW_CUBE||(LA124_0 >= KW_CURRENT_DATE && LA124_0 <= KW_DATA)||(LA124_0 >= KW_DATABASES && LA124_0 <= KW_DISABLE)||(LA124_0 >= KW_DISTRIBUTE && LA124_0 <= KW_ELEM_TYPE)||LA124_0==KW_ENABLE||LA124_0==KW_ESCAPED||(LA124_0 >= KW_EXCLUSIVE && LA124_0 <= KW_EXPORT)||(LA124_0 >= KW_EXTERNAL && LA124_0 <= KW_FLOAT)||(LA124_0 >= KW_FOR && LA124_0 <= KW_FORMATTED)||LA124_0==KW_FULL||(LA124_0 >= KW_FUNCTIONS && LA124_0 <= KW_GROUPING)||(LA124_0 >= KW_HOUR && LA124_0 <= KW_IDXPROPERTIES)||(LA124_0 >= KW_IMPORT && LA124_0 <= KW_INTERSECT)||(LA124_0 >= KW_INTO && LA124_0 <= KW_JAR)||(LA124_0 >= KW_KEY && LA124_0 <= KW_LEFT)||LA124_0==KW_LEVEL||(LA124_0 >= KW_LIMIT && LA124_0 <= KW_LONG)||(LA124_0 >= KW_MAPJOIN && LA124_0 <= KW_MONTH)||(LA124_0 >= KW_MSCK && LA124_0 <= KW_NOSCAN)||(LA124_0 >= KW_NOVALIDATE && LA124_0 <= KW_OFFSET)||LA124_0==KW_OPTION||(LA124_0 >= KW_ORDER && LA124_0 <= KW_OUTPUTFORMAT)||(LA124_0 >= KW_OVERWRITE && LA124_0 <= KW_OWNER)||(LA124_0 >= KW_PARTITION && LA124_0 <= KW_PLUS)||(LA124_0 >= KW_PRETTY && LA124_0 <= KW_RECORDWRITER)||(LA124_0 >= KW_REFERENCES && LA124_0 <= KW_ROLES)||(LA124_0 >= KW_ROLLUP && LA124_0 <= KW_SECOND)||(LA124_0 >= KW_SEMI && LA124_0 <= KW_SSL)||(LA124_0 >= KW_STATISTICS && LA124_0 <= KW_TABLES)||(LA124_0 >= KW_TBLPROPERTIES && LA124_0 <= KW_TERMINATED)||(LA124_0 >= KW_TIMESTAMP && LA124_0 <= KW_TRANSACTIONS)||(LA124_0 >= KW_TRIGGER && LA124_0 <= KW_UNARCHIVE)||(LA124_0 >= KW_UNDO && LA124_0 <= KW_UNIONTYPE)||(LA124_0 >= KW_UNLOCK && LA124_0 <= KW_VALUE_TYPE)||LA124_0==KW_VIEW||LA124_0==KW_WHILE||(LA124_0 >= KW_WITH && LA124_0 <= KW_YEAR)||LA124_0==StringLiteral||LA124_0==KW_HOLD_DDLTIME||LA124_0==KW_IGNORE||LA124_0==KW_NO_DROP||LA124_0==KW_OFFLINE||LA124_0==KW_PROTECTION||LA124_0==KW_READONLY) ) {
						alt124=2;
					}
					switch (alt124) {
						case 1 :
							// grammar/HiveParser.g:1443:29: KW_LIKE showFunctionIdentifier
							{
							KW_LIKE419=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7197); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE419);

							pushFollow(FOLLOW_showFunctionIdentifier_in_showStatement7199);
							showFunctionIdentifier420=showFunctionIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showFunctionIdentifier.add(showFunctionIdentifier420.getTree());
							}
							break;
						case 2 :
							// grammar/HiveParser.g:1443:60: showFunctionIdentifier
							{
							pushFollow(FOLLOW_showFunctionIdentifier_in_showStatement7201);
							showFunctionIdentifier421=showFunctionIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showFunctionIdentifier.add(showFunctionIdentifier421.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: KW_LIKE, showFunctionIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1443:86: -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? )
					{
						// grammar/HiveParser.g:1443:89: ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWFUNCTIONS, "TOK_SHOWFUNCTIONS"), root_1);
						// grammar/HiveParser.g:1443:109: ( KW_LIKE )?
						if ( stream_KW_LIKE.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_LIKE.nextNode());
						}
						stream_KW_LIKE.reset();

						// grammar/HiveParser.g:1443:118: ( showFunctionIdentifier )?
						if ( stream_showFunctionIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showFunctionIdentifier.nextTree());
						}
						stream_showFunctionIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// grammar/HiveParser.g:1444:7: KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )?
					{
					KW_SHOW422=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7224); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW422);

					KW_PARTITIONS423=(Token)match(input,KW_PARTITIONS,FOLLOW_KW_PARTITIONS_in_showStatement7226); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_PARTITIONS.add(KW_PARTITIONS423);

					pushFollow(FOLLOW_tableName_in_showStatement7230);
					tabName=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
					// grammar/HiveParser.g:1444:47: ( partitionSpec )?
					int alt125=2;
					int LA125_0 = input.LA(1);
					if ( (LA125_0==KW_PARTITION) ) {
						alt125=1;
					}
					switch (alt125) {
						case 1 :
							// grammar/HiveParser.g:1444:47: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_showStatement7232);
							partitionSpec424=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec424.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: tabName, partitionSpec
					// token labels: 
					// rule labels: tabName, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1444:62: -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? )
					{
						// grammar/HiveParser.g:1444:65: ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWPARTITIONS, "TOK_SHOWPARTITIONS"), root_1);
						adaptor.addChild(root_1, stream_tabName.nextTree());
						// grammar/HiveParser.g:1444:95: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// grammar/HiveParser.g:1445:7: KW_SHOW KW_CREATE ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) )
					{
					KW_SHOW425=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7254); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW425);

					KW_CREATE426=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_showStatement7256); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE426);

					// grammar/HiveParser.g:1445:25: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) )
					int alt127=2;
					int LA127_0 = input.LA(1);
					if ( (LA127_0==KW_DATABASE) && (synpred12_HiveParser())) {
						alt127=1;
					}
					else if ( (LA127_0==KW_SCHEMA) && (synpred12_HiveParser())) {
						alt127=1;
					}
					else if ( (LA127_0==KW_TABLE) ) {
						alt127=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 127, 0, input);
						throw nvae;
					}

					switch (alt127) {
						case 1 :
							// grammar/HiveParser.g:1446:9: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier
							{
							// grammar/HiveParser.g:1446:36: ( KW_DATABASE | KW_SCHEMA )
							int alt126=2;
							int LA126_0 = input.LA(1);
							if ( (LA126_0==KW_DATABASE) ) {
								alt126=1;
							}
							else if ( (LA126_0==KW_SCHEMA) ) {
								alt126=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 126, 0, input);
								throw nvae;
							}

							switch (alt126) {
								case 1 :
									// grammar/HiveParser.g:1446:37: KW_DATABASE
									{
									KW_DATABASE427=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_showStatement7277); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE427);

									}
									break;
								case 2 :
									// grammar/HiveParser.g:1446:49: KW_SCHEMA
									{
									KW_SCHEMA428=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_showStatement7279); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA428);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement7284);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							// AST REWRITE
							// elements: db_name
							// token labels: 
							// rule labels: db_name, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 1446:79: -> ^( TOK_SHOW_CREATEDATABASE $db_name)
							{
								// grammar/HiveParser.g:1446:82: ^( TOK_SHOW_CREATEDATABASE $db_name)
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_CREATEDATABASE, "TOK_SHOW_CREATEDATABASE"), root_1);
								adaptor.addChild(root_1, stream_db_name.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 2 :
							// grammar/HiveParser.g:1448:9: KW_TABLE tabName= tableName
							{
							KW_TABLE429=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement7313); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE429);

							pushFollow(FOLLOW_tableName_in_showStatement7317);
							tabName=tableName();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
							// AST REWRITE
							// elements: tabName
							// token labels: 
							// rule labels: tabName, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 1448:36: -> ^( TOK_SHOW_CREATETABLE $tabName)
							{
								// grammar/HiveParser.g:1448:39: ^( TOK_SHOW_CREATETABLE $tabName)
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_CREATETABLE, "TOK_SHOW_CREATETABLE"), root_1);
								adaptor.addChild(root_1, stream_tabName.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;

					}

					}
					break;
				case 7 :
					// grammar/HiveParser.g:1450:7: KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )?
					{
					KW_SHOW430=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7342); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW430);

					KW_TABLE431=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement7344); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE431);

					KW_EXTENDED432=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement7346); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED432);

					// grammar/HiveParser.g:1450:36: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt129=2;
					int LA129_0 = input.LA(1);
					if ( (LA129_0==KW_FROM||LA129_0==KW_IN) ) {
						alt129=1;
					}
					switch (alt129) {
						case 1 :
							// grammar/HiveParser.g:1450:37: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// grammar/HiveParser.g:1450:37: ( KW_FROM | KW_IN )
							int alt128=2;
							int LA128_0 = input.LA(1);
							if ( (LA128_0==KW_FROM) ) {
								alt128=1;
							}
							else if ( (LA128_0==KW_IN) ) {
								alt128=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 128, 0, input);
								throw nvae;
							}

							switch (alt128) {
								case 1 :
									// grammar/HiveParser.g:1450:38: KW_FROM
									{
									KW_FROM433=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7350); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM433);

									}
									break;
								case 2 :
									// grammar/HiveParser.g:1450:46: KW_IN
									{
									KW_IN434=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7352); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN434);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement7357);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					KW_LIKE435=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7361); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE435);

					pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7363);
					showStmtIdentifier436=showStmtIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier436.getTree());
					// grammar/HiveParser.g:1450:101: ( partitionSpec )?
					int alt130=2;
					int LA130_0 = input.LA(1);
					if ( (LA130_0==KW_PARTITION) ) {
						alt130=1;
					}
					switch (alt130) {
						case 1 :
							// grammar/HiveParser.g:1450:101: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_showStatement7365);
							partitionSpec437=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec437.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: db_name, partitionSpec, showStmtIdentifier
					// token labels: 
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1451:5: -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
					{
						// grammar/HiveParser.g:1451:8: ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_TABLESTATUS, "TOK_SHOW_TABLESTATUS"), root_1);
						adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						// grammar/HiveParser.g:1451:51: ( $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						// grammar/HiveParser.g:1451:60: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 8 :
					// grammar/HiveParser.g:1452:7: KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )?
					{
					KW_SHOW438=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7393); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW438);

					KW_TBLPROPERTIES439=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_showStatement7395); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES439);

					pushFollow(FOLLOW_tableName_in_showStatement7397);
					tableName440=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName440.getTree());
					// grammar/HiveParser.g:1452:42: ( LPAREN prptyName= StringLiteral RPAREN )?
					int alt131=2;
					int LA131_0 = input.LA(1);
					if ( (LA131_0==LPAREN) ) {
						alt131=1;
					}
					switch (alt131) {
						case 1 :
							// grammar/HiveParser.g:1452:43: LPAREN prptyName= StringLiteral RPAREN
							{
							LPAREN441=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_showStatement7400); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN441);

							prptyName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement7404); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(prptyName);

							RPAREN442=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_showStatement7406); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN442);

							}
							break;

					}

					// AST REWRITE
					// elements: prptyName, tableName
					// token labels: prptyName
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_prptyName=new RewriteRuleTokenStream(adaptor,"token prptyName",prptyName);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1452:83: -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? )
					{
						// grammar/HiveParser.g:1452:86: ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_TBLPROPERTIES, "TOK_SHOW_TBLPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						// grammar/HiveParser.g:1452:122: ( $prptyName)?
						if ( stream_prptyName.hasNext() ) {
							adaptor.addChild(root_1, stream_prptyName.nextNode());
						}
						stream_prptyName.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 9 :
					// grammar/HiveParser.g:1453:7: KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) )
					{
					KW_SHOW443=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7428); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW443);

					KW_LOCKS444=(Token)match(input,KW_LOCKS,FOLLOW_KW_LOCKS_in_showStatement7430); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LOCKS.add(KW_LOCKS444);

					// grammar/HiveParser.g:1454:7: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) )
					int alt136=2;
					int LA136_0 = input.LA(1);
					if ( (LA136_0==KW_DATABASE) && (synpred13_HiveParser())) {
						alt136=1;
					}
					else if ( (LA136_0==KW_SCHEMA) ) {
						int LA136_2 = input.LA(2);
						if ( (LA136_2==Identifier) ) {
							int LA136_8 = input.LA(3);
							if ( (synpred13_HiveParser()) ) {
								alt136=1;
							}
							else if ( (true) ) {
								alt136=2;
							}

						}
						else if ( (LA136_2==EOF||LA136_2==DOT||(LA136_2 >= KW_ABORT && LA136_2 <= KW_ANALYZE)||(LA136_2 >= KW_ARCHIVE && LA136_2 <= KW_BY)||LA136_2==KW_CASCADE||LA136_2==KW_CHANGE||(LA136_2 >= KW_CLUSTER && LA136_2 <= KW_COLLECTION)||(LA136_2 >= KW_COLUMNS && LA136_2 <= KW_COMMENT)||(LA136_2 >= KW_COMPACT && LA136_2 <= KW_CONCATENATE)||(LA136_2 >= KW_CONSTRAINT && LA136_2 <= KW_CREATE)||LA136_2==KW_CUBE||(LA136_2 >= KW_CURRENT_DATE && LA136_2 <= KW_DATA)||(LA136_2 >= KW_DATABASES && LA136_2 <= KW_DISABLE)||(LA136_2 >= KW_DISTRIBUTE && LA136_2 <= KW_ELEM_TYPE)||LA136_2==KW_ENABLE||LA136_2==KW_ESCAPED||(LA136_2 >= KW_EXCLUSIVE && LA136_2 <= KW_FLOAT)||(LA136_2 >= KW_FOR && LA136_2 <= KW_FORMATTED)||LA136_2==KW_FULL||(LA136_2 >= KW_FUNCTIONS && LA136_2 <= KW_GROUPING)||(LA136_2 >= KW_HOUR && LA136_2 <= KW_IDXPROPERTIES)||(LA136_2 >= KW_IMPORT && LA136_2 <= KW_INTERSECT)||(LA136_2 >= KW_INTO && LA136_2 <= KW_JAR)||(LA136_2 >= KW_KEY && LA136_2 <= KW_LEFT)||(LA136_2 >= KW_LEVEL && LA136_2 <= KW_LONG)||(LA136_2 >= KW_MAPJOIN && LA136_2 <= KW_MONTH)||(LA136_2 >= KW_MSCK && LA136_2 <= KW_NOSCAN)||(LA136_2 >= KW_NOVALIDATE && LA136_2 <= KW_OFFSET)||LA136_2==KW_OPTION||(LA136_2 >= KW_ORDER && LA136_2 <= KW_OUTPUTFORMAT)||(LA136_2 >= KW_OVERWRITE && LA136_2 <= KW_OWNER)||(LA136_2 >= KW_PARTITION && LA136_2 <= KW_PLUS)||(LA136_2 >= KW_PRETTY && LA136_2 <= KW_RECORDWRITER)||(LA136_2 >= KW_REFERENCES && LA136_2 <= KW_ROLES)||(LA136_2 >= KW_ROLLUP && LA136_2 <= KW_SECOND)||(LA136_2 >= KW_SEMI && LA136_2 <= KW_SSL)||(LA136_2 >= KW_STATISTICS && LA136_2 <= KW_TABLES)||(LA136_2 >= KW_TBLPROPERTIES && LA136_2 <= KW_TERMINATED)||(LA136_2 >= KW_TIMESTAMP && LA136_2 <= KW_TRANSACTIONS)||(LA136_2 >= KW_TRIGGER && LA136_2 <= KW_UNARCHIVE)||(LA136_2 >= KW_UNDO && LA136_2 <= KW_UNIONTYPE)||(LA136_2 >= KW_UNLOCK && LA136_2 <= KW_VALUE_TYPE)||LA136_2==KW_VIEW||LA136_2==KW_WHILE||(LA136_2 >= KW_WITH && LA136_2 <= KW_YEAR)||LA136_2==KW_HOLD_DDLTIME||LA136_2==KW_IGNORE||LA136_2==KW_NO_DROP||LA136_2==KW_OFFLINE||LA136_2==KW_PROTECTION||LA136_2==KW_READONLY) ) {
							alt136=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 136, 2, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA136_0==EOF||(LA136_0 >= Identifier && LA136_0 <= KW_ANALYZE)||(LA136_0 >= KW_ARCHIVE && LA136_0 <= KW_BY)||LA136_0==KW_CASCADE||LA136_0==KW_CHANGE||(LA136_0 >= KW_CLUSTER && LA136_0 <= KW_COLLECTION)||(LA136_0 >= KW_COLUMNS && LA136_0 <= KW_COMMENT)||(LA136_0 >= KW_COMPACT && LA136_0 <= KW_CONCATENATE)||(LA136_0 >= KW_CONSTRAINT && LA136_0 <= KW_CREATE)||LA136_0==KW_CUBE||(LA136_0 >= KW_CURRENT_DATE && LA136_0 <= KW_DATA)||(LA136_0 >= KW_DATABASES && LA136_0 <= KW_DISABLE)||(LA136_0 >= KW_DISTRIBUTE && LA136_0 <= KW_ELEM_TYPE)||LA136_0==KW_ENABLE||LA136_0==KW_ESCAPED||(LA136_0 >= KW_EXCLUSIVE && LA136_0 <= KW_FLOAT)||(LA136_0 >= KW_FOR && LA136_0 <= KW_FORMATTED)||LA136_0==KW_FULL||(LA136_0 >= KW_FUNCTIONS && LA136_0 <= KW_GROUPING)||(LA136_0 >= KW_HOUR && LA136_0 <= KW_IDXPROPERTIES)||(LA136_0 >= KW_IMPORT && LA136_0 <= KW_INTERSECT)||(LA136_0 >= KW_INTO && LA136_0 <= KW_JAR)||(LA136_0 >= KW_KEY && LA136_0 <= KW_LEFT)||(LA136_0 >= KW_LEVEL && LA136_0 <= KW_LONG)||(LA136_0 >= KW_MAPJOIN && LA136_0 <= KW_MONTH)||(LA136_0 >= KW_MSCK && LA136_0 <= KW_NOSCAN)||(LA136_0 >= KW_NOVALIDATE && LA136_0 <= KW_OFFSET)||LA136_0==KW_OPTION||(LA136_0 >= KW_ORDER && LA136_0 <= KW_OUTPUTFORMAT)||(LA136_0 >= KW_OVERWRITE && LA136_0 <= KW_OWNER)||(LA136_0 >= KW_PARTITION && LA136_0 <= KW_PLUS)||(LA136_0 >= KW_PRETTY && LA136_0 <= KW_RECORDWRITER)||(LA136_0 >= KW_REFERENCES && LA136_0 <= KW_ROLES)||(LA136_0 >= KW_ROLLUP && LA136_0 <= KW_ROWS)||(LA136_0 >= KW_SCHEMAS && LA136_0 <= KW_SECOND)||(LA136_0 >= KW_SEMI && LA136_0 <= KW_SSL)||(LA136_0 >= KW_STATISTICS && LA136_0 <= KW_TABLES)||(LA136_0 >= KW_TBLPROPERTIES && LA136_0 <= KW_TERMINATED)||(LA136_0 >= KW_TIMESTAMP && LA136_0 <= KW_TRANSACTIONS)||(LA136_0 >= KW_TRIGGER && LA136_0 <= KW_UNARCHIVE)||(LA136_0 >= KW_UNDO && LA136_0 <= KW_UNIONTYPE)||(LA136_0 >= KW_UNLOCK && LA136_0 <= KW_VALUE_TYPE)||LA136_0==KW_VIEW||LA136_0==KW_WHILE||(LA136_0 >= KW_WITH && LA136_0 <= KW_YEAR)||LA136_0==KW_HOLD_DDLTIME||LA136_0==KW_IGNORE||LA136_0==KW_NO_DROP||LA136_0==KW_OFFLINE||LA136_0==KW_PROTECTION||LA136_0==KW_READONLY) ) {
						alt136=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 136, 0, input);
						throw nvae;
					}

					switch (alt136) {
						case 1 :
							// grammar/HiveParser.g:1455:7: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )?
							{
							// grammar/HiveParser.g:1455:34: ( KW_DATABASE | KW_SCHEMA )
							int alt132=2;
							int LA132_0 = input.LA(1);
							if ( (LA132_0==KW_DATABASE) ) {
								alt132=1;
							}
							else if ( (LA132_0==KW_SCHEMA) ) {
								alt132=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 132, 0, input);
								throw nvae;
							}

							switch (alt132) {
								case 1 :
									// grammar/HiveParser.g:1455:35: KW_DATABASE
									{
									KW_DATABASE445=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_showStatement7456); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE445);

									}
									break;
								case 2 :
									// grammar/HiveParser.g:1455:47: KW_SCHEMA
									{
									KW_SCHEMA446=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_showStatement7458); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA446);

									}
									break;

							}

							// grammar/HiveParser.g:1455:58: (dbName= Identifier )
							// grammar/HiveParser.g:1455:59: dbName= Identifier
							{
							dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement7464); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_Identifier.add(dbName);

							}

							// grammar/HiveParser.g:1455:78: (isExtended= KW_EXTENDED )?
							int alt133=2;
							int LA133_0 = input.LA(1);
							if ( (LA133_0==KW_EXTENDED) ) {
								alt133=1;
							}
							switch (alt133) {
								case 1 :
									// grammar/HiveParser.g:1455:79: isExtended= KW_EXTENDED
									{
									isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement7470); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_EXTENDED.add(isExtended);

									}
									break;

							}

							// AST REWRITE
							// elements: dbName, isExtended
							// token labels: dbName, isExtended
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
							RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 1455:104: -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? )
							{
								// grammar/HiveParser.g:1455:107: ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? )
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWDBLOCKS, "TOK_SHOWDBLOCKS"), root_1);
								adaptor.addChild(root_1, stream_dbName.nextNode());
								// grammar/HiveParser.g:1455:134: ( $isExtended)?
								if ( stream_isExtended.hasNext() ) {
									adaptor.addChild(root_1, stream_isExtended.nextNode());
								}
								stream_isExtended.reset();

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 2 :
							// grammar/HiveParser.g:1457:7: (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )?
							{
							// grammar/HiveParser.g:1457:7: (parttype= partTypeExpr )?
							int alt134=2;
							int LA134_0 = input.LA(1);
							if ( ((LA134_0 >= Identifier && LA134_0 <= KW_ANALYZE)||(LA134_0 >= KW_ARCHIVE && LA134_0 <= KW_BY)||LA134_0==KW_CASCADE||LA134_0==KW_CHANGE||(LA134_0 >= KW_CLUSTER && LA134_0 <= KW_COLLECTION)||(LA134_0 >= KW_COLUMNS && LA134_0 <= KW_COMMENT)||(LA134_0 >= KW_COMPACT && LA134_0 <= KW_CONCATENATE)||(LA134_0 >= KW_CONSTRAINT && LA134_0 <= KW_CREATE)||LA134_0==KW_CUBE||(LA134_0 >= KW_CURRENT_DATE && LA134_0 <= KW_DATA)||(LA134_0 >= KW_DATABASES && LA134_0 <= KW_DISABLE)||(LA134_0 >= KW_DISTRIBUTE && LA134_0 <= KW_ELEM_TYPE)||LA134_0==KW_ENABLE||LA134_0==KW_ESCAPED||(LA134_0 >= KW_EXCLUSIVE && LA134_0 <= KW_EXPORT)||(LA134_0 >= KW_EXTERNAL && LA134_0 <= KW_FLOAT)||(LA134_0 >= KW_FOR && LA134_0 <= KW_FORMATTED)||LA134_0==KW_FULL||(LA134_0 >= KW_FUNCTIONS && LA134_0 <= KW_GROUPING)||(LA134_0 >= KW_HOUR && LA134_0 <= KW_IDXPROPERTIES)||(LA134_0 >= KW_IMPORT && LA134_0 <= KW_INTERSECT)||(LA134_0 >= KW_INTO && LA134_0 <= KW_JAR)||(LA134_0 >= KW_KEY && LA134_0 <= KW_LEFT)||(LA134_0 >= KW_LEVEL && LA134_0 <= KW_LONG)||(LA134_0 >= KW_MAPJOIN && LA134_0 <= KW_MONTH)||(LA134_0 >= KW_MSCK && LA134_0 <= KW_NOSCAN)||(LA134_0 >= KW_NOVALIDATE && LA134_0 <= KW_OFFSET)||LA134_0==KW_OPTION||(LA134_0 >= KW_ORDER && LA134_0 <= KW_OUTPUTFORMAT)||(LA134_0 >= KW_OVERWRITE && LA134_0 <= KW_OWNER)||(LA134_0 >= KW_PARTITION && LA134_0 <= KW_PLUS)||(LA134_0 >= KW_PRETTY && LA134_0 <= KW_RECORDWRITER)||(LA134_0 >= KW_REFERENCES && LA134_0 <= KW_ROLES)||(LA134_0 >= KW_ROLLUP && LA134_0 <= KW_SECOND)||(LA134_0 >= KW_SEMI && LA134_0 <= KW_SSL)||(LA134_0 >= KW_STATISTICS && LA134_0 <= KW_TABLES)||(LA134_0 >= KW_TBLPROPERTIES && LA134_0 <= KW_TERMINATED)||(LA134_0 >= KW_TIMESTAMP && LA134_0 <= KW_TRANSACTIONS)||(LA134_0 >= KW_TRIGGER && LA134_0 <= KW_UNARCHIVE)||(LA134_0 >= KW_UNDO && LA134_0 <= KW_UNIONTYPE)||(LA134_0 >= KW_UNLOCK && LA134_0 <= KW_VALUE_TYPE)||LA134_0==KW_VIEW||LA134_0==KW_WHILE||(LA134_0 >= KW_WITH && LA134_0 <= KW_YEAR)||LA134_0==KW_HOLD_DDLTIME||LA134_0==KW_IGNORE||LA134_0==KW_NO_DROP||LA134_0==KW_OFFLINE||LA134_0==KW_PROTECTION||LA134_0==KW_READONLY) ) {
								alt134=1;
							}
							switch (alt134) {
								case 1 :
									// grammar/HiveParser.g:1457:8: parttype= partTypeExpr
									{
									pushFollow(FOLLOW_partTypeExpr_in_showStatement7504);
									parttype=partTypeExpr();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_partTypeExpr.add(parttype.getTree());
									}
									break;

							}

							// grammar/HiveParser.g:1457:32: (isExtended= KW_EXTENDED )?
							int alt135=2;
							int LA135_0 = input.LA(1);
							if ( (LA135_0==KW_EXTENDED) ) {
								alt135=1;
							}
							switch (alt135) {
								case 1 :
									// grammar/HiveParser.g:1457:33: isExtended= KW_EXTENDED
									{
									isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement7511); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_EXTENDED.add(isExtended);

									}
									break;

							}

							// AST REWRITE
							// elements: isExtended, parttype
							// token labels: isExtended
							// rule labels: parttype, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
							RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 1457:58: -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
							{
								// grammar/HiveParser.g:1457:61: ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWLOCKS, "TOK_SHOWLOCKS"), root_1);
								// grammar/HiveParser.g:1457:78: ( $parttype)?
								if ( stream_parttype.hasNext() ) {
									adaptor.addChild(root_1, stream_parttype.nextTree());
								}
								stream_parttype.reset();

								// grammar/HiveParser.g:1457:89: ( $isExtended)?
								if ( stream_isExtended.hasNext() ) {
									adaptor.addChild(root_1, stream_isExtended.nextNode());
								}
								stream_isExtended.reset();

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;

					}

					}
					break;
				case 10 :
					// grammar/HiveParser.g:1459:7: KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= identifier )?
					{
					KW_SHOW447=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7543); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW447);

					// grammar/HiveParser.g:1459:15: (showOptions= KW_FORMATTED )?
					int alt137=2;
					int LA137_0 = input.LA(1);
					if ( (LA137_0==KW_FORMATTED) ) {
						alt137=1;
					}
					switch (alt137) {
						case 1 :
							// grammar/HiveParser.g:1459:16: showOptions= KW_FORMATTED
							{
							showOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_showStatement7548); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_FORMATTED.add(showOptions);

							}
							break;

					}

					// grammar/HiveParser.g:1459:43: ( KW_INDEX | KW_INDEXES )
					int alt138=2;
					int LA138_0 = input.LA(1);
					if ( (LA138_0==KW_INDEX) ) {
						alt138=1;
					}
					else if ( (LA138_0==KW_INDEXES) ) {
						alt138=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 138, 0, input);
						throw nvae;
					}

					switch (alt138) {
						case 1 :
							// grammar/HiveParser.g:1459:44: KW_INDEX
							{
							KW_INDEX448=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_showStatement7553); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX448);

							}
							break;
						case 2 :
							// grammar/HiveParser.g:1459:53: KW_INDEXES
							{
							KW_INDEXES449=(Token)match(input,KW_INDEXES,FOLLOW_KW_INDEXES_in_showStatement7555); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_INDEXES.add(KW_INDEXES449);

							}
							break;

					}

					KW_ON450=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_showStatement7558); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON450);

					pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7560);
					showStmtIdentifier451=showStmtIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier451.getTree());
					// grammar/HiveParser.g:1459:90: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt140=2;
					int LA140_0 = input.LA(1);
					if ( (LA140_0==KW_FROM||LA140_0==KW_IN) ) {
						alt140=1;
					}
					switch (alt140) {
						case 1 :
							// grammar/HiveParser.g:1459:91: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// grammar/HiveParser.g:1459:91: ( KW_FROM | KW_IN )
							int alt139=2;
							int LA139_0 = input.LA(1);
							if ( (LA139_0==KW_FROM) ) {
								alt139=1;
							}
							else if ( (LA139_0==KW_IN) ) {
								alt139=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 139, 0, input);
								throw nvae;
							}

							switch (alt139) {
								case 1 :
									// grammar/HiveParser.g:1459:92: KW_FROM
									{
									KW_FROM452=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7564); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM452);

									}
									break;
								case 2 :
									// grammar/HiveParser.g:1459:100: KW_IN
									{
									KW_IN453=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7566); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN453);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement7571);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier, showOptions, db_name
					// token labels: showOptions
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_showOptions=new RewriteRuleTokenStream(adaptor,"token showOptions",showOptions);
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1460:5: -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
					{
						// grammar/HiveParser.g:1460:8: ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWINDEXES, "TOK_SHOWINDEXES"), root_1);
						adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						// grammar/HiveParser.g:1460:46: ( $showOptions)?
						if ( stream_showOptions.hasNext() ) {
							adaptor.addChild(root_1, stream_showOptions.nextNode());
						}
						stream_showOptions.reset();

						// grammar/HiveParser.g:1460:60: ( $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 11 :
					// grammar/HiveParser.g:1461:7: KW_SHOW KW_COMPACTIONS
					{
					KW_SHOW454=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7601); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW454);

					KW_COMPACTIONS455=(Token)match(input,KW_COMPACTIONS,FOLLOW_KW_COMPACTIONS_in_showStatement7603); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMPACTIONS.add(KW_COMPACTIONS455);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1461:30: -> ^( TOK_SHOW_COMPACTIONS )
					{
						// grammar/HiveParser.g:1461:33: ^( TOK_SHOW_COMPACTIONS )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_COMPACTIONS, "TOK_SHOW_COMPACTIONS"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 12 :
					// grammar/HiveParser.g:1462:7: KW_SHOW KW_TRANSACTIONS
					{
					KW_SHOW456=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7617); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW456);

					KW_TRANSACTIONS457=(Token)match(input,KW_TRANSACTIONS,FOLLOW_KW_TRANSACTIONS_in_showStatement7619); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TRANSACTIONS.add(KW_TRANSACTIONS457);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1462:31: -> ^( TOK_SHOW_TRANSACTIONS )
					{
						// grammar/HiveParser.g:1462:34: ^( TOK_SHOW_TRANSACTIONS )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_TRANSACTIONS, "TOK_SHOW_TRANSACTIONS"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 13 :
					// grammar/HiveParser.g:1463:7: KW_SHOW KW_CONF StringLiteral
					{
					KW_SHOW458=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7633); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW458);

					KW_CONF459=(Token)match(input,KW_CONF,FOLLOW_KW_CONF_in_showStatement7635); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CONF.add(KW_CONF459);

					StringLiteral460=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement7637); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral460);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1463:37: -> ^( TOK_SHOWCONF StringLiteral )
					{
						// grammar/HiveParser.g:1463:40: ^( TOK_SHOWCONF StringLiteral )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWCONF, "TOK_SHOWCONF"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showStatement"


	public static class lockStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "lockStatement"
	// grammar/HiveParser.g:1466:1: lockStatement : KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) ;
	public final HiveParser.lockStatement_return lockStatement() throws RecognitionException {
		HiveParser.lockStatement_return retval = new HiveParser.lockStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_LOCK461=null;
		Token KW_TABLE462=null;
		ParserRuleReturnScope tableName463 =null;
		ParserRuleReturnScope partitionSpec464 =null;
		ParserRuleReturnScope lockMode465 =null;

		CommonTree KW_LOCK461_tree=null;
		CommonTree KW_TABLE462_tree=null;
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("lock statement", state); 
		try {
			// grammar/HiveParser.g:1469:5: ( KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) )
			// grammar/HiveParser.g:1469:7: KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode
			{
			KW_LOCK461=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockStatement7672); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK461);

			KW_TABLE462=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_lockStatement7674); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE462);

			pushFollow(FOLLOW_tableName_in_lockStatement7676);
			tableName463=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName463.getTree());
			// grammar/HiveParser.g:1469:34: ( partitionSpec )?
			int alt142=2;
			int LA142_0 = input.LA(1);
			if ( (LA142_0==KW_PARTITION) ) {
				alt142=1;
			}
			switch (alt142) {
				case 1 :
					// grammar/HiveParser.g:1469:34: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_lockStatement7678);
					partitionSpec464=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec464.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_lockMode_in_lockStatement7681);
			lockMode465=lockMode();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_lockMode.add(lockMode465.getTree());
			// AST REWRITE
			// elements: tableName, partitionSpec, lockMode
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1469:58: -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
			{
				// grammar/HiveParser.g:1469:61: ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LOCKTABLE, "TOK_LOCKTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_1, stream_lockMode.nextTree());
				// grammar/HiveParser.g:1469:96: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockStatement"


	public static class lockDatabase_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "lockDatabase"
	// grammar/HiveParser.g:1472:1: lockDatabase : KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) lockMode -> ^( TOK_LOCKDB $dbName lockMode ) ;
	public final HiveParser.lockDatabase_return lockDatabase() throws RecognitionException {
		HiveParser.lockDatabase_return retval = new HiveParser.lockDatabase_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token dbName=null;
		Token KW_LOCK466=null;
		Token KW_DATABASE467=null;
		Token KW_SCHEMA468=null;
		ParserRuleReturnScope lockMode469 =null;

		CommonTree dbName_tree=null;
		CommonTree KW_LOCK466_tree=null;
		CommonTree KW_DATABASE467_tree=null;
		CommonTree KW_SCHEMA468_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
		RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");

		 pushMsg("lock database statement", state); 
		try {
			// grammar/HiveParser.g:1475:5: ( KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) lockMode -> ^( TOK_LOCKDB $dbName lockMode ) )
			// grammar/HiveParser.g:1475:7: KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) lockMode
			{
			KW_LOCK466=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockDatabase7721); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK466);

			// grammar/HiveParser.g:1475:15: ( KW_DATABASE | KW_SCHEMA )
			int alt143=2;
			int LA143_0 = input.LA(1);
			if ( (LA143_0==KW_DATABASE) ) {
				alt143=1;
			}
			else if ( (LA143_0==KW_SCHEMA) ) {
				alt143=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 143, 0, input);
				throw nvae;
			}

			switch (alt143) {
				case 1 :
					// grammar/HiveParser.g:1475:16: KW_DATABASE
					{
					KW_DATABASE467=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_lockDatabase7724); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE467);

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1475:28: KW_SCHEMA
					{
					KW_SCHEMA468=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_lockDatabase7726); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA468);

					}
					break;

			}

			// grammar/HiveParser.g:1475:39: (dbName= Identifier )
			// grammar/HiveParser.g:1475:40: dbName= Identifier
			{
			dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_lockDatabase7732); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Identifier.add(dbName);

			}

			pushFollow(FOLLOW_lockMode_in_lockDatabase7735);
			lockMode469=lockMode();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_lockMode.add(lockMode469.getTree());
			// AST REWRITE
			// elements: lockMode, dbName
			// token labels: dbName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1475:68: -> ^( TOK_LOCKDB $dbName lockMode )
			{
				// grammar/HiveParser.g:1475:71: ^( TOK_LOCKDB $dbName lockMode )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LOCKDB, "TOK_LOCKDB"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextNode());
				adaptor.addChild(root_1, stream_lockMode.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockDatabase"


	public static class lockMode_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "lockMode"
	// grammar/HiveParser.g:1478:1: lockMode : ( KW_SHARED | KW_EXCLUSIVE );
	public final HiveParser.lockMode_return lockMode() throws RecognitionException {
		HiveParser.lockMode_return retval = new HiveParser.lockMode_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set470=null;

		CommonTree set470_tree=null;

		 pushMsg("lock mode", state); 
		try {
			// grammar/HiveParser.g:1481:5: ( KW_SHARED | KW_EXCLUSIVE )
			// grammar/HiveParser.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set470=input.LT(1);
			if ( input.LA(1)==KW_EXCLUSIVE||input.LA(1)==KW_SHARED ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set470));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockMode"


	public static class unlockStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unlockStatement"
	// grammar/HiveParser.g:1484:1: unlockStatement : KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) ;
	public final HiveParser.unlockStatement_return unlockStatement() throws RecognitionException {
		HiveParser.unlockStatement_return retval = new HiveParser.unlockStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UNLOCK471=null;
		Token KW_TABLE472=null;
		ParserRuleReturnScope tableName473 =null;
		ParserRuleReturnScope partitionSpec474 =null;

		CommonTree KW_UNLOCK471_tree=null;
		CommonTree KW_TABLE472_tree=null;
		RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("unlock statement", state); 
		try {
			// grammar/HiveParser.g:1487:5: ( KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) )
			// grammar/HiveParser.g:1487:7: KW_UNLOCK KW_TABLE tableName ( partitionSpec )?
			{
			KW_UNLOCK471=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockStatement7804); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UNLOCK.add(KW_UNLOCK471);

			KW_TABLE472=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_unlockStatement7806); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE472);

			pushFollow(FOLLOW_tableName_in_unlockStatement7808);
			tableName473=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName473.getTree());
			// grammar/HiveParser.g:1487:36: ( partitionSpec )?
			int alt144=2;
			int LA144_0 = input.LA(1);
			if ( (LA144_0==KW_PARTITION) ) {
				alt144=1;
			}
			switch (alt144) {
				case 1 :
					// grammar/HiveParser.g:1487:36: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_unlockStatement7810);
					partitionSpec474=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec474.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1487:52: -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
			{
				// grammar/HiveParser.g:1487:55: ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNLOCKTABLE, "TOK_UNLOCKTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// grammar/HiveParser.g:1487:83: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unlockStatement"


	public static class unlockDatabase_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unlockDatabase"
	// grammar/HiveParser.g:1490:1: unlockDatabase : KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) -> ^( TOK_UNLOCKDB $dbName) ;
	public final HiveParser.unlockDatabase_return unlockDatabase() throws RecognitionException {
		HiveParser.unlockDatabase_return retval = new HiveParser.unlockDatabase_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token dbName=null;
		Token KW_UNLOCK475=null;
		Token KW_DATABASE476=null;
		Token KW_SCHEMA477=null;

		CommonTree dbName_tree=null;
		CommonTree KW_UNLOCK475_tree=null;
		CommonTree KW_DATABASE476_tree=null;
		CommonTree KW_SCHEMA477_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");

		 pushMsg("unlock database statement", state); 
		try {
			// grammar/HiveParser.g:1493:5: ( KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) -> ^( TOK_UNLOCKDB $dbName) )
			// grammar/HiveParser.g:1493:7: KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier )
			{
			KW_UNLOCK475=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockDatabase7850); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UNLOCK.add(KW_UNLOCK475);

			// grammar/HiveParser.g:1493:17: ( KW_DATABASE | KW_SCHEMA )
			int alt145=2;
			int LA145_0 = input.LA(1);
			if ( (LA145_0==KW_DATABASE) ) {
				alt145=1;
			}
			else if ( (LA145_0==KW_SCHEMA) ) {
				alt145=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 145, 0, input);
				throw nvae;
			}

			switch (alt145) {
				case 1 :
					// grammar/HiveParser.g:1493:18: KW_DATABASE
					{
					KW_DATABASE476=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_unlockDatabase7853); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE476);

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1493:30: KW_SCHEMA
					{
					KW_SCHEMA477=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_unlockDatabase7855); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA477);

					}
					break;

			}

			// grammar/HiveParser.g:1493:41: (dbName= Identifier )
			// grammar/HiveParser.g:1493:42: dbName= Identifier
			{
			dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_unlockDatabase7861); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Identifier.add(dbName);

			}

			// AST REWRITE
			// elements: dbName
			// token labels: dbName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1493:61: -> ^( TOK_UNLOCKDB $dbName)
			{
				// grammar/HiveParser.g:1493:64: ^( TOK_UNLOCKDB $dbName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNLOCKDB, "TOK_UNLOCKDB"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unlockDatabase"


	public static class createRoleStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createRoleStatement"
	// grammar/HiveParser.g:1496:1: createRoleStatement : KW_CREATE KW_ROLE roleName= identifier -> ^( TOK_CREATEROLE $roleName) ;
	public final HiveParser.createRoleStatement_return createRoleStatement() throws RecognitionException {
		HiveParser.createRoleStatement_return retval = new HiveParser.createRoleStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CREATE478=null;
		Token KW_ROLE479=null;
		ParserRuleReturnScope roleName =null;

		CommonTree KW_CREATE478_tree=null;
		CommonTree KW_ROLE479_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("create role", state); 
		try {
			// grammar/HiveParser.g:1499:5: ( KW_CREATE KW_ROLE roleName= identifier -> ^( TOK_CREATEROLE $roleName) )
			// grammar/HiveParser.g:1499:7: KW_CREATE KW_ROLE roleName= identifier
			{
			KW_CREATE478=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createRoleStatement7898); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE478);

			KW_ROLE479=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_createRoleStatement7900); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE479);

			pushFollow(FOLLOW_identifier_in_createRoleStatement7904);
			roleName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());
			// AST REWRITE
			// elements: roleName
			// token labels: 
			// rule labels: roleName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1500:5: -> ^( TOK_CREATEROLE $roleName)
			{
				// grammar/HiveParser.g:1500:8: ^( TOK_CREATEROLE $roleName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEROLE, "TOK_CREATEROLE"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createRoleStatement"


	public static class dropRoleStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropRoleStatement"
	// grammar/HiveParser.g:1503:1: dropRoleStatement : KW_DROP KW_ROLE roleName= identifier -> ^( TOK_DROPROLE $roleName) ;
	public final HiveParser.dropRoleStatement_return dropRoleStatement() throws RecognitionException {
		HiveParser.dropRoleStatement_return retval = new HiveParser.dropRoleStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP480=null;
		Token KW_ROLE481=null;
		ParserRuleReturnScope roleName =null;

		CommonTree KW_DROP480_tree=null;
		CommonTree KW_ROLE481_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("drop role", state);
		try {
			// grammar/HiveParser.g:1506:5: ( KW_DROP KW_ROLE roleName= identifier -> ^( TOK_DROPROLE $roleName) )
			// grammar/HiveParser.g:1506:7: KW_DROP KW_ROLE roleName= identifier
			{
			KW_DROP480=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropRoleStatement7944); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP480);

			KW_ROLE481=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_dropRoleStatement7946); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE481);

			pushFollow(FOLLOW_identifier_in_dropRoleStatement7950);
			roleName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());
			// AST REWRITE
			// elements: roleName
			// token labels: 
			// rule labels: roleName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1507:5: -> ^( TOK_DROPROLE $roleName)
			{
				// grammar/HiveParser.g:1507:8: ^( TOK_DROPROLE $roleName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPROLE, "TOK_DROPROLE"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropRoleStatement"


	public static class grantPrivileges_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "grantPrivileges"
	// grammar/HiveParser.g:1510:1: grantPrivileges : KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? ) ;
	public final HiveParser.grantPrivileges_return grantPrivileges() throws RecognitionException {
		HiveParser.grantPrivileges_return retval = new HiveParser.grantPrivileges_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_GRANT482=null;
		Token KW_TO484=null;
		ParserRuleReturnScope privList =null;
		ParserRuleReturnScope privilegeObject483 =null;
		ParserRuleReturnScope principalSpecification485 =null;
		ParserRuleReturnScope withGrantOption486 =null;

		CommonTree KW_GRANT482_tree=null;
		CommonTree KW_TO484_tree=null;
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleSubtreeStream stream_withGrantOption=new RewriteRuleSubtreeStream(adaptor,"rule withGrantOption");
		RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
		RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg("grant privileges", state);
		try {
			// grammar/HiveParser.g:1513:5: ( KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? ) )
			// grammar/HiveParser.g:1513:7: KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )?
			{
			KW_GRANT482=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantPrivileges7990); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT482);

			pushFollow(FOLLOW_privilegeList_in_grantPrivileges7994);
			privList=privilegeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privilegeList.add(privList.getTree());
			// grammar/HiveParser.g:1514:7: ( privilegeObject )?
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==KW_ON) ) {
				alt146=1;
			}
			switch (alt146) {
				case 1 :
					// grammar/HiveParser.g:1514:7: privilegeObject
					{
					pushFollow(FOLLOW_privilegeObject_in_grantPrivileges8002);
					privilegeObject483=privilegeObject();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privilegeObject.add(privilegeObject483.getTree());
					}
					break;

			}

			KW_TO484=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantPrivileges8011); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO484);

			pushFollow(FOLLOW_principalSpecification_in_grantPrivileges8013);
			principalSpecification485=principalSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification485.getTree());
			// grammar/HiveParser.g:1516:7: ( withGrantOption )?
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==KW_WITH) ) {
				alt147=1;
			}
			switch (alt147) {
				case 1 :
					// grammar/HiveParser.g:1516:7: withGrantOption
					{
					pushFollow(FOLLOW_withGrantOption_in_grantPrivileges8021);
					withGrantOption486=withGrantOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_withGrantOption.add(withGrantOption486.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: principalSpecification, privList, privilegeObject, withGrantOption
			// token labels: 
			// rule labels: privList, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_privList=new RewriteRuleSubtreeStream(adaptor,"rule privList",privList!=null?privList.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1517:5: -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? )
			{
				// grammar/HiveParser.g:1517:8: ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GRANT, "TOK_GRANT"), root_1);
				adaptor.addChild(root_1, stream_privList.nextTree());
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// grammar/HiveParser.g:1517:53: ( privilegeObject )?
				if ( stream_privilegeObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeObject.nextTree());
				}
				stream_privilegeObject.reset();

				// grammar/HiveParser.g:1517:70: ( withGrantOption )?
				if ( stream_withGrantOption.hasNext() ) {
					adaptor.addChild(root_1, stream_withGrantOption.nextTree());
				}
				stream_withGrantOption.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grantPrivileges"


	public static class revokePrivileges_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "revokePrivileges"
	// grammar/HiveParser.g:1520:1: revokePrivileges : KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? ) ;
	public final HiveParser.revokePrivileges_return revokePrivileges() throws RecognitionException {
		HiveParser.revokePrivileges_return retval = new HiveParser.revokePrivileges_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_REVOKE487=null;
		Token KW_FROM491=null;
		ParserRuleReturnScope grantOptionFor488 =null;
		ParserRuleReturnScope privilegeList489 =null;
		ParserRuleReturnScope privilegeObject490 =null;
		ParserRuleReturnScope principalSpecification492 =null;

		CommonTree KW_REVOKE487_tree=null;
		CommonTree KW_FROM491_tree=null;
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
		RewriteRuleSubtreeStream stream_grantOptionFor=new RewriteRuleSubtreeStream(adaptor,"rule grantOptionFor");
		RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
		RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg("revoke privileges", state);
		try {
			// grammar/HiveParser.g:1523:5: ( KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? ) )
			// grammar/HiveParser.g:1523:7: KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification
			{
			KW_REVOKE487=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokePrivileges8070); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REVOKE.add(KW_REVOKE487);

			// grammar/HiveParser.g:1523:17: ( grantOptionFor )?
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==KW_GRANT) ) {
				alt148=1;
			}
			switch (alt148) {
				case 1 :
					// grammar/HiveParser.g:1523:17: grantOptionFor
					{
					pushFollow(FOLLOW_grantOptionFor_in_revokePrivileges8072);
					grantOptionFor488=grantOptionFor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_grantOptionFor.add(grantOptionFor488.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_privilegeList_in_revokePrivileges8075);
			privilegeList489=privilegeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privilegeList.add(privilegeList489.getTree());
			// grammar/HiveParser.g:1523:47: ( privilegeObject )?
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==KW_ON) ) {
				alt149=1;
			}
			switch (alt149) {
				case 1 :
					// grammar/HiveParser.g:1523:47: privilegeObject
					{
					pushFollow(FOLLOW_privilegeObject_in_revokePrivileges8077);
					privilegeObject490=privilegeObject();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privilegeObject.add(privilegeObject490.getTree());
					}
					break;

			}

			KW_FROM491=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokePrivileges8080); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM491);

			pushFollow(FOLLOW_principalSpecification_in_revokePrivileges8082);
			principalSpecification492=principalSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification492.getTree());
			// AST REWRITE
			// elements: privilegeList, principalSpecification, privilegeObject, grantOptionFor
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1524:5: -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? )
			{
				// grammar/HiveParser.g:1524:8: ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_REVOKE, "TOK_REVOKE"), root_1);
				adaptor.addChild(root_1, stream_privilegeList.nextTree());
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// grammar/HiveParser.g:1524:58: ( privilegeObject )?
				if ( stream_privilegeObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeObject.nextTree());
				}
				stream_privilegeObject.reset();

				// grammar/HiveParser.g:1524:75: ( grantOptionFor )?
				if ( stream_grantOptionFor.hasNext() ) {
					adaptor.addChild(root_1, stream_grantOptionFor.nextTree());
				}
				stream_grantOptionFor.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "revokePrivileges"


	public static class grantRole_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "grantRole"
	// grammar/HiveParser.g:1527:1: grantRole : KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )? -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) ;
	public final HiveParser.grantRole_return grantRole() throws RecognitionException {
		HiveParser.grantRole_return retval = new HiveParser.grantRole_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_GRANT493=null;
		Token KW_ROLE494=null;
		Token COMMA496=null;
		Token KW_TO498=null;
		ParserRuleReturnScope identifier495 =null;
		ParserRuleReturnScope identifier497 =null;
		ParserRuleReturnScope principalSpecification499 =null;
		ParserRuleReturnScope withAdminOption500 =null;

		CommonTree KW_GRANT493_tree=null;
		CommonTree KW_ROLE494_tree=null;
		CommonTree COMMA496_tree=null;
		CommonTree KW_TO498_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_withAdminOption=new RewriteRuleSubtreeStream(adaptor,"rule withAdminOption");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg("grant role", state);
		try {
			// grammar/HiveParser.g:1530:5: ( KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )? -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) )
			// grammar/HiveParser.g:1530:7: KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )?
			{
			KW_GRANT493=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantRole8129); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT493);

			// grammar/HiveParser.g:1530:16: ( KW_ROLE )?
			int alt150=2;
			int LA150_0 = input.LA(1);
			if ( (LA150_0==KW_ROLE) ) {
				int LA150_1 = input.LA(2);
				if ( ((LA150_1 >= Identifier && LA150_1 <= KW_ANALYZE)||(LA150_1 >= KW_ARCHIVE && LA150_1 <= KW_BY)||LA150_1==KW_CASCADE||LA150_1==KW_CHANGE||(LA150_1 >= KW_CLUSTER && LA150_1 <= KW_COLLECTION)||(LA150_1 >= KW_COLUMNS && LA150_1 <= KW_COMMENT)||(LA150_1 >= KW_COMPACT && LA150_1 <= KW_CONCATENATE)||(LA150_1 >= KW_CONSTRAINT && LA150_1 <= KW_CREATE)||LA150_1==KW_CUBE||(LA150_1 >= KW_CURRENT_DATE && LA150_1 <= KW_DATA)||(LA150_1 >= KW_DATABASES && LA150_1 <= KW_DISABLE)||(LA150_1 >= KW_DISTRIBUTE && LA150_1 <= KW_ELEM_TYPE)||LA150_1==KW_ENABLE||LA150_1==KW_ESCAPED||(LA150_1 >= KW_EXCLUSIVE && LA150_1 <= KW_EXPORT)||(LA150_1 >= KW_EXTERNAL && LA150_1 <= KW_FLOAT)||(LA150_1 >= KW_FOR && LA150_1 <= KW_FORMATTED)||LA150_1==KW_FULL||(LA150_1 >= KW_FUNCTIONS && LA150_1 <= KW_GROUPING)||(LA150_1 >= KW_HOUR && LA150_1 <= KW_IDXPROPERTIES)||(LA150_1 >= KW_IMPORT && LA150_1 <= KW_INTERSECT)||(LA150_1 >= KW_INTO && LA150_1 <= KW_JAR)||(LA150_1 >= KW_KEY && LA150_1 <= KW_LEFT)||(LA150_1 >= KW_LEVEL && LA150_1 <= KW_LONG)||(LA150_1 >= KW_MAPJOIN && LA150_1 <= KW_MONTH)||(LA150_1 >= KW_MSCK && LA150_1 <= KW_NOSCAN)||(LA150_1 >= KW_NOVALIDATE && LA150_1 <= KW_OFFSET)||LA150_1==KW_OPTION||(LA150_1 >= KW_ORDER && LA150_1 <= KW_OUTPUTFORMAT)||(LA150_1 >= KW_OVERWRITE && LA150_1 <= KW_OWNER)||(LA150_1 >= KW_PARTITION && LA150_1 <= KW_PLUS)||(LA150_1 >= KW_PRETTY && LA150_1 <= KW_RECORDWRITER)||(LA150_1 >= KW_REFERENCES && LA150_1 <= KW_ROLES)||(LA150_1 >= KW_ROLLUP && LA150_1 <= KW_SECOND)||(LA150_1 >= KW_SEMI && LA150_1 <= KW_SSL)||(LA150_1 >= KW_STATISTICS && LA150_1 <= KW_TABLES)||(LA150_1 >= KW_TBLPROPERTIES && LA150_1 <= KW_TERMINATED)||(LA150_1 >= KW_TIMESTAMP && LA150_1 <= KW_TINYINT)||(LA150_1 >= KW_TOUCH && LA150_1 <= KW_TRANSACTIONS)||(LA150_1 >= KW_TRIGGER && LA150_1 <= KW_UNARCHIVE)||(LA150_1 >= KW_UNDO && LA150_1 <= KW_UNIONTYPE)||(LA150_1 >= KW_UNLOCK && LA150_1 <= KW_VALUE_TYPE)||LA150_1==KW_VIEW||LA150_1==KW_WHILE||(LA150_1 >= KW_WITH && LA150_1 <= KW_YEAR)||LA150_1==KW_HOLD_DDLTIME||LA150_1==KW_IGNORE||LA150_1==KW_NO_DROP||LA150_1==KW_OFFLINE||LA150_1==KW_PROTECTION||LA150_1==KW_READONLY) ) {
					alt150=1;
				}
				else if ( (LA150_1==KW_TO) ) {
					int LA150_7 = input.LA(3);
					if ( (LA150_7==COMMA||LA150_7==KW_TO) ) {
						alt150=1;
					}
				}
			}
			switch (alt150) {
				case 1 :
					// grammar/HiveParser.g:1530:16: KW_ROLE
					{
					KW_ROLE494=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_grantRole8131); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE494);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_grantRole8134);
			identifier495=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier495.getTree());
			// grammar/HiveParser.g:1530:36: ( COMMA identifier )*
			loop151:
			while (true) {
				int alt151=2;
				int LA151_0 = input.LA(1);
				if ( (LA151_0==COMMA) ) {
					alt151=1;
				}

				switch (alt151) {
				case 1 :
					// grammar/HiveParser.g:1530:37: COMMA identifier
					{
					COMMA496=(Token)match(input,COMMA,FOLLOW_COMMA_in_grantRole8137); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA496);

					pushFollow(FOLLOW_identifier_in_grantRole8139);
					identifier497=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier497.getTree());
					}
					break;

				default :
					break loop151;
				}
			}

			KW_TO498=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantRole8143); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO498);

			pushFollow(FOLLOW_principalSpecification_in_grantRole8145);
			principalSpecification499=principalSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification499.getTree());
			// grammar/HiveParser.g:1530:85: ( withAdminOption )?
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==KW_WITH) ) {
				alt152=1;
			}
			switch (alt152) {
				case 1 :
					// grammar/HiveParser.g:1530:85: withAdminOption
					{
					pushFollow(FOLLOW_withAdminOption_in_grantRole8147);
					withAdminOption500=withAdminOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_withAdminOption.add(withAdminOption500.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: principalSpecification, withAdminOption, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1531:5: -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
			{
				// grammar/HiveParser.g:1531:8: ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GRANT_ROLE, "TOK_GRANT_ROLE"), root_1);
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// grammar/HiveParser.g:1531:48: ( withAdminOption )?
				if ( stream_withAdminOption.hasNext() ) {
					adaptor.addChild(root_1, stream_withAdminOption.nextTree());
				}
				stream_withAdminOption.reset();

				if ( !(stream_identifier.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_identifier.hasNext() ) {
					adaptor.addChild(root_1, stream_identifier.nextTree());
				}
				stream_identifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grantRole"


	public static class revokeRole_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "revokeRole"
	// grammar/HiveParser.g:1534:1: revokeRole : KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ ) ;
	public final HiveParser.revokeRole_return revokeRole() throws RecognitionException {
		HiveParser.revokeRole_return retval = new HiveParser.revokeRole_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_REVOKE501=null;
		Token KW_ROLE503=null;
		Token COMMA505=null;
		Token KW_FROM507=null;
		ParserRuleReturnScope adminOptionFor502 =null;
		ParserRuleReturnScope identifier504 =null;
		ParserRuleReturnScope identifier506 =null;
		ParserRuleReturnScope principalSpecification508 =null;

		CommonTree KW_REVOKE501_tree=null;
		CommonTree KW_ROLE503_tree=null;
		CommonTree COMMA505_tree=null;
		CommonTree KW_FROM507_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_adminOptionFor=new RewriteRuleSubtreeStream(adaptor,"rule adminOptionFor");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg("revoke role", state);
		try {
			// grammar/HiveParser.g:1537:5: ( KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ ) )
			// grammar/HiveParser.g:1537:7: KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification
			{
			KW_REVOKE501=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokeRole8193); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REVOKE.add(KW_REVOKE501);

			// grammar/HiveParser.g:1537:17: ( adminOptionFor )?
			int alt153=2;
			int LA153_0 = input.LA(1);
			if ( (LA153_0==KW_ADMIN) ) {
				int LA153_1 = input.LA(2);
				if ( (LA153_1==KW_OPTION) ) {
					alt153=1;
				}
			}
			switch (alt153) {
				case 1 :
					// grammar/HiveParser.g:1537:17: adminOptionFor
					{
					pushFollow(FOLLOW_adminOptionFor_in_revokeRole8195);
					adminOptionFor502=adminOptionFor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_adminOptionFor.add(adminOptionFor502.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:1537:33: ( KW_ROLE )?
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( (LA154_0==KW_ROLE) ) {
				int LA154_1 = input.LA(2);
				if ( ((LA154_1 >= Identifier && LA154_1 <= KW_ANALYZE)||(LA154_1 >= KW_ARCHIVE && LA154_1 <= KW_BY)||LA154_1==KW_CASCADE||LA154_1==KW_CHANGE||(LA154_1 >= KW_CLUSTER && LA154_1 <= KW_COLLECTION)||(LA154_1 >= KW_COLUMNS && LA154_1 <= KW_COMMENT)||(LA154_1 >= KW_COMPACT && LA154_1 <= KW_CONCATENATE)||(LA154_1 >= KW_CONSTRAINT && LA154_1 <= KW_CREATE)||LA154_1==KW_CUBE||(LA154_1 >= KW_CURRENT_DATE && LA154_1 <= KW_DATA)||(LA154_1 >= KW_DATABASES && LA154_1 <= KW_DISABLE)||(LA154_1 >= KW_DISTRIBUTE && LA154_1 <= KW_ELEM_TYPE)||LA154_1==KW_ENABLE||LA154_1==KW_ESCAPED||(LA154_1 >= KW_EXCLUSIVE && LA154_1 <= KW_EXPORT)||(LA154_1 >= KW_EXTERNAL && LA154_1 <= KW_FLOAT)||(LA154_1 >= KW_FOR && LA154_1 <= KW_FORMATTED)||LA154_1==KW_FULL||(LA154_1 >= KW_FUNCTIONS && LA154_1 <= KW_GROUPING)||(LA154_1 >= KW_HOUR && LA154_1 <= KW_IDXPROPERTIES)||(LA154_1 >= KW_IMPORT && LA154_1 <= KW_INTERSECT)||(LA154_1 >= KW_INTO && LA154_1 <= KW_JAR)||(LA154_1 >= KW_KEY && LA154_1 <= KW_LEFT)||(LA154_1 >= KW_LEVEL && LA154_1 <= KW_LONG)||(LA154_1 >= KW_MAPJOIN && LA154_1 <= KW_MONTH)||(LA154_1 >= KW_MSCK && LA154_1 <= KW_NOSCAN)||(LA154_1 >= KW_NOVALIDATE && LA154_1 <= KW_OFFSET)||LA154_1==KW_OPTION||(LA154_1 >= KW_ORDER && LA154_1 <= KW_OUTPUTFORMAT)||(LA154_1 >= KW_OVERWRITE && LA154_1 <= KW_OWNER)||(LA154_1 >= KW_PARTITION && LA154_1 <= KW_PLUS)||(LA154_1 >= KW_PRETTY && LA154_1 <= KW_RECORDWRITER)||(LA154_1 >= KW_REFERENCES && LA154_1 <= KW_ROLES)||(LA154_1 >= KW_ROLLUP && LA154_1 <= KW_SECOND)||(LA154_1 >= KW_SEMI && LA154_1 <= KW_SSL)||(LA154_1 >= KW_STATISTICS && LA154_1 <= KW_TABLES)||(LA154_1 >= KW_TBLPROPERTIES && LA154_1 <= KW_TERMINATED)||(LA154_1 >= KW_TIMESTAMP && LA154_1 <= KW_TRANSACTIONS)||(LA154_1 >= KW_TRIGGER && LA154_1 <= KW_UNARCHIVE)||(LA154_1 >= KW_UNDO && LA154_1 <= KW_UNIONTYPE)||(LA154_1 >= KW_UNLOCK && LA154_1 <= KW_VALUE_TYPE)||LA154_1==KW_VIEW||LA154_1==KW_WHILE||(LA154_1 >= KW_WITH && LA154_1 <= KW_YEAR)||LA154_1==KW_HOLD_DDLTIME||LA154_1==KW_IGNORE||LA154_1==KW_NO_DROP||LA154_1==KW_OFFLINE||LA154_1==KW_PROTECTION||LA154_1==KW_READONLY) ) {
					alt154=1;
				}
			}
			switch (alt154) {
				case 1 :
					// grammar/HiveParser.g:1537:33: KW_ROLE
					{
					KW_ROLE503=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_revokeRole8198); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE503);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_revokeRole8201);
			identifier504=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier504.getTree());
			// grammar/HiveParser.g:1537:53: ( COMMA identifier )*
			loop155:
			while (true) {
				int alt155=2;
				int LA155_0 = input.LA(1);
				if ( (LA155_0==COMMA) ) {
					alt155=1;
				}

				switch (alt155) {
				case 1 :
					// grammar/HiveParser.g:1537:54: COMMA identifier
					{
					COMMA505=(Token)match(input,COMMA,FOLLOW_COMMA_in_revokeRole8204); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA505);

					pushFollow(FOLLOW_identifier_in_revokeRole8206);
					identifier506=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier506.getTree());
					}
					break;

				default :
					break loop155;
				}
			}

			KW_FROM507=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokeRole8210); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM507);

			pushFollow(FOLLOW_principalSpecification_in_revokeRole8212);
			principalSpecification508=principalSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification508.getTree());
			// AST REWRITE
			// elements: principalSpecification, adminOptionFor, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1538:5: -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ )
			{
				// grammar/HiveParser.g:1538:8: ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_REVOKE_ROLE, "TOK_REVOKE_ROLE"), root_1);
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// grammar/HiveParser.g:1538:49: ( adminOptionFor )?
				if ( stream_adminOptionFor.hasNext() ) {
					adaptor.addChild(root_1, stream_adminOptionFor.nextTree());
				}
				stream_adminOptionFor.reset();

				if ( !(stream_identifier.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_identifier.hasNext() ) {
					adaptor.addChild(root_1, stream_identifier.nextTree());
				}
				stream_identifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "revokeRole"


	public static class showRoleGrants_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showRoleGrants"
	// grammar/HiveParser.g:1541:1: showRoleGrants : KW_SHOW KW_ROLE KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) ;
	public final HiveParser.showRoleGrants_return showRoleGrants() throws RecognitionException {
		HiveParser.showRoleGrants_return retval = new HiveParser.showRoleGrants_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SHOW509=null;
		Token KW_ROLE510=null;
		Token KW_GRANT511=null;
		ParserRuleReturnScope principalName512 =null;

		CommonTree KW_SHOW509_tree=null;
		CommonTree KW_ROLE510_tree=null;
		CommonTree KW_GRANT511_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		pushMsg("show role grants", state);
		try {
			// grammar/HiveParser.g:1544:5: ( KW_SHOW KW_ROLE KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) )
			// grammar/HiveParser.g:1544:7: KW_SHOW KW_ROLE KW_GRANT principalName
			{
			KW_SHOW509=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoleGrants8257); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW509);

			KW_ROLE510=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_showRoleGrants8259); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE510);

			KW_GRANT511=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showRoleGrants8261); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT511);

			pushFollow(FOLLOW_principalName_in_showRoleGrants8263);
			principalName512=principalName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalName.add(principalName512.getTree());
			// AST REWRITE
			// elements: principalName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1545:5: -> ^( TOK_SHOW_ROLE_GRANT principalName )
			{
				// grammar/HiveParser.g:1545:8: ^( TOK_SHOW_ROLE_GRANT principalName )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_ROLE_GRANT, "TOK_SHOW_ROLE_GRANT"), root_1);
				adaptor.addChild(root_1, stream_principalName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showRoleGrants"


	public static class showRoles_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showRoles"
	// grammar/HiveParser.g:1549:1: showRoles : KW_SHOW KW_ROLES -> ^( TOK_SHOW_ROLES ) ;
	public final HiveParser.showRoles_return showRoles() throws RecognitionException {
		HiveParser.showRoles_return retval = new HiveParser.showRoles_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SHOW513=null;
		Token KW_ROLES514=null;

		CommonTree KW_SHOW513_tree=null;
		CommonTree KW_ROLES514_tree=null;
		RewriteRuleTokenStream stream_KW_ROLES=new RewriteRuleTokenStream(adaptor,"token KW_ROLES");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");

		pushMsg("show roles", state);
		try {
			// grammar/HiveParser.g:1552:5: ( KW_SHOW KW_ROLES -> ^( TOK_SHOW_ROLES ) )
			// grammar/HiveParser.g:1552:7: KW_SHOW KW_ROLES
			{
			KW_SHOW513=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoles8303); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW513);

			KW_ROLES514=(Token)match(input,KW_ROLES,FOLLOW_KW_ROLES_in_showRoles8305); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLES.add(KW_ROLES514);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1553:5: -> ^( TOK_SHOW_ROLES )
			{
				// grammar/HiveParser.g:1553:8: ^( TOK_SHOW_ROLES )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_ROLES, "TOK_SHOW_ROLES"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showRoles"


	public static class showCurrentRole_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showCurrentRole"
	// grammar/HiveParser.g:1556:1: showCurrentRole : KW_SHOW KW_CURRENT KW_ROLES -> ^( TOK_SHOW_SET_ROLE ) ;
	public final HiveParser.showCurrentRole_return showCurrentRole() throws RecognitionException {
		HiveParser.showCurrentRole_return retval = new HiveParser.showCurrentRole_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SHOW515=null;
		Token KW_CURRENT516=null;
		Token KW_ROLES517=null;

		CommonTree KW_SHOW515_tree=null;
		CommonTree KW_CURRENT516_tree=null;
		CommonTree KW_ROLES517_tree=null;
		RewriteRuleTokenStream stream_KW_ROLES=new RewriteRuleTokenStream(adaptor,"token KW_ROLES");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_CURRENT=new RewriteRuleTokenStream(adaptor,"token KW_CURRENT");

		pushMsg("show current role", state);
		try {
			// grammar/HiveParser.g:1559:5: ( KW_SHOW KW_CURRENT KW_ROLES -> ^( TOK_SHOW_SET_ROLE ) )
			// grammar/HiveParser.g:1559:7: KW_SHOW KW_CURRENT KW_ROLES
			{
			KW_SHOW515=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showCurrentRole8342); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW515);

			KW_CURRENT516=(Token)match(input,KW_CURRENT,FOLLOW_KW_CURRENT_in_showCurrentRole8344); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CURRENT.add(KW_CURRENT516);

			KW_ROLES517=(Token)match(input,KW_ROLES,FOLLOW_KW_ROLES_in_showCurrentRole8346); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLES.add(KW_ROLES517);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1560:5: -> ^( TOK_SHOW_SET_ROLE )
			{
				// grammar/HiveParser.g:1560:8: ^( TOK_SHOW_SET_ROLE )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showCurrentRole"


	public static class setRole_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "setRole"
	// grammar/HiveParser.g:1563:1: setRole : KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) ) ;
	public final HiveParser.setRole_return setRole() throws RecognitionException {
		HiveParser.setRole_return retval = new HiveParser.setRole_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token all=null;
		Token none=null;
		Token KW_SET518=null;
		Token KW_ROLE519=null;
		ParserRuleReturnScope identifier520 =null;

		CommonTree all_tree=null;
		CommonTree none_tree=null;
		CommonTree KW_SET518_tree=null;
		CommonTree KW_ROLE519_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_NONE=new RewriteRuleTokenStream(adaptor,"token KW_NONE");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("set role", state);
		try {
			// grammar/HiveParser.g:1566:5: ( KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) ) )
			// grammar/HiveParser.g:1566:7: KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) )
			{
			KW_SET518=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setRole8383); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET518);

			KW_ROLE519=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_setRole8385); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE519);

			// grammar/HiveParser.g:1567:5: ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) )
			int alt156=3;
			switch ( input.LA(1) ) {
			case KW_ALL:
				{
				int LA156_1 = input.LA(2);
				if ( (synpred14_HiveParser()) ) {
					alt156=1;
				}
				else if ( ((useSQL11ReservedKeywordsForIdentifier())) ) {
					alt156=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 156, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_NONE:
				{
				int LA156_2 = input.LA(2);
				if ( (synpred15_HiveParser()) ) {
					alt156=2;
				}
				else if ( ((useSQL11ReservedKeywordsForIdentifier())) ) {
					alt156=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 156, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case Identifier:
			case KW_ABORT:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALTER:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ARRAY:
			case KW_AS:
			case KW_ASC:
			case KW_AUTHORIZATION:
			case KW_AUTOCOMMIT:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_BOTH:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_BY:
			case KW_CASCADE:
			case KW_CHANGE:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONSTRAINT:
			case KW_CONTINUE:
			case KW_CREATE:
			case KW_CUBE:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_CURSOR:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DBPROPERTIES:
			case KW_DECIMAL:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELETE:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DESCRIBE:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DOUBLE:
			case KW_DROP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ESCAPED:
			case KW_EXCLUSIVE:
			case KW_EXISTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXTERNAL:
			case KW_FALSE:
			case KW_FETCH:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FLOAT:
			case KW_FOR:
			case KW_FOREIGN:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FULL:
			case KW_FUNCTIONS:
			case KW_GRANT:
			case KW_GROUP:
			case KW_GROUPING:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IMPORT:
			case KW_IN:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INNER:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_INSERT:
			case KW_INT:
			case KW_INTERSECT:
			case KW_INTO:
			case KW_IS:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LAST:
			case KW_LATERAL:
			case KW_LEFT:
			case KW_LEVEL:
			case KW_LIKE:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCAL:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MAPJOIN:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUS:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NULL:
			case KW_NULLS:
			case KW_OF:
			case KW_OFFSET:
			case KW_OPTION:
			case KW_ORDER:
			case KW_OUT:
			case KW_OUTER:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITION:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PERCENT:
			case KW_PLUS:
			case KW_PRETTY:
			case KW_PRIMARY:
			case KW_PRINCIPALS:
			case KW_PROCEDURE:
			case KW_PURGE:
			case KW_RANGE:
			case KW_READ:
			case KW_READS:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_REFERENCES:
			case KW_REGEXP:
			case KW_RELOAD:
			case KW_RELY:
			case KW_RENAME:
			case KW_REPAIR:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESTRICT:
			case KW_REVOKE:
			case KW_REWRITE:
			case KW_RIGHT:
			case KW_RLIKE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_ROLLUP:
			case KW_ROW:
			case KW_ROWS:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SET:
			case KW_SETS:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SMALLINT:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_TABLE:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMP:
			case KW_TINYINT:
			case KW_TO:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONS:
			case KW_TRIGGER:
			case KW_TRUE:
			case KW_TRUNCATE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNION:
			case KW_UNIONTYPE:
			case KW_UNLOCK:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_UPDATE:
			case KW_URI:
			case KW_USE:
			case KW_USER:
			case KW_USING:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUES:
			case KW_VALUE_TYPE:
			case KW_VIEW:
			case KW_WHILE:
			case KW_WITH:
			case KW_WORK:
			case KW_WRITE:
			case KW_YEAR:
			case KW_HOLD_DDLTIME:
			case KW_IGNORE:
			case KW_NO_DROP:
			case KW_OFFLINE:
			case KW_PROTECTION:
			case KW_READONLY:
				{
				alt156=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 156, 0, input);
				throw nvae;
			}
			switch (alt156) {
				case 1 :
					// grammar/HiveParser.g:1568:5: ( KW_ALL )=> (all= KW_ALL )
					{
					// grammar/HiveParser.g:1568:17: (all= KW_ALL )
					// grammar/HiveParser.g:1568:18: all= KW_ALL
					{
					all=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setRole8407); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(all);

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1568:30: -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] )
					{
						// grammar/HiveParser.g:1568:33: ^( TOK_SHOW_SET_ROLE Identifier[$all.text] )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
						adaptor.addChild(root_1, (CommonTree)adaptor.create(Identifier, (all!=null?all.getText():null)));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1570:5: ( KW_NONE )=> (none= KW_NONE )
					{
					// grammar/HiveParser.g:1570:18: (none= KW_NONE )
					// grammar/HiveParser.g:1570:19: none= KW_NONE
					{
					none=(Token)match(input,KW_NONE,FOLLOW_KW_NONE_in_setRole8438); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NONE.add(none);

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1570:33: -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] )
					{
						// grammar/HiveParser.g:1570:36: ^( TOK_SHOW_SET_ROLE Identifier[$none.text] )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
						adaptor.addChild(root_1, (CommonTree)adaptor.create(Identifier, (none!=null?none.getText():null)));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1572:5: identifier
					{
					pushFollow(FOLLOW_identifier_in_setRole8460);
					identifier520=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier520.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1572:16: -> ^( TOK_SHOW_SET_ROLE identifier )
					{
						// grammar/HiveParser.g:1572:19: ^( TOK_SHOW_SET_ROLE identifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setRole"


	public static class showGrants_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showGrants"
	// grammar/HiveParser.g:1576:1: showGrants : KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? ) ;
	public final HiveParser.showGrants_return showGrants() throws RecognitionException {
		HiveParser.showGrants_return retval = new HiveParser.showGrants_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SHOW521=null;
		Token KW_GRANT522=null;
		Token KW_ON524=null;
		ParserRuleReturnScope principalName523 =null;
		ParserRuleReturnScope privilegeIncludeColObject525 =null;

		CommonTree KW_SHOW521_tree=null;
		CommonTree KW_GRANT522_tree=null;
		CommonTree KW_ON524_tree=null;
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_privilegeIncludeColObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeIncludeColObject");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		pushMsg("show grants", state);
		try {
			// grammar/HiveParser.g:1579:5: ( KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? ) )
			// grammar/HiveParser.g:1579:7: KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )?
			{
			KW_SHOW521=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showGrants8501); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW521);

			KW_GRANT522=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showGrants8503); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT522);

			// grammar/HiveParser.g:1579:24: ( principalName )?
			int alt157=2;
			int LA157_0 = input.LA(1);
			if ( (LA157_0==KW_GROUP||LA157_0==KW_ROLE||LA157_0==KW_USER) ) {
				alt157=1;
			}
			switch (alt157) {
				case 1 :
					// grammar/HiveParser.g:1579:24: principalName
					{
					pushFollow(FOLLOW_principalName_in_showGrants8505);
					principalName523=principalName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_principalName.add(principalName523.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:1579:39: ( KW_ON privilegeIncludeColObject )?
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==KW_ON) ) {
				alt158=1;
			}
			switch (alt158) {
				case 1 :
					// grammar/HiveParser.g:1579:40: KW_ON privilegeIncludeColObject
					{
					KW_ON524=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_showGrants8509); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON524);

					pushFollow(FOLLOW_privilegeIncludeColObject_in_showGrants8511);
					privilegeIncludeColObject525=privilegeIncludeColObject();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privilegeIncludeColObject.add(privilegeIncludeColObject525.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: privilegeIncludeColObject, principalName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1580:5: -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? )
			{
				// grammar/HiveParser.g:1580:8: ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_GRANT, "TOK_SHOW_GRANT"), root_1);
				// grammar/HiveParser.g:1580:25: ( principalName )?
				if ( stream_principalName.hasNext() ) {
					adaptor.addChild(root_1, stream_principalName.nextTree());
				}
				stream_principalName.reset();

				// grammar/HiveParser.g:1580:40: ( privilegeIncludeColObject )?
				if ( stream_privilegeIncludeColObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeIncludeColObject.nextTree());
				}
				stream_privilegeIncludeColObject.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showGrants"


	public static class showRolePrincipals_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showRolePrincipals"
	// grammar/HiveParser.g:1583:1: showRolePrincipals : KW_SHOW KW_PRINCIPALS roleName= identifier -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName) ;
	public final HiveParser.showRolePrincipals_return showRolePrincipals() throws RecognitionException {
		HiveParser.showRolePrincipals_return retval = new HiveParser.showRolePrincipals_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SHOW526=null;
		Token KW_PRINCIPALS527=null;
		ParserRuleReturnScope roleName =null;

		CommonTree KW_SHOW526_tree=null;
		CommonTree KW_PRINCIPALS527_tree=null;
		RewriteRuleTokenStream stream_KW_PRINCIPALS=new RewriteRuleTokenStream(adaptor,"token KW_PRINCIPALS");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("show role principals", state);
		try {
			// grammar/HiveParser.g:1586:5: ( KW_SHOW KW_PRINCIPALS roleName= identifier -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName) )
			// grammar/HiveParser.g:1586:7: KW_SHOW KW_PRINCIPALS roleName= identifier
			{
			KW_SHOW526=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRolePrincipals8556); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW526);

			KW_PRINCIPALS527=(Token)match(input,KW_PRINCIPALS,FOLLOW_KW_PRINCIPALS_in_showRolePrincipals8558); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PRINCIPALS.add(KW_PRINCIPALS527);

			pushFollow(FOLLOW_identifier_in_showRolePrincipals8562);
			roleName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());
			// AST REWRITE
			// elements: roleName
			// token labels: 
			// rule labels: roleName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1587:5: -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName)
			{
				// grammar/HiveParser.g:1587:8: ^( TOK_SHOW_ROLE_PRINCIPALS $roleName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_ROLE_PRINCIPALS, "TOK_SHOW_ROLE_PRINCIPALS"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showRolePrincipals"


	public static class privilegeIncludeColObject_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privilegeIncludeColObject"
	// grammar/HiveParser.g:1591:1: privilegeIncludeColObject : ( ( KW_ALL )=> KW_ALL -> ^( TOK_RESOURCE_ALL ) | privObjectCols -> ^( TOK_PRIV_OBJECT_COL privObjectCols ) );
	public final HiveParser.privilegeIncludeColObject_return privilegeIncludeColObject() throws RecognitionException {
		HiveParser.privilegeIncludeColObject_return retval = new HiveParser.privilegeIncludeColObject_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ALL528=null;
		ParserRuleReturnScope privObjectCols529 =null;

		CommonTree KW_ALL528_tree=null;
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleSubtreeStream stream_privObjectCols=new RewriteRuleSubtreeStream(adaptor,"rule privObjectCols");

		pushMsg("privilege object including columns", state);
		try {
			// grammar/HiveParser.g:1594:5: ( ( KW_ALL )=> KW_ALL -> ^( TOK_RESOURCE_ALL ) | privObjectCols -> ^( TOK_PRIV_OBJECT_COL privObjectCols ) )
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==KW_ALL) ) {
				int LA159_1 = input.LA(2);
				if ( (synpred16_HiveParser()) ) {
					alt159=1;
				}
				else if ( ((useSQL11ReservedKeywordsForIdentifier())) ) {
					alt159=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 159, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA159_0 >= Identifier && LA159_0 <= KW_AFTER)||(LA159_0 >= KW_ALTER && LA159_0 <= KW_ANALYZE)||(LA159_0 >= KW_ARCHIVE && LA159_0 <= KW_BY)||LA159_0==KW_CASCADE||LA159_0==KW_CHANGE||(LA159_0 >= KW_CLUSTER && LA159_0 <= KW_COLLECTION)||(LA159_0 >= KW_COLUMNS && LA159_0 <= KW_COMMENT)||(LA159_0 >= KW_COMPACT && LA159_0 <= KW_CONCATENATE)||(LA159_0 >= KW_CONSTRAINT && LA159_0 <= KW_CREATE)||LA159_0==KW_CUBE||(LA159_0 >= KW_CURRENT_DATE && LA159_0 <= KW_DISABLE)||(LA159_0 >= KW_DISTRIBUTE && LA159_0 <= KW_ELEM_TYPE)||LA159_0==KW_ENABLE||LA159_0==KW_ESCAPED||(LA159_0 >= KW_EXCLUSIVE && LA159_0 <= KW_EXPORT)||(LA159_0 >= KW_EXTERNAL && LA159_0 <= KW_FLOAT)||(LA159_0 >= KW_FOR && LA159_0 <= KW_FORMATTED)||LA159_0==KW_FULL||(LA159_0 >= KW_FUNCTIONS && LA159_0 <= KW_GROUPING)||(LA159_0 >= KW_HOUR && LA159_0 <= KW_IDXPROPERTIES)||(LA159_0 >= KW_IMPORT && LA159_0 <= KW_INTERSECT)||(LA159_0 >= KW_INTO && LA159_0 <= KW_JAR)||(LA159_0 >= KW_KEY && LA159_0 <= KW_LEFT)||(LA159_0 >= KW_LEVEL && LA159_0 <= KW_LONG)||(LA159_0 >= KW_MAPJOIN && LA159_0 <= KW_MONTH)||(LA159_0 >= KW_MSCK && LA159_0 <= KW_NOSCAN)||(LA159_0 >= KW_NOVALIDATE && LA159_0 <= KW_OFFSET)||LA159_0==KW_OPTION||(LA159_0 >= KW_ORDER && LA159_0 <= KW_OUTPUTFORMAT)||(LA159_0 >= KW_OVERWRITE && LA159_0 <= KW_OWNER)||(LA159_0 >= KW_PARTITION && LA159_0 <= KW_PLUS)||(LA159_0 >= KW_PRETTY && LA159_0 <= KW_RECORDWRITER)||(LA159_0 >= KW_REFERENCES && LA159_0 <= KW_ROLES)||(LA159_0 >= KW_ROLLUP && LA159_0 <= KW_SECOND)||(LA159_0 >= KW_SEMI && LA159_0 <= KW_SSL)||(LA159_0 >= KW_STATISTICS && LA159_0 <= KW_TABLES)||(LA159_0 >= KW_TBLPROPERTIES && LA159_0 <= KW_TERMINATED)||(LA159_0 >= KW_TIMESTAMP && LA159_0 <= KW_TRANSACTIONS)||(LA159_0 >= KW_TRIGGER && LA159_0 <= KW_UNARCHIVE)||(LA159_0 >= KW_UNDO && LA159_0 <= KW_UNIONTYPE)||(LA159_0 >= KW_UNLOCK && LA159_0 <= KW_VALUE_TYPE)||LA159_0==KW_VIEW||LA159_0==KW_WHILE||(LA159_0 >= KW_WITH && LA159_0 <= KW_YEAR)||LA159_0==KW_HOLD_DDLTIME||LA159_0==KW_IGNORE||LA159_0==KW_NO_DROP||LA159_0==KW_OFFLINE||LA159_0==KW_PROTECTION||LA159_0==KW_READONLY) ) {
				alt159=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 159, 0, input);
				throw nvae;
			}

			switch (alt159) {
				case 1 :
					// grammar/HiveParser.g:1594:7: ( KW_ALL )=> KW_ALL
					{
					KW_ALL528=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeIncludeColObject8609); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL528);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1594:26: -> ^( TOK_RESOURCE_ALL )
					{
						// grammar/HiveParser.g:1594:29: ^( TOK_RESOURCE_ALL )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RESOURCE_ALL, "TOK_RESOURCE_ALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1595:7: privObjectCols
					{
					pushFollow(FOLLOW_privObjectCols_in_privilegeIncludeColObject8623);
					privObjectCols529=privObjectCols();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privObjectCols.add(privObjectCols529.getTree());
					// AST REWRITE
					// elements: privObjectCols
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1595:22: -> ^( TOK_PRIV_OBJECT_COL privObjectCols )
					{
						// grammar/HiveParser.g:1595:25: ^( TOK_PRIV_OBJECT_COL privObjectCols )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_OBJECT_COL, "TOK_PRIV_OBJECT_COL"), root_1);
						adaptor.addChild(root_1, stream_privObjectCols.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeIncludeColObject"


	public static class privilegeObject_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privilegeObject"
	// grammar/HiveParser.g:1598:1: privilegeObject : KW_ON privObject -> ^( TOK_PRIV_OBJECT privObject ) ;
	public final HiveParser.privilegeObject_return privilegeObject() throws RecognitionException {
		HiveParser.privilegeObject_return retval = new HiveParser.privilegeObject_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ON530=null;
		ParserRuleReturnScope privObject531 =null;

		CommonTree KW_ON530_tree=null;
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_privObject=new RewriteRuleSubtreeStream(adaptor,"rule privObject");

		pushMsg("privilege object", state);
		try {
			// grammar/HiveParser.g:1601:5: ( KW_ON privObject -> ^( TOK_PRIV_OBJECT privObject ) )
			// grammar/HiveParser.g:1601:7: KW_ON privObject
			{
			KW_ON530=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_privilegeObject8658); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON530);

			pushFollow(FOLLOW_privObject_in_privilegeObject8660);
			privObject531=privObject();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privObject.add(privObject531.getTree());
			// AST REWRITE
			// elements: privObject
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1601:24: -> ^( TOK_PRIV_OBJECT privObject )
			{
				// grammar/HiveParser.g:1601:27: ^( TOK_PRIV_OBJECT privObject )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_OBJECT, "TOK_PRIV_OBJECT"), root_1);
				adaptor.addChild(root_1, stream_privObject.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeObject"


	public static class privObject_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privObject"
	// grammar/HiveParser.g:1605:1: privObject : ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) );
	public final HiveParser.privObject_return privObject() throws RecognitionException {
		HiveParser.privObject_return retval = new HiveParser.privObject_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token path=null;
		Token KW_DATABASE532=null;
		Token KW_SCHEMA533=null;
		Token KW_TABLE535=null;
		Token KW_URI538=null;
		Token KW_SERVER539=null;
		ParserRuleReturnScope identifier534 =null;
		ParserRuleReturnScope tableName536 =null;
		ParserRuleReturnScope partitionSpec537 =null;
		ParserRuleReturnScope identifier540 =null;

		CommonTree path_tree=null;
		CommonTree KW_DATABASE532_tree=null;
		CommonTree KW_SCHEMA533_tree=null;
		CommonTree KW_TABLE535_tree=null;
		CommonTree KW_URI538_tree=null;
		CommonTree KW_SERVER539_tree=null;
		RewriteRuleTokenStream stream_KW_SERVER=new RewriteRuleTokenStream(adaptor,"token KW_SERVER");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_URI=new RewriteRuleTokenStream(adaptor,"token KW_URI");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		try {
			// grammar/HiveParser.g:1606:5: ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) )
			int alt163=4;
			switch ( input.LA(1) ) {
			case KW_DATABASE:
				{
				alt163=1;
				}
				break;
			case KW_SCHEMA:
				{
				switch ( input.LA(2) ) {
				case Identifier:
				case KW_ABORT:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ALL:
				case KW_ALTER:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ARRAY:
				case KW_AS:
				case KW_ASC:
				case KW_AUTHORIZATION:
				case KW_AUTOCOMMIT:
				case KW_BEFORE:
				case KW_BETWEEN:
				case KW_BIGINT:
				case KW_BINARY:
				case KW_BOOLEAN:
				case KW_BOTH:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_BY:
				case KW_CASCADE:
				case KW_CHANGE:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONSTRAINT:
				case KW_CONTINUE:
				case KW_CREATE:
				case KW_CUBE:
				case KW_CURRENT_DATE:
				case KW_CURRENT_TIMESTAMP:
				case KW_CURSOR:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATE:
				case KW_DATETIME:
				case KW_DAY:
				case KW_DBPROPERTIES:
				case KW_DECIMAL:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELETE:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DESCRIBE:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTRIBUTE:
				case KW_DOUBLE:
				case KW_DROP:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ESCAPED:
				case KW_EXCLUSIVE:
				case KW_EXISTS:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_EXTERNAL:
				case KW_FALSE:
				case KW_FETCH:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FLOAT:
				case KW_FOR:
				case KW_FOREIGN:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FULL:
				case KW_FUNCTIONS:
				case KW_GRANT:
				case KW_GROUP:
				case KW_GROUPING:
				case KW_HOUR:
				case KW_IDXPROPERTIES:
				case KW_IMPORT:
				case KW_IN:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INNER:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_INSERT:
				case KW_INT:
				case KW_INTERSECT:
				case KW_INTO:
				case KW_IS:
				case KW_ISOLATION:
				case KW_ITEMS:
				case KW_JAR:
				case KW_KEY:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LAST:
				case KW_LATERAL:
				case KW_LEFT:
				case KW_LEVEL:
				case KW_LIKE:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCAL:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MAPJOIN:
				case KW_MATERIALIZED:
				case KW_METADATA:
				case KW_MINUS:
				case KW_MINUTE:
				case KW_MONTH:
				case KW_MSCK:
				case KW_NONE:
				case KW_NORELY:
				case KW_NOSCAN:
				case KW_NOVALIDATE:
				case KW_NULL:
				case KW_NULLS:
				case KW_OF:
				case KW_OFFSET:
				case KW_OPTION:
				case KW_ORDER:
				case KW_OUT:
				case KW_OUTER:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PERCENT:
				case KW_PLUS:
				case KW_PRETTY:
				case KW_PRIMARY:
				case KW_PRINCIPALS:
				case KW_PROCEDURE:
				case KW_PURGE:
				case KW_RANGE:
				case KW_READ:
				case KW_READS:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_REFERENCES:
				case KW_REGEXP:
				case KW_RELOAD:
				case KW_RELY:
				case KW_RENAME:
				case KW_REPAIR:
				case KW_REPLACE:
				case KW_REPLICATION:
				case KW_RESTRICT:
				case KW_REVOKE:
				case KW_REWRITE:
				case KW_RIGHT:
				case KW_RLIKE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_ROLLUP:
				case KW_ROW:
				case KW_ROWS:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SECOND:
				case KW_SEMI:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SERVER:
				case KW_SET:
				case KW_SETS:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SMALLINT:
				case KW_SNAPSHOT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_TABLE:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TIMESTAMP:
				case KW_TINYINT:
				case KW_TOUCH:
				case KW_TRANSACTION:
				case KW_TRANSACTIONS:
				case KW_TRIGGER:
				case KW_TRUE:
				case KW_TRUNCATE:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNION:
				case KW_UNIONTYPE:
				case KW_UNLOCK:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_UPDATE:
				case KW_URI:
				case KW_USE:
				case KW_USER:
				case KW_USING:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALIDATE:
				case KW_VALUES:
				case KW_VALUE_TYPE:
				case KW_VIEW:
				case KW_WHILE:
				case KW_WITH:
				case KW_WORK:
				case KW_WRITE:
				case KW_YEAR:
				case KW_HOLD_DDLTIME:
				case KW_IGNORE:
				case KW_NO_DROP:
				case KW_OFFLINE:
				case KW_PROTECTION:
				case KW_READONLY:
					{
					alt163=1;
					}
					break;
				case KW_PARTITION:
					{
					int LA163_11 = input.LA(3);
					if ( (LA163_11==LPAREN) ) {
						alt163=2;
					}
					else if ( (LA163_11==KW_FROM||LA163_11==KW_TO) ) {
						alt163=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 163, 11, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case DOT:
				case KW_FROM:
					{
					alt163=2;
					}
					break;
				case KW_TO:
					{
					int LA163_13 = input.LA(3);
					if ( (LA163_13==KW_FROM||LA163_13==KW_TO) ) {
						alt163=1;
					}
					else if ( (LA163_13==KW_GROUP||LA163_13==KW_ROLE||LA163_13==KW_USER) ) {
						alt163=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 163, 13, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 163, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case Identifier:
			case KW_ABORT:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALL:
			case KW_ALTER:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ARRAY:
			case KW_AS:
			case KW_ASC:
			case KW_AUTHORIZATION:
			case KW_AUTOCOMMIT:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_BOTH:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_BY:
			case KW_CASCADE:
			case KW_CHANGE:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONSTRAINT:
			case KW_CONTINUE:
			case KW_CREATE:
			case KW_CUBE:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_CURSOR:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DBPROPERTIES:
			case KW_DECIMAL:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELETE:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DESCRIBE:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DOUBLE:
			case KW_DROP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ESCAPED:
			case KW_EXCLUSIVE:
			case KW_EXISTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXTERNAL:
			case KW_FALSE:
			case KW_FETCH:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FLOAT:
			case KW_FOR:
			case KW_FOREIGN:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FULL:
			case KW_FUNCTIONS:
			case KW_GRANT:
			case KW_GROUP:
			case KW_GROUPING:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IMPORT:
			case KW_IN:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INNER:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_INSERT:
			case KW_INT:
			case KW_INTERSECT:
			case KW_INTO:
			case KW_IS:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LAST:
			case KW_LATERAL:
			case KW_LEFT:
			case KW_LEVEL:
			case KW_LIKE:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCAL:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MAPJOIN:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUS:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MSCK:
			case KW_NONE:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NULL:
			case KW_NULLS:
			case KW_OF:
			case KW_OFFSET:
			case KW_OPTION:
			case KW_ORDER:
			case KW_OUT:
			case KW_OUTER:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITION:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PERCENT:
			case KW_PLUS:
			case KW_PRETTY:
			case KW_PRIMARY:
			case KW_PRINCIPALS:
			case KW_PROCEDURE:
			case KW_PURGE:
			case KW_RANGE:
			case KW_READ:
			case KW_READS:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_REFERENCES:
			case KW_REGEXP:
			case KW_RELOAD:
			case KW_RELY:
			case KW_RENAME:
			case KW_REPAIR:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESTRICT:
			case KW_REVOKE:
			case KW_REWRITE:
			case KW_RIGHT:
			case KW_RLIKE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_ROLLUP:
			case KW_ROW:
			case KW_ROWS:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SET:
			case KW_SETS:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SMALLINT:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_TABLE:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMP:
			case KW_TINYINT:
			case KW_TO:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONS:
			case KW_TRIGGER:
			case KW_TRUE:
			case KW_TRUNCATE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNION:
			case KW_UNIONTYPE:
			case KW_UNLOCK:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_UPDATE:
			case KW_USE:
			case KW_USER:
			case KW_USING:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUES:
			case KW_VALUE_TYPE:
			case KW_VIEW:
			case KW_WHILE:
			case KW_WITH:
			case KW_WORK:
			case KW_WRITE:
			case KW_YEAR:
			case KW_HOLD_DDLTIME:
			case KW_IGNORE:
			case KW_NO_DROP:
			case KW_OFFLINE:
			case KW_PROTECTION:
			case KW_READONLY:
				{
				alt163=2;
				}
				break;
			case KW_URI:
				{
				int LA163_5 = input.LA(2);
				if ( (LA163_5==DOT||LA163_5==KW_FROM||LA163_5==KW_PARTITION||LA163_5==KW_TO) ) {
					alt163=2;
				}
				else if ( (LA163_5==StringLiteral) ) {
					alt163=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 163, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_SERVER:
				{
				switch ( input.LA(2) ) {
				case DOT:
				case KW_FROM:
					{
					alt163=2;
					}
					break;
				case KW_PARTITION:
					{
					int LA163_22 = input.LA(3);
					if ( (LA163_22==LPAREN) ) {
						alt163=2;
					}
					else if ( (LA163_22==KW_FROM||LA163_22==KW_TO) ) {
						alt163=4;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 163, 22, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case KW_TO:
					{
					int LA163_23 = input.LA(3);
					if ( (LA163_23==KW_GROUP||LA163_23==KW_ROLE||LA163_23==KW_USER) ) {
						alt163=2;
					}
					else if ( (LA163_23==KW_FROM||LA163_23==KW_TO) ) {
						alt163=4;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 163, 23, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case Identifier:
				case KW_ABORT:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ALL:
				case KW_ALTER:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ARRAY:
				case KW_AS:
				case KW_ASC:
				case KW_AUTHORIZATION:
				case KW_AUTOCOMMIT:
				case KW_BEFORE:
				case KW_BETWEEN:
				case KW_BIGINT:
				case KW_BINARY:
				case KW_BOOLEAN:
				case KW_BOTH:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_BY:
				case KW_CASCADE:
				case KW_CHANGE:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONSTRAINT:
				case KW_CONTINUE:
				case KW_CREATE:
				case KW_CUBE:
				case KW_CURRENT_DATE:
				case KW_CURRENT_TIMESTAMP:
				case KW_CURSOR:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATE:
				case KW_DATETIME:
				case KW_DAY:
				case KW_DBPROPERTIES:
				case KW_DECIMAL:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELETE:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DESCRIBE:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTRIBUTE:
				case KW_DOUBLE:
				case KW_DROP:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ESCAPED:
				case KW_EXCLUSIVE:
				case KW_EXISTS:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_EXTERNAL:
				case KW_FALSE:
				case KW_FETCH:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FLOAT:
				case KW_FOR:
				case KW_FOREIGN:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FULL:
				case KW_FUNCTIONS:
				case KW_GRANT:
				case KW_GROUP:
				case KW_GROUPING:
				case KW_HOUR:
				case KW_IDXPROPERTIES:
				case KW_IMPORT:
				case KW_IN:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INNER:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_INSERT:
				case KW_INT:
				case KW_INTERSECT:
				case KW_INTO:
				case KW_IS:
				case KW_ISOLATION:
				case KW_ITEMS:
				case KW_JAR:
				case KW_KEY:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LAST:
				case KW_LATERAL:
				case KW_LEFT:
				case KW_LEVEL:
				case KW_LIKE:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCAL:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MAPJOIN:
				case KW_MATERIALIZED:
				case KW_METADATA:
				case KW_MINUS:
				case KW_MINUTE:
				case KW_MONTH:
				case KW_MSCK:
				case KW_NONE:
				case KW_NORELY:
				case KW_NOSCAN:
				case KW_NOVALIDATE:
				case KW_NULL:
				case KW_NULLS:
				case KW_OF:
				case KW_OFFSET:
				case KW_OPTION:
				case KW_ORDER:
				case KW_OUT:
				case KW_OUTER:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PERCENT:
				case KW_PLUS:
				case KW_PRETTY:
				case KW_PRIMARY:
				case KW_PRINCIPALS:
				case KW_PROCEDURE:
				case KW_PURGE:
				case KW_RANGE:
				case KW_READ:
				case KW_READS:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_REFERENCES:
				case KW_REGEXP:
				case KW_RELOAD:
				case KW_RELY:
				case KW_RENAME:
				case KW_REPAIR:
				case KW_REPLACE:
				case KW_REPLICATION:
				case KW_RESTRICT:
				case KW_REVOKE:
				case KW_REWRITE:
				case KW_RIGHT:
				case KW_RLIKE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_ROLLUP:
				case KW_ROW:
				case KW_ROWS:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SECOND:
				case KW_SEMI:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SERVER:
				case KW_SET:
				case KW_SETS:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SMALLINT:
				case KW_SNAPSHOT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_TABLE:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TIMESTAMP:
				case KW_TINYINT:
				case KW_TOUCH:
				case KW_TRANSACTION:
				case KW_TRANSACTIONS:
				case KW_TRIGGER:
				case KW_TRUE:
				case KW_TRUNCATE:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNION:
				case KW_UNIONTYPE:
				case KW_UNLOCK:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_UPDATE:
				case KW_URI:
				case KW_USE:
				case KW_USER:
				case KW_USING:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALIDATE:
				case KW_VALUES:
				case KW_VALUE_TYPE:
				case KW_VIEW:
				case KW_WHILE:
				case KW_WITH:
				case KW_WORK:
				case KW_WRITE:
				case KW_YEAR:
				case KW_HOLD_DDLTIME:
				case KW_IGNORE:
				case KW_NO_DROP:
				case KW_OFFLINE:
				case KW_PROTECTION:
				case KW_READONLY:
					{
					alt163=4;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 163, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 163, 0, input);
				throw nvae;
			}
			switch (alt163) {
				case 1 :
					// grammar/HiveParser.g:1606:7: ( KW_DATABASE | KW_SCHEMA ) identifier
					{
					// grammar/HiveParser.g:1606:7: ( KW_DATABASE | KW_SCHEMA )
					int alt160=2;
					int LA160_0 = input.LA(1);
					if ( (LA160_0==KW_DATABASE) ) {
						alt160=1;
					}
					else if ( (LA160_0==KW_SCHEMA) ) {
						alt160=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 160, 0, input);
						throw nvae;
					}

					switch (alt160) {
						case 1 :
							// grammar/HiveParser.g:1606:8: KW_DATABASE
							{
							KW_DATABASE532=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privObject8687); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE532);

							}
							break;
						case 2 :
							// grammar/HiveParser.g:1606:20: KW_SCHEMA
							{
							KW_SCHEMA533=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_privObject8689); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA533);

							}
							break;

					}

					pushFollow(FOLLOW_identifier_in_privObject8692);
					identifier534=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier534.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1606:42: -> ^( TOK_DB_TYPE identifier )
					{
						// grammar/HiveParser.g:1606:45: ^( TOK_DB_TYPE identifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DB_TYPE, "TOK_DB_TYPE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1607:7: ( KW_TABLE )? tableName ( partitionSpec )?
					{
					// grammar/HiveParser.g:1607:7: ( KW_TABLE )?
					int alt161=2;
					int LA161_0 = input.LA(1);
					if ( (LA161_0==KW_TABLE) ) {
						switch ( input.LA(2) ) {
							case Identifier:
							case KW_ABORT:
							case KW_ADD:
							case KW_ADMIN:
							case KW_AFTER:
							case KW_ALL:
							case KW_ALTER:
							case KW_ANALYZE:
							case KW_ARCHIVE:
							case KW_ARRAY:
							case KW_AS:
							case KW_ASC:
							case KW_AUTHORIZATION:
							case KW_AUTOCOMMIT:
							case KW_BEFORE:
							case KW_BETWEEN:
							case KW_BIGINT:
							case KW_BINARY:
							case KW_BOOLEAN:
							case KW_BOTH:
							case KW_BUCKET:
							case KW_BUCKETS:
							case KW_BY:
							case KW_CASCADE:
							case KW_CHANGE:
							case KW_CLUSTER:
							case KW_CLUSTERED:
							case KW_CLUSTERSTATUS:
							case KW_COLLECTION:
							case KW_COLUMNS:
							case KW_COMMENT:
							case KW_COMPACT:
							case KW_COMPACTIONS:
							case KW_COMPUTE:
							case KW_CONCATENATE:
							case KW_CONSTRAINT:
							case KW_CONTINUE:
							case KW_CREATE:
							case KW_CUBE:
							case KW_CURRENT_DATE:
							case KW_CURRENT_TIMESTAMP:
							case KW_CURSOR:
							case KW_DATA:
							case KW_DATABASES:
							case KW_DATE:
							case KW_DATETIME:
							case KW_DAY:
							case KW_DBPROPERTIES:
							case KW_DECIMAL:
							case KW_DEFERRED:
							case KW_DEFINED:
							case KW_DELETE:
							case KW_DELIMITED:
							case KW_DEPENDENCY:
							case KW_DESC:
							case KW_DESCRIBE:
							case KW_DIRECTORIES:
							case KW_DIRECTORY:
							case KW_DISABLE:
							case KW_DISTRIBUTE:
							case KW_DOUBLE:
							case KW_DROP:
							case KW_ELEM_TYPE:
							case KW_ENABLE:
							case KW_ESCAPED:
							case KW_EXCLUSIVE:
							case KW_EXISTS:
							case KW_EXPLAIN:
							case KW_EXPORT:
							case KW_EXTERNAL:
							case KW_FALSE:
							case KW_FETCH:
							case KW_FIELDS:
							case KW_FILE:
							case KW_FILEFORMAT:
							case KW_FIRST:
							case KW_FLOAT:
							case KW_FOR:
							case KW_FOREIGN:
							case KW_FORMAT:
							case KW_FORMATTED:
							case KW_FULL:
							case KW_FUNCTIONS:
							case KW_GRANT:
							case KW_GROUP:
							case KW_GROUPING:
							case KW_HOUR:
							case KW_IDXPROPERTIES:
							case KW_IMPORT:
							case KW_IN:
							case KW_INDEX:
							case KW_INDEXES:
							case KW_INNER:
							case KW_INPATH:
							case KW_INPUTDRIVER:
							case KW_INPUTFORMAT:
							case KW_INSERT:
							case KW_INT:
							case KW_INTERSECT:
							case KW_INTO:
							case KW_IS:
							case KW_ISOLATION:
							case KW_ITEMS:
							case KW_JAR:
							case KW_KEY:
							case KW_KEYS:
							case KW_KEY_TYPE:
							case KW_LAST:
							case KW_LATERAL:
							case KW_LEFT:
							case KW_LEVEL:
							case KW_LIKE:
							case KW_LIMIT:
							case KW_LINES:
							case KW_LOAD:
							case KW_LOCAL:
							case KW_LOCATION:
							case KW_LOCK:
							case KW_LOCKS:
							case KW_LOGICAL:
							case KW_LONG:
							case KW_MAPJOIN:
							case KW_MATERIALIZED:
							case KW_METADATA:
							case KW_MINUS:
							case KW_MINUTE:
							case KW_MONTH:
							case KW_MSCK:
							case KW_NONE:
							case KW_NORELY:
							case KW_NOSCAN:
							case KW_NOVALIDATE:
							case KW_NULL:
							case KW_NULLS:
							case KW_OF:
							case KW_OFFSET:
							case KW_OPTION:
							case KW_ORDER:
							case KW_OUT:
							case KW_OUTER:
							case KW_OUTPUTDRIVER:
							case KW_OUTPUTFORMAT:
							case KW_OVERWRITE:
							case KW_OWNER:
							case KW_PARTITIONED:
							case KW_PARTITIONS:
							case KW_PERCENT:
							case KW_PLUS:
							case KW_PRETTY:
							case KW_PRIMARY:
							case KW_PRINCIPALS:
							case KW_PROCEDURE:
							case KW_PURGE:
							case KW_RANGE:
							case KW_READ:
							case KW_READS:
							case KW_REBUILD:
							case KW_RECORDREADER:
							case KW_RECORDWRITER:
							case KW_REFERENCES:
							case KW_REGEXP:
							case KW_RELOAD:
							case KW_RELY:
							case KW_RENAME:
							case KW_REPAIR:
							case KW_REPLACE:
							case KW_REPLICATION:
							case KW_RESTRICT:
							case KW_REVOKE:
							case KW_REWRITE:
							case KW_RIGHT:
							case KW_RLIKE:
							case KW_ROLE:
							case KW_ROLES:
							case KW_ROLLUP:
							case KW_ROW:
							case KW_ROWS:
							case KW_SCHEMA:
							case KW_SCHEMAS:
							case KW_SECOND:
							case KW_SEMI:
							case KW_SERDE:
							case KW_SERDEPROPERTIES:
							case KW_SERVER:
							case KW_SET:
							case KW_SETS:
							case KW_SHARED:
							case KW_SHOW:
							case KW_SHOW_DATABASE:
							case KW_SKEWED:
							case KW_SMALLINT:
							case KW_SNAPSHOT:
							case KW_SORT:
							case KW_SORTED:
							case KW_SSL:
							case KW_STATISTICS:
							case KW_STORED:
							case KW_STREAMTABLE:
							case KW_STRING:
							case KW_STRUCT:
							case KW_TABLE:
							case KW_TABLES:
							case KW_TBLPROPERTIES:
							case KW_TEMPORARY:
							case KW_TERMINATED:
							case KW_TIMESTAMP:
							case KW_TINYINT:
							case KW_TOUCH:
							case KW_TRANSACTION:
							case KW_TRANSACTIONS:
							case KW_TRIGGER:
							case KW_TRUE:
							case KW_TRUNCATE:
							case KW_UNARCHIVE:
							case KW_UNDO:
							case KW_UNION:
							case KW_UNIONTYPE:
							case KW_UNLOCK:
							case KW_UNSET:
							case KW_UNSIGNED:
							case KW_UPDATE:
							case KW_URI:
							case KW_USE:
							case KW_USER:
							case KW_USING:
							case KW_UTC:
							case KW_UTCTIMESTAMP:
							case KW_VALIDATE:
							case KW_VALUES:
							case KW_VALUE_TYPE:
							case KW_VIEW:
							case KW_WHILE:
							case KW_WITH:
							case KW_WORK:
							case KW_WRITE:
							case KW_YEAR:
							case KW_HOLD_DDLTIME:
							case KW_IGNORE:
							case KW_NO_DROP:
							case KW_OFFLINE:
							case KW_PROTECTION:
							case KW_READONLY:
								{
								alt161=1;
								}
								break;
							case KW_PARTITION:
								{
								int LA161_7 = input.LA(3);
								if ( (LA161_7==DOT||LA161_7==KW_FROM||LA161_7==KW_PARTITION||LA161_7==KW_TO) ) {
									alt161=1;
								}
								}
								break;
							case KW_TO:
								{
								int LA161_9 = input.LA(3);
								if ( (LA161_9==DOT||LA161_9==KW_FROM||LA161_9==KW_PARTITION||LA161_9==KW_TO) ) {
									alt161=1;
								}
								}
								break;
						}
					}
					switch (alt161) {
						case 1 :
							// grammar/HiveParser.g:1607:7: KW_TABLE
							{
							KW_TABLE535=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privObject8708); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE535);

							}
							break;

					}

					pushFollow(FOLLOW_tableName_in_privObject8711);
					tableName536=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName536.getTree());
					// grammar/HiveParser.g:1607:27: ( partitionSpec )?
					int alt162=2;
					int LA162_0 = input.LA(1);
					if ( (LA162_0==KW_PARTITION) ) {
						alt162=1;
					}
					switch (alt162) {
						case 1 :
							// grammar/HiveParser.g:1607:27: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_privObject8713);
							partitionSpec537=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec537.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: tableName, partitionSpec
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1607:42: -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? )
					{
						// grammar/HiveParser.g:1607:45: ^( TOK_TABLE_TYPE tableName ( partitionSpec )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLE_TYPE, "TOK_TABLE_TYPE"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						// grammar/HiveParser.g:1607:72: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1608:7: KW_URI (path= StringLiteral )
					{
					KW_URI538=(Token)match(input,KW_URI,FOLLOW_KW_URI_in_privObject8733); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_URI.add(KW_URI538);

					// grammar/HiveParser.g:1608:14: (path= StringLiteral )
					// grammar/HiveParser.g:1608:15: path= StringLiteral
					{
					path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_privObject8738); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(path);

					}

					// AST REWRITE
					// elements: path
					// token labels: path
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1608:35: -> ^( TOK_URI_TYPE $path)
					{
						// grammar/HiveParser.g:1608:39: ^( TOK_URI_TYPE $path)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_URI_TYPE, "TOK_URI_TYPE"), root_1);
						adaptor.addChild(root_1, stream_path.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// grammar/HiveParser.g:1609:7: KW_SERVER identifier
					{
					KW_SERVER539=(Token)match(input,KW_SERVER,FOLLOW_KW_SERVER_in_privObject8757); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERVER.add(KW_SERVER539);

					pushFollow(FOLLOW_identifier_in_privObject8759);
					identifier540=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier540.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1609:28: -> ^( TOK_SERVER_TYPE identifier )
					{
						// grammar/HiveParser.g:1609:31: ^( TOK_SERVER_TYPE identifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERVER_TYPE, "TOK_SERVER_TYPE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privObject"


	public static class privObjectCols_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privObjectCols"
	// grammar/HiveParser.g:1612:1: privObjectCols : ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) );
	public final HiveParser.privObjectCols_return privObjectCols() throws RecognitionException {
		HiveParser.privObjectCols_return retval = new HiveParser.privObjectCols_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token path=null;
		Token KW_DATABASE541=null;
		Token KW_SCHEMA542=null;
		Token KW_TABLE544=null;
		Token LPAREN546=null;
		Token RPAREN547=null;
		Token KW_URI549=null;
		Token KW_SERVER550=null;
		ParserRuleReturnScope cols =null;
		ParserRuleReturnScope identifier543 =null;
		ParserRuleReturnScope tableName545 =null;
		ParserRuleReturnScope partitionSpec548 =null;
		ParserRuleReturnScope identifier551 =null;

		CommonTree path_tree=null;
		CommonTree KW_DATABASE541_tree=null;
		CommonTree KW_SCHEMA542_tree=null;
		CommonTree KW_TABLE544_tree=null;
		CommonTree LPAREN546_tree=null;
		CommonTree RPAREN547_tree=null;
		CommonTree KW_URI549_tree=null;
		CommonTree KW_SERVER550_tree=null;
		RewriteRuleTokenStream stream_KW_SERVER=new RewriteRuleTokenStream(adaptor,"token KW_SERVER");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_URI=new RewriteRuleTokenStream(adaptor,"token KW_URI");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		try {
			// grammar/HiveParser.g:1613:5: ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) )
			int alt168=4;
			switch ( input.LA(1) ) {
			case KW_DATABASE:
				{
				alt168=1;
				}
				break;
			case KW_SCHEMA:
				{
				switch ( input.LA(2) ) {
				case Identifier:
				case KW_ABORT:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ALL:
				case KW_ALTER:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ARRAY:
				case KW_AS:
				case KW_ASC:
				case KW_AUTHORIZATION:
				case KW_AUTOCOMMIT:
				case KW_BEFORE:
				case KW_BETWEEN:
				case KW_BIGINT:
				case KW_BINARY:
				case KW_BOOLEAN:
				case KW_BOTH:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_BY:
				case KW_CASCADE:
				case KW_CHANGE:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONSTRAINT:
				case KW_CONTINUE:
				case KW_CREATE:
				case KW_CUBE:
				case KW_CURRENT_DATE:
				case KW_CURRENT_TIMESTAMP:
				case KW_CURSOR:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATE:
				case KW_DATETIME:
				case KW_DAY:
				case KW_DBPROPERTIES:
				case KW_DECIMAL:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELETE:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DESCRIBE:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTRIBUTE:
				case KW_DOUBLE:
				case KW_DROP:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ESCAPED:
				case KW_EXCLUSIVE:
				case KW_EXISTS:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_EXTERNAL:
				case KW_FALSE:
				case KW_FETCH:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FLOAT:
				case KW_FOR:
				case KW_FOREIGN:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FULL:
				case KW_FUNCTIONS:
				case KW_GRANT:
				case KW_GROUP:
				case KW_GROUPING:
				case KW_HOUR:
				case KW_IDXPROPERTIES:
				case KW_IMPORT:
				case KW_IN:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INNER:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_INSERT:
				case KW_INT:
				case KW_INTERSECT:
				case KW_INTO:
				case KW_IS:
				case KW_ISOLATION:
				case KW_ITEMS:
				case KW_JAR:
				case KW_KEY:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LAST:
				case KW_LATERAL:
				case KW_LEFT:
				case KW_LEVEL:
				case KW_LIKE:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCAL:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MAPJOIN:
				case KW_MATERIALIZED:
				case KW_METADATA:
				case KW_MINUS:
				case KW_MINUTE:
				case KW_MONTH:
				case KW_MSCK:
				case KW_NONE:
				case KW_NORELY:
				case KW_NOSCAN:
				case KW_NOVALIDATE:
				case KW_NULL:
				case KW_NULLS:
				case KW_OF:
				case KW_OFFSET:
				case KW_OPTION:
				case KW_ORDER:
				case KW_OUT:
				case KW_OUTER:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PERCENT:
				case KW_PLUS:
				case KW_PRETTY:
				case KW_PRIMARY:
				case KW_PRINCIPALS:
				case KW_PROCEDURE:
				case KW_PURGE:
				case KW_RANGE:
				case KW_READ:
				case KW_READS:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_REFERENCES:
				case KW_REGEXP:
				case KW_RELOAD:
				case KW_RELY:
				case KW_RENAME:
				case KW_REPAIR:
				case KW_REPLACE:
				case KW_REPLICATION:
				case KW_RESTRICT:
				case KW_REVOKE:
				case KW_REWRITE:
				case KW_RIGHT:
				case KW_RLIKE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_ROLLUP:
				case KW_ROW:
				case KW_ROWS:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SECOND:
				case KW_SEMI:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SERVER:
				case KW_SET:
				case KW_SETS:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SMALLINT:
				case KW_SNAPSHOT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_TABLE:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TIMESTAMP:
				case KW_TINYINT:
				case KW_TO:
				case KW_TOUCH:
				case KW_TRANSACTION:
				case KW_TRANSACTIONS:
				case KW_TRIGGER:
				case KW_TRUE:
				case KW_TRUNCATE:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNION:
				case KW_UNIONTYPE:
				case KW_UNLOCK:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_UPDATE:
				case KW_URI:
				case KW_USE:
				case KW_USER:
				case KW_USING:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALIDATE:
				case KW_VALUES:
				case KW_VALUE_TYPE:
				case KW_VIEW:
				case KW_WHILE:
				case KW_WITH:
				case KW_WORK:
				case KW_WRITE:
				case KW_YEAR:
				case KW_HOLD_DDLTIME:
				case KW_IGNORE:
				case KW_NO_DROP:
				case KW_OFFLINE:
				case KW_PROTECTION:
				case KW_READONLY:
					{
					alt168=1;
					}
					break;
				case KW_PARTITION:
					{
					int LA168_11 = input.LA(3);
					if ( (LA168_11==LPAREN) ) {
						alt168=2;
					}
					else if ( (LA168_11==EOF) ) {
						alt168=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 168, 11, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case EOF:
				case DOT:
				case LPAREN:
					{
					alt168=2;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 168, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case Identifier:
			case KW_ABORT:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALL:
			case KW_ALTER:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ARRAY:
			case KW_AS:
			case KW_ASC:
			case KW_AUTHORIZATION:
			case KW_AUTOCOMMIT:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_BOTH:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_BY:
			case KW_CASCADE:
			case KW_CHANGE:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONSTRAINT:
			case KW_CONTINUE:
			case KW_CREATE:
			case KW_CUBE:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_CURSOR:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DBPROPERTIES:
			case KW_DECIMAL:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELETE:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DESCRIBE:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DOUBLE:
			case KW_DROP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ESCAPED:
			case KW_EXCLUSIVE:
			case KW_EXISTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXTERNAL:
			case KW_FALSE:
			case KW_FETCH:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FLOAT:
			case KW_FOR:
			case KW_FOREIGN:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FULL:
			case KW_FUNCTIONS:
			case KW_GRANT:
			case KW_GROUP:
			case KW_GROUPING:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IMPORT:
			case KW_IN:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INNER:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_INSERT:
			case KW_INT:
			case KW_INTERSECT:
			case KW_INTO:
			case KW_IS:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LAST:
			case KW_LATERAL:
			case KW_LEFT:
			case KW_LEVEL:
			case KW_LIKE:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCAL:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MAPJOIN:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUS:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MSCK:
			case KW_NONE:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NULL:
			case KW_NULLS:
			case KW_OF:
			case KW_OFFSET:
			case KW_OPTION:
			case KW_ORDER:
			case KW_OUT:
			case KW_OUTER:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITION:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PERCENT:
			case KW_PLUS:
			case KW_PRETTY:
			case KW_PRIMARY:
			case KW_PRINCIPALS:
			case KW_PROCEDURE:
			case KW_PURGE:
			case KW_RANGE:
			case KW_READ:
			case KW_READS:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_REFERENCES:
			case KW_REGEXP:
			case KW_RELOAD:
			case KW_RELY:
			case KW_RENAME:
			case KW_REPAIR:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESTRICT:
			case KW_REVOKE:
			case KW_REWRITE:
			case KW_RIGHT:
			case KW_RLIKE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_ROLLUP:
			case KW_ROW:
			case KW_ROWS:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SET:
			case KW_SETS:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SMALLINT:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_TABLE:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMP:
			case KW_TINYINT:
			case KW_TO:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONS:
			case KW_TRIGGER:
			case KW_TRUE:
			case KW_TRUNCATE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNION:
			case KW_UNIONTYPE:
			case KW_UNLOCK:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_UPDATE:
			case KW_USE:
			case KW_USER:
			case KW_USING:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUES:
			case KW_VALUE_TYPE:
			case KW_VIEW:
			case KW_WHILE:
			case KW_WITH:
			case KW_WORK:
			case KW_WRITE:
			case KW_YEAR:
			case KW_HOLD_DDLTIME:
			case KW_IGNORE:
			case KW_NO_DROP:
			case KW_OFFLINE:
			case KW_PROTECTION:
			case KW_READONLY:
				{
				alt168=2;
				}
				break;
			case KW_URI:
				{
				int LA168_5 = input.LA(2);
				if ( (LA168_5==EOF||LA168_5==DOT||LA168_5==KW_PARTITION||LA168_5==LPAREN) ) {
					alt168=2;
				}
				else if ( (LA168_5==StringLiteral) ) {
					alt168=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 168, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_SERVER:
				{
				switch ( input.LA(2) ) {
				case EOF:
				case DOT:
				case LPAREN:
					{
					alt168=2;
					}
					break;
				case KW_PARTITION:
					{
					int LA168_23 = input.LA(3);
					if ( (LA168_23==LPAREN) ) {
						alt168=2;
					}
					else if ( (LA168_23==EOF) ) {
						alt168=4;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 168, 23, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case Identifier:
				case KW_ABORT:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ALL:
				case KW_ALTER:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ARRAY:
				case KW_AS:
				case KW_ASC:
				case KW_AUTHORIZATION:
				case KW_AUTOCOMMIT:
				case KW_BEFORE:
				case KW_BETWEEN:
				case KW_BIGINT:
				case KW_BINARY:
				case KW_BOOLEAN:
				case KW_BOTH:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_BY:
				case KW_CASCADE:
				case KW_CHANGE:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONSTRAINT:
				case KW_CONTINUE:
				case KW_CREATE:
				case KW_CUBE:
				case KW_CURRENT_DATE:
				case KW_CURRENT_TIMESTAMP:
				case KW_CURSOR:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATE:
				case KW_DATETIME:
				case KW_DAY:
				case KW_DBPROPERTIES:
				case KW_DECIMAL:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELETE:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DESCRIBE:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTRIBUTE:
				case KW_DOUBLE:
				case KW_DROP:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ESCAPED:
				case KW_EXCLUSIVE:
				case KW_EXISTS:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_EXTERNAL:
				case KW_FALSE:
				case KW_FETCH:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FLOAT:
				case KW_FOR:
				case KW_FOREIGN:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FULL:
				case KW_FUNCTIONS:
				case KW_GRANT:
				case KW_GROUP:
				case KW_GROUPING:
				case KW_HOUR:
				case KW_IDXPROPERTIES:
				case KW_IMPORT:
				case KW_IN:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INNER:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_INSERT:
				case KW_INT:
				case KW_INTERSECT:
				case KW_INTO:
				case KW_IS:
				case KW_ISOLATION:
				case KW_ITEMS:
				case KW_JAR:
				case KW_KEY:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LAST:
				case KW_LATERAL:
				case KW_LEFT:
				case KW_LEVEL:
				case KW_LIKE:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCAL:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MAPJOIN:
				case KW_MATERIALIZED:
				case KW_METADATA:
				case KW_MINUS:
				case KW_MINUTE:
				case KW_MONTH:
				case KW_MSCK:
				case KW_NONE:
				case KW_NORELY:
				case KW_NOSCAN:
				case KW_NOVALIDATE:
				case KW_NULL:
				case KW_NULLS:
				case KW_OF:
				case KW_OFFSET:
				case KW_OPTION:
				case KW_ORDER:
				case KW_OUT:
				case KW_OUTER:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PERCENT:
				case KW_PLUS:
				case KW_PRETTY:
				case KW_PRIMARY:
				case KW_PRINCIPALS:
				case KW_PROCEDURE:
				case KW_PURGE:
				case KW_RANGE:
				case KW_READ:
				case KW_READS:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_REFERENCES:
				case KW_REGEXP:
				case KW_RELOAD:
				case KW_RELY:
				case KW_RENAME:
				case KW_REPAIR:
				case KW_REPLACE:
				case KW_REPLICATION:
				case KW_RESTRICT:
				case KW_REVOKE:
				case KW_REWRITE:
				case KW_RIGHT:
				case KW_RLIKE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_ROLLUP:
				case KW_ROW:
				case KW_ROWS:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SECOND:
				case KW_SEMI:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SERVER:
				case KW_SET:
				case KW_SETS:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SMALLINT:
				case KW_SNAPSHOT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_TABLE:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TIMESTAMP:
				case KW_TINYINT:
				case KW_TO:
				case KW_TOUCH:
				case KW_TRANSACTION:
				case KW_TRANSACTIONS:
				case KW_TRIGGER:
				case KW_TRUE:
				case KW_TRUNCATE:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNION:
				case KW_UNIONTYPE:
				case KW_UNLOCK:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_UPDATE:
				case KW_URI:
				case KW_USE:
				case KW_USER:
				case KW_USING:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALIDATE:
				case KW_VALUES:
				case KW_VALUE_TYPE:
				case KW_VIEW:
				case KW_WHILE:
				case KW_WITH:
				case KW_WORK:
				case KW_WRITE:
				case KW_YEAR:
				case KW_HOLD_DDLTIME:
				case KW_IGNORE:
				case KW_NO_DROP:
				case KW_OFFLINE:
				case KW_PROTECTION:
				case KW_READONLY:
					{
					alt168=4;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 168, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 168, 0, input);
				throw nvae;
			}
			switch (alt168) {
				case 1 :
					// grammar/HiveParser.g:1613:7: ( KW_DATABASE | KW_SCHEMA ) identifier
					{
					// grammar/HiveParser.g:1613:7: ( KW_DATABASE | KW_SCHEMA )
					int alt164=2;
					int LA164_0 = input.LA(1);
					if ( (LA164_0==KW_DATABASE) ) {
						alt164=1;
					}
					else if ( (LA164_0==KW_SCHEMA) ) {
						alt164=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 164, 0, input);
						throw nvae;
					}

					switch (alt164) {
						case 1 :
							// grammar/HiveParser.g:1613:8: KW_DATABASE
							{
							KW_DATABASE541=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privObjectCols8785); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE541);

							}
							break;
						case 2 :
							// grammar/HiveParser.g:1613:20: KW_SCHEMA
							{
							KW_SCHEMA542=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_privObjectCols8787); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA542);

							}
							break;

					}

					pushFollow(FOLLOW_identifier_in_privObjectCols8790);
					identifier543=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier543.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1613:42: -> ^( TOK_DB_TYPE identifier )
					{
						// grammar/HiveParser.g:1613:45: ^( TOK_DB_TYPE identifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DB_TYPE, "TOK_DB_TYPE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1614:7: ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )?
					{
					// grammar/HiveParser.g:1614:7: ( KW_TABLE )?
					int alt165=2;
					int LA165_0 = input.LA(1);
					if ( (LA165_0==KW_TABLE) ) {
						int LA165_1 = input.LA(2);
						if ( ((LA165_1 >= Identifier && LA165_1 <= KW_ANALYZE)||(LA165_1 >= KW_ARCHIVE && LA165_1 <= KW_BY)||LA165_1==KW_CASCADE||LA165_1==KW_CHANGE||(LA165_1 >= KW_CLUSTER && LA165_1 <= KW_COLLECTION)||(LA165_1 >= KW_COLUMNS && LA165_1 <= KW_COMMENT)||(LA165_1 >= KW_COMPACT && LA165_1 <= KW_CONCATENATE)||(LA165_1 >= KW_CONSTRAINT && LA165_1 <= KW_CREATE)||LA165_1==KW_CUBE||(LA165_1 >= KW_CURRENT_DATE && LA165_1 <= KW_DATA)||(LA165_1 >= KW_DATABASES && LA165_1 <= KW_DISABLE)||(LA165_1 >= KW_DISTRIBUTE && LA165_1 <= KW_ELEM_TYPE)||LA165_1==KW_ENABLE||LA165_1==KW_ESCAPED||(LA165_1 >= KW_EXCLUSIVE && LA165_1 <= KW_EXPORT)||(LA165_1 >= KW_EXTERNAL && LA165_1 <= KW_FLOAT)||(LA165_1 >= KW_FOR && LA165_1 <= KW_FORMATTED)||LA165_1==KW_FULL||(LA165_1 >= KW_FUNCTIONS && LA165_1 <= KW_GROUPING)||(LA165_1 >= KW_HOUR && LA165_1 <= KW_IDXPROPERTIES)||(LA165_1 >= KW_IMPORT && LA165_1 <= KW_INTERSECT)||(LA165_1 >= KW_INTO && LA165_1 <= KW_JAR)||(LA165_1 >= KW_KEY && LA165_1 <= KW_LEFT)||(LA165_1 >= KW_LEVEL && LA165_1 <= KW_LONG)||(LA165_1 >= KW_MAPJOIN && LA165_1 <= KW_MONTH)||(LA165_1 >= KW_MSCK && LA165_1 <= KW_NOSCAN)||(LA165_1 >= KW_NOVALIDATE && LA165_1 <= KW_OFFSET)||LA165_1==KW_OPTION||(LA165_1 >= KW_ORDER && LA165_1 <= KW_OUTPUTFORMAT)||(LA165_1 >= KW_OVERWRITE && LA165_1 <= KW_OWNER)||(LA165_1 >= KW_PARTITIONED && LA165_1 <= KW_PLUS)||(LA165_1 >= KW_PRETTY && LA165_1 <= KW_RECORDWRITER)||(LA165_1 >= KW_REFERENCES && LA165_1 <= KW_ROLES)||(LA165_1 >= KW_ROLLUP && LA165_1 <= KW_SECOND)||(LA165_1 >= KW_SEMI && LA165_1 <= KW_SSL)||(LA165_1 >= KW_STATISTICS && LA165_1 <= KW_TABLES)||(LA165_1 >= KW_TBLPROPERTIES && LA165_1 <= KW_TERMINATED)||(LA165_1 >= KW_TIMESTAMP && LA165_1 <= KW_TRANSACTIONS)||(LA165_1 >= KW_TRIGGER && LA165_1 <= KW_UNARCHIVE)||(LA165_1 >= KW_UNDO && LA165_1 <= KW_UNIONTYPE)||(LA165_1 >= KW_UNLOCK && LA165_1 <= KW_VALUE_TYPE)||LA165_1==KW_VIEW||LA165_1==KW_WHILE||(LA165_1 >= KW_WITH && LA165_1 <= KW_YEAR)||LA165_1==KW_HOLD_DDLTIME||LA165_1==KW_IGNORE||LA165_1==KW_NO_DROP||LA165_1==KW_OFFLINE||LA165_1==KW_PROTECTION||LA165_1==KW_READONLY) ) {
							alt165=1;
						}
						else if ( (LA165_1==KW_PARTITION) ) {
							int LA165_7 = input.LA(3);
							if ( (LA165_7==LPAREN) ) {
								int LA165_12 = input.LA(4);
								if ( (!(((useSQL11ReservedKeywordsForIdentifier())))) ) {
									alt165=1;
								}
							}
							else if ( (LA165_7==EOF||LA165_7==DOT||LA165_7==KW_PARTITION) ) {
								alt165=1;
							}
						}
					}
					switch (alt165) {
						case 1 :
							// grammar/HiveParser.g:1614:7: KW_TABLE
							{
							KW_TABLE544=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privObjectCols8806); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE544);

							}
							break;

					}

					pushFollow(FOLLOW_tableName_in_privObjectCols8809);
					tableName545=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName545.getTree());
					// grammar/HiveParser.g:1614:27: ( LPAREN cols= columnNameList RPAREN )?
					int alt166=2;
					int LA166_0 = input.LA(1);
					if ( (LA166_0==LPAREN) ) {
						alt166=1;
					}
					switch (alt166) {
						case 1 :
							// grammar/HiveParser.g:1614:28: LPAREN cols= columnNameList RPAREN
							{
							LPAREN546=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privObjectCols8812); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN546);

							pushFollow(FOLLOW_columnNameList_in_privObjectCols8816);
							cols=columnNameList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnNameList.add(cols.getTree());
							RPAREN547=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privObjectCols8818); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN547);

							}
							break;

					}

					// grammar/HiveParser.g:1614:64: ( partitionSpec )?
					int alt167=2;
					int LA167_0 = input.LA(1);
					if ( (LA167_0==KW_PARTITION) ) {
						alt167=1;
					}
					switch (alt167) {
						case 1 :
							// grammar/HiveParser.g:1614:64: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_privObjectCols8822);
							partitionSpec548=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec548.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: partitionSpec, cols, tableName
					// token labels: 
					// rule labels: cols, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1614:79: -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? )
					{
						// grammar/HiveParser.g:1614:82: ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLE_TYPE, "TOK_TABLE_TYPE"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						// grammar/HiveParser.g:1614:110: ( $cols)?
						if ( stream_cols.hasNext() ) {
							adaptor.addChild(root_1, stream_cols.nextTree());
						}
						stream_cols.reset();

						// grammar/HiveParser.g:1614:116: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1615:7: KW_URI (path= StringLiteral )
					{
					KW_URI549=(Token)match(input,KW_URI,FOLLOW_KW_URI_in_privObjectCols8846); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_URI.add(KW_URI549);

					// grammar/HiveParser.g:1615:14: (path= StringLiteral )
					// grammar/HiveParser.g:1615:15: path= StringLiteral
					{
					path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_privObjectCols8851); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(path);

					}

					// AST REWRITE
					// elements: path
					// token labels: path
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1615:35: -> ^( TOK_URI_TYPE $path)
					{
						// grammar/HiveParser.g:1615:39: ^( TOK_URI_TYPE $path)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_URI_TYPE, "TOK_URI_TYPE"), root_1);
						adaptor.addChild(root_1, stream_path.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// grammar/HiveParser.g:1616:7: KW_SERVER identifier
					{
					KW_SERVER550=(Token)match(input,KW_SERVER,FOLLOW_KW_SERVER_in_privObjectCols8870); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERVER.add(KW_SERVER550);

					pushFollow(FOLLOW_identifier_in_privObjectCols8872);
					identifier551=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier551.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1616:28: -> ^( TOK_SERVER_TYPE identifier )
					{
						// grammar/HiveParser.g:1616:31: ^( TOK_SERVER_TYPE identifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERVER_TYPE, "TOK_SERVER_TYPE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privObjectCols"


	public static class privilegeList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privilegeList"
	// grammar/HiveParser.g:1619:1: privilegeList : privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) ;
	public final HiveParser.privilegeList_return privilegeList() throws RecognitionException {
		HiveParser.privilegeList_return retval = new HiveParser.privilegeList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA553=null;
		ParserRuleReturnScope privlegeDef552 =null;
		ParserRuleReturnScope privlegeDef554 =null;

		CommonTree COMMA553_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_privlegeDef=new RewriteRuleSubtreeStream(adaptor,"rule privlegeDef");

		pushMsg("grant privilege list", state);
		try {
			// grammar/HiveParser.g:1622:5: ( privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) )
			// grammar/HiveParser.g:1622:7: privlegeDef ( COMMA privlegeDef )*
			{
			pushFollow(FOLLOW_privlegeDef_in_privilegeList8907);
			privlegeDef552=privlegeDef();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privlegeDef.add(privlegeDef552.getTree());
			// grammar/HiveParser.g:1622:19: ( COMMA privlegeDef )*
			loop169:
			while (true) {
				int alt169=2;
				int LA169_0 = input.LA(1);
				if ( (LA169_0==COMMA) ) {
					alt169=1;
				}

				switch (alt169) {
				case 1 :
					// grammar/HiveParser.g:1622:20: COMMA privlegeDef
					{
					COMMA553=(Token)match(input,COMMA,FOLLOW_COMMA_in_privilegeList8910); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA553);

					pushFollow(FOLLOW_privlegeDef_in_privilegeList8912);
					privlegeDef554=privlegeDef();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privlegeDef.add(privlegeDef554.getTree());
					}
					break;

				default :
					break loop169;
				}
			}

			// AST REWRITE
			// elements: privlegeDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1623:5: -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
			{
				// grammar/HiveParser.g:1623:8: ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIVILEGE_LIST, "TOK_PRIVILEGE_LIST"), root_1);
				if ( !(stream_privlegeDef.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_privlegeDef.hasNext() ) {
					adaptor.addChild(root_1, stream_privlegeDef.nextTree());
				}
				stream_privlegeDef.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeList"


	public static class privlegeDef_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privlegeDef"
	// grammar/HiveParser.g:1626:1: privlegeDef : privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) ;
	public final HiveParser.privlegeDef_return privlegeDef() throws RecognitionException {
		HiveParser.privlegeDef_return retval = new HiveParser.privlegeDef_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN556=null;
		Token RPAREN557=null;
		ParserRuleReturnScope cols =null;
		ParserRuleReturnScope privilegeType555 =null;

		CommonTree LPAREN556_tree=null;
		CommonTree RPAREN557_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_privilegeType=new RewriteRuleSubtreeStream(adaptor,"rule privilegeType");

		pushMsg("grant privilege", state);
		try {
			// grammar/HiveParser.g:1629:5: ( privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) )
			// grammar/HiveParser.g:1629:7: privilegeType ( LPAREN cols= columnNameList RPAREN )?
			{
			pushFollow(FOLLOW_privilegeType_in_privlegeDef8954);
			privilegeType555=privilegeType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privilegeType.add(privilegeType555.getTree());
			// grammar/HiveParser.g:1629:21: ( LPAREN cols= columnNameList RPAREN )?
			int alt170=2;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==LPAREN) ) {
				alt170=1;
			}
			switch (alt170) {
				case 1 :
					// grammar/HiveParser.g:1629:22: LPAREN cols= columnNameList RPAREN
					{
					LPAREN556=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privlegeDef8957); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN556);

					pushFollow(FOLLOW_columnNameList_in_privlegeDef8961);
					cols=columnNameList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameList.add(cols.getTree());
					RPAREN557=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privlegeDef8963); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN557);

					}
					break;

			}

			// AST REWRITE
			// elements: privilegeType, cols
			// token labels: 
			// rule labels: cols, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1630:5: -> ^( TOK_PRIVILEGE privilegeType ( $cols)? )
			{
				// grammar/HiveParser.g:1630:8: ^( TOK_PRIVILEGE privilegeType ( $cols)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIVILEGE, "TOK_PRIVILEGE"), root_1);
				adaptor.addChild(root_1, stream_privilegeType.nextTree());
				// grammar/HiveParser.g:1630:39: ( $cols)?
				if ( stream_cols.hasNext() ) {
					adaptor.addChild(root_1, stream_cols.nextTree());
				}
				stream_cols.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privlegeDef"


	public static class privilegeType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privilegeType"
	// grammar/HiveParser.g:1633:1: privilegeType : ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) | KW_INSERT -> ^( TOK_PRIV_INSERT ) | KW_DELETE -> ^( TOK_PRIV_DELETE ) );
	public final HiveParser.privilegeType_return privilegeType() throws RecognitionException {
		HiveParser.privilegeType_return retval = new HiveParser.privilegeType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ALL558=null;
		Token KW_ALTER559=null;
		Token KW_UPDATE560=null;
		Token KW_CREATE561=null;
		Token KW_DROP562=null;
		Token KW_INDEX563=null;
		Token KW_LOCK564=null;
		Token KW_SELECT565=null;
		Token KW_SHOW_DATABASE566=null;
		Token KW_INSERT567=null;
		Token KW_DELETE568=null;

		CommonTree KW_ALL558_tree=null;
		CommonTree KW_ALTER559_tree=null;
		CommonTree KW_UPDATE560_tree=null;
		CommonTree KW_CREATE561_tree=null;
		CommonTree KW_DROP562_tree=null;
		CommonTree KW_INDEX563_tree=null;
		CommonTree KW_LOCK564_tree=null;
		CommonTree KW_SELECT565_tree=null;
		CommonTree KW_SHOW_DATABASE566_tree=null;
		CommonTree KW_INSERT567_tree=null;
		CommonTree KW_DELETE568_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
		RewriteRuleTokenStream stream_KW_SHOW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_SHOW_DATABASE");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
		RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
		RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");

		pushMsg("privilege type", state);
		try {
			// grammar/HiveParser.g:1636:5: ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) | KW_INSERT -> ^( TOK_PRIV_INSERT ) | KW_DELETE -> ^( TOK_PRIV_DELETE ) )
			int alt171=11;
			switch ( input.LA(1) ) {
			case KW_ALL:
				{
				alt171=1;
				}
				break;
			case KW_ALTER:
				{
				alt171=2;
				}
				break;
			case KW_UPDATE:
				{
				alt171=3;
				}
				break;
			case KW_CREATE:
				{
				alt171=4;
				}
				break;
			case KW_DROP:
				{
				alt171=5;
				}
				break;
			case KW_INDEX:
				{
				alt171=6;
				}
				break;
			case KW_LOCK:
				{
				alt171=7;
				}
				break;
			case KW_SELECT:
				{
				alt171=8;
				}
				break;
			case KW_SHOW_DATABASE:
				{
				alt171=9;
				}
				break;
			case KW_INSERT:
				{
				alt171=10;
				}
				break;
			case KW_DELETE:
				{
				alt171=11;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 171, 0, input);
				throw nvae;
			}
			switch (alt171) {
				case 1 :
					// grammar/HiveParser.g:1636:7: KW_ALL
					{
					KW_ALL558=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeType9008); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL558);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1636:14: -> ^( TOK_PRIV_ALL )
					{
						// grammar/HiveParser.g:1636:17: ^( TOK_PRIV_ALL )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_ALL, "TOK_PRIV_ALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1637:7: KW_ALTER
					{
					KW_ALTER559=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_privilegeType9022); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER559);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1637:16: -> ^( TOK_PRIV_ALTER_METADATA )
					{
						// grammar/HiveParser.g:1637:19: ^( TOK_PRIV_ALTER_METADATA )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_ALTER_METADATA, "TOK_PRIV_ALTER_METADATA"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1638:7: KW_UPDATE
					{
					KW_UPDATE560=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_privilegeType9036); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE560);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1638:17: -> ^( TOK_PRIV_ALTER_DATA )
					{
						// grammar/HiveParser.g:1638:20: ^( TOK_PRIV_ALTER_DATA )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_ALTER_DATA, "TOK_PRIV_ALTER_DATA"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// grammar/HiveParser.g:1639:7: KW_CREATE
					{
					KW_CREATE561=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_privilegeType9050); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE561);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1639:17: -> ^( TOK_PRIV_CREATE )
					{
						// grammar/HiveParser.g:1639:20: ^( TOK_PRIV_CREATE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_CREATE, "TOK_PRIV_CREATE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// grammar/HiveParser.g:1640:7: KW_DROP
					{
					KW_DROP562=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_privilegeType9064); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP562);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1640:15: -> ^( TOK_PRIV_DROP )
					{
						// grammar/HiveParser.g:1640:18: ^( TOK_PRIV_DROP )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_DROP, "TOK_PRIV_DROP"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// grammar/HiveParser.g:1641:7: KW_INDEX
					{
					KW_INDEX563=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_privilegeType9078); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX563);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1641:16: -> ^( TOK_PRIV_INDEX )
					{
						// grammar/HiveParser.g:1641:19: ^( TOK_PRIV_INDEX )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_INDEX, "TOK_PRIV_INDEX"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// grammar/HiveParser.g:1642:7: KW_LOCK
					{
					KW_LOCK564=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_privilegeType9092); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK564);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1642:15: -> ^( TOK_PRIV_LOCK )
					{
						// grammar/HiveParser.g:1642:18: ^( TOK_PRIV_LOCK )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_LOCK, "TOK_PRIV_LOCK"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 8 :
					// grammar/HiveParser.g:1643:7: KW_SELECT
					{
					KW_SELECT565=(Token)match(input,KW_SELECT,FOLLOW_KW_SELECT_in_privilegeType9106); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SELECT.add(KW_SELECT565);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1643:17: -> ^( TOK_PRIV_SELECT )
					{
						// grammar/HiveParser.g:1643:20: ^( TOK_PRIV_SELECT )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_SELECT, "TOK_PRIV_SELECT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 9 :
					// grammar/HiveParser.g:1644:7: KW_SHOW_DATABASE
					{
					KW_SHOW_DATABASE566=(Token)match(input,KW_SHOW_DATABASE,FOLLOW_KW_SHOW_DATABASE_in_privilegeType9120); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW_DATABASE.add(KW_SHOW_DATABASE566);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1644:24: -> ^( TOK_PRIV_SHOW_DATABASE )
					{
						// grammar/HiveParser.g:1644:27: ^( TOK_PRIV_SHOW_DATABASE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_SHOW_DATABASE, "TOK_PRIV_SHOW_DATABASE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 10 :
					// grammar/HiveParser.g:1645:7: KW_INSERT
					{
					KW_INSERT567=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_privilegeType9134); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT567);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1645:17: -> ^( TOK_PRIV_INSERT )
					{
						// grammar/HiveParser.g:1645:20: ^( TOK_PRIV_INSERT )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_INSERT, "TOK_PRIV_INSERT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 11 :
					// grammar/HiveParser.g:1646:7: KW_DELETE
					{
					KW_DELETE568=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_privilegeType9148); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DELETE.add(KW_DELETE568);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1646:17: -> ^( TOK_PRIV_DELETE )
					{
						// grammar/HiveParser.g:1646:20: ^( TOK_PRIV_DELETE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_DELETE, "TOK_PRIV_DELETE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeType"


	public static class principalSpecification_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "principalSpecification"
	// grammar/HiveParser.g:1649:1: principalSpecification : principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) ;
	public final HiveParser.principalSpecification_return principalSpecification() throws RecognitionException {
		HiveParser.principalSpecification_return retval = new HiveParser.principalSpecification_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA570=null;
		ParserRuleReturnScope principalName569 =null;
		ParserRuleReturnScope principalName571 =null;

		CommonTree COMMA570_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		 pushMsg("user/group/role name list", state); 
		try {
			// grammar/HiveParser.g:1652:5: ( principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) )
			// grammar/HiveParser.g:1652:7: principalName ( COMMA principalName )*
			{
			pushFollow(FOLLOW_principalName_in_principalSpecification9181);
			principalName569=principalName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalName.add(principalName569.getTree());
			// grammar/HiveParser.g:1652:21: ( COMMA principalName )*
			loop172:
			while (true) {
				int alt172=2;
				int LA172_0 = input.LA(1);
				if ( (LA172_0==COMMA) ) {
					alt172=1;
				}

				switch (alt172) {
				case 1 :
					// grammar/HiveParser.g:1652:22: COMMA principalName
					{
					COMMA570=(Token)match(input,COMMA,FOLLOW_COMMA_in_principalSpecification9184); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA570);

					pushFollow(FOLLOW_principalName_in_principalSpecification9186);
					principalName571=principalName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_principalName.add(principalName571.getTree());
					}
					break;

				default :
					break loop172;
				}
			}

			// AST REWRITE
			// elements: principalName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1652:44: -> ^( TOK_PRINCIPAL_NAME ( principalName )+ )
			{
				// grammar/HiveParser.g:1652:47: ^( TOK_PRINCIPAL_NAME ( principalName )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRINCIPAL_NAME, "TOK_PRINCIPAL_NAME"), root_1);
				if ( !(stream_principalName.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_principalName.hasNext() ) {
					adaptor.addChild(root_1, stream_principalName.nextTree());
				}
				stream_principalName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "principalSpecification"


	public static class principalName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "principalName"
	// grammar/HiveParser.g:1655:1: principalName : ( KW_USER principalIdentifier -> ^( TOK_USER principalIdentifier ) | KW_GROUP principalIdentifier -> ^( TOK_GROUP principalIdentifier ) | KW_ROLE identifier -> ^( TOK_ROLE identifier ) );
	public final HiveParser.principalName_return principalName() throws RecognitionException {
		HiveParser.principalName_return retval = new HiveParser.principalName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_USER572=null;
		Token KW_GROUP574=null;
		Token KW_ROLE576=null;
		ParserRuleReturnScope principalIdentifier573 =null;
		ParserRuleReturnScope principalIdentifier575 =null;
		ParserRuleReturnScope identifier577 =null;

		CommonTree KW_USER572_tree=null;
		CommonTree KW_GROUP574_tree=null;
		CommonTree KW_ROLE576_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_USER=new RewriteRuleTokenStream(adaptor,"token KW_USER");
		RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_principalIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule principalIdentifier");

		pushMsg("user|group|role name", state);
		try {
			// grammar/HiveParser.g:1658:5: ( KW_USER principalIdentifier -> ^( TOK_USER principalIdentifier ) | KW_GROUP principalIdentifier -> ^( TOK_GROUP principalIdentifier ) | KW_ROLE identifier -> ^( TOK_ROLE identifier ) )
			int alt173=3;
			switch ( input.LA(1) ) {
			case KW_USER:
				{
				alt173=1;
				}
				break;
			case KW_GROUP:
				{
				alt173=2;
				}
				break;
			case KW_ROLE:
				{
				alt173=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 173, 0, input);
				throw nvae;
			}
			switch (alt173) {
				case 1 :
					// grammar/HiveParser.g:1658:7: KW_USER principalIdentifier
					{
					KW_USER572=(Token)match(input,KW_USER,FOLLOW_KW_USER_in_principalName9224); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_USER.add(KW_USER572);

					pushFollow(FOLLOW_principalIdentifier_in_principalName9226);
					principalIdentifier573=principalIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_principalIdentifier.add(principalIdentifier573.getTree());
					// AST REWRITE
					// elements: principalIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1658:35: -> ^( TOK_USER principalIdentifier )
					{
						// grammar/HiveParser.g:1658:38: ^( TOK_USER principalIdentifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_USER, "TOK_USER"), root_1);
						adaptor.addChild(root_1, stream_principalIdentifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1659:7: KW_GROUP principalIdentifier
					{
					KW_GROUP574=(Token)match(input,KW_GROUP,FOLLOW_KW_GROUP_in_principalName9242); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_GROUP.add(KW_GROUP574);

					pushFollow(FOLLOW_principalIdentifier_in_principalName9244);
					principalIdentifier575=principalIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_principalIdentifier.add(principalIdentifier575.getTree());
					// AST REWRITE
					// elements: principalIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1659:36: -> ^( TOK_GROUP principalIdentifier )
					{
						// grammar/HiveParser.g:1659:39: ^( TOK_GROUP principalIdentifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GROUP, "TOK_GROUP"), root_1);
						adaptor.addChild(root_1, stream_principalIdentifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1660:7: KW_ROLE identifier
					{
					KW_ROLE576=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_principalName9260); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE576);

					pushFollow(FOLLOW_identifier_in_principalName9262);
					identifier577=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier577.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1660:26: -> ^( TOK_ROLE identifier )
					{
						// grammar/HiveParser.g:1660:29: ^( TOK_ROLE identifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ROLE, "TOK_ROLE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "principalName"


	public static class withGrantOption_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "withGrantOption"
	// grammar/HiveParser.g:1663:1: withGrantOption : KW_WITH KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) ;
	public final HiveParser.withGrantOption_return withGrantOption() throws RecognitionException {
		HiveParser.withGrantOption_return retval = new HiveParser.withGrantOption_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_WITH578=null;
		Token KW_GRANT579=null;
		Token KW_OPTION580=null;

		CommonTree KW_WITH578_tree=null;
		CommonTree KW_GRANT579_tree=null;
		CommonTree KW_OPTION580_tree=null;
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");

		pushMsg("with grant option", state);
		try {
			// grammar/HiveParser.g:1666:5: ( KW_WITH KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) )
			// grammar/HiveParser.g:1666:7: KW_WITH KW_GRANT KW_OPTION
			{
			KW_WITH578=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withGrantOption9297); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH578);

			KW_GRANT579=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_withGrantOption9299); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT579);

			KW_OPTION580=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withGrantOption9301); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION580);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1667:5: -> ^( TOK_GRANT_WITH_OPTION )
			{
				// grammar/HiveParser.g:1667:8: ^( TOK_GRANT_WITH_OPTION )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GRANT_WITH_OPTION, "TOK_GRANT_WITH_OPTION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "withGrantOption"


	public static class grantOptionFor_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "grantOptionFor"
	// grammar/HiveParser.g:1670:1: grantOptionFor : KW_GRANT KW_OPTION KW_FOR -> ^( TOK_GRANT_OPTION_FOR ) ;
	public final HiveParser.grantOptionFor_return grantOptionFor() throws RecognitionException {
		HiveParser.grantOptionFor_return retval = new HiveParser.grantOptionFor_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_GRANT581=null;
		Token KW_OPTION582=null;
		Token KW_FOR583=null;

		CommonTree KW_GRANT581_tree=null;
		CommonTree KW_OPTION582_tree=null;
		CommonTree KW_FOR583_tree=null;
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");

		pushMsg("grant option for", state);
		try {
			// grammar/HiveParser.g:1673:5: ( KW_GRANT KW_OPTION KW_FOR -> ^( TOK_GRANT_OPTION_FOR ) )
			// grammar/HiveParser.g:1673:7: KW_GRANT KW_OPTION KW_FOR
			{
			KW_GRANT581=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantOptionFor9338); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT581);

			KW_OPTION582=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_grantOptionFor9340); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION582);

			KW_FOR583=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_grantOptionFor9342); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR583);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1674:5: -> ^( TOK_GRANT_OPTION_FOR )
			{
				// grammar/HiveParser.g:1674:8: ^( TOK_GRANT_OPTION_FOR )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GRANT_OPTION_FOR, "TOK_GRANT_OPTION_FOR"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grantOptionFor"


	public static class adminOptionFor_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "adminOptionFor"
	// grammar/HiveParser.g:1677:1: adminOptionFor : KW_ADMIN KW_OPTION KW_FOR -> ^( TOK_ADMIN_OPTION_FOR ) ;
	public final HiveParser.adminOptionFor_return adminOptionFor() throws RecognitionException {
		HiveParser.adminOptionFor_return retval = new HiveParser.adminOptionFor_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ADMIN584=null;
		Token KW_OPTION585=null;
		Token KW_FOR586=null;

		CommonTree KW_ADMIN584_tree=null;
		CommonTree KW_OPTION585_tree=null;
		CommonTree KW_FOR586_tree=null;
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
		RewriteRuleTokenStream stream_KW_ADMIN=new RewriteRuleTokenStream(adaptor,"token KW_ADMIN");

		pushMsg("admin option for", state);
		try {
			// grammar/HiveParser.g:1680:5: ( KW_ADMIN KW_OPTION KW_FOR -> ^( TOK_ADMIN_OPTION_FOR ) )
			// grammar/HiveParser.g:1680:7: KW_ADMIN KW_OPTION KW_FOR
			{
			KW_ADMIN584=(Token)match(input,KW_ADMIN,FOLLOW_KW_ADMIN_in_adminOptionFor9375); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ADMIN.add(KW_ADMIN584);

			KW_OPTION585=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_adminOptionFor9377); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION585);

			KW_FOR586=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_adminOptionFor9379); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR586);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1681:5: -> ^( TOK_ADMIN_OPTION_FOR )
			{
				// grammar/HiveParser.g:1681:8: ^( TOK_ADMIN_OPTION_FOR )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ADMIN_OPTION_FOR, "TOK_ADMIN_OPTION_FOR"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "adminOptionFor"


	public static class withAdminOption_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "withAdminOption"
	// grammar/HiveParser.g:1684:1: withAdminOption : KW_WITH KW_ADMIN KW_OPTION -> ^( TOK_GRANT_WITH_ADMIN_OPTION ) ;
	public final HiveParser.withAdminOption_return withAdminOption() throws RecognitionException {
		HiveParser.withAdminOption_return retval = new HiveParser.withAdminOption_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_WITH587=null;
		Token KW_ADMIN588=null;
		Token KW_OPTION589=null;

		CommonTree KW_WITH587_tree=null;
		CommonTree KW_ADMIN588_tree=null;
		CommonTree KW_OPTION589_tree=null;
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
		RewriteRuleTokenStream stream_KW_ADMIN=new RewriteRuleTokenStream(adaptor,"token KW_ADMIN");

		pushMsg("with admin option", state);
		try {
			// grammar/HiveParser.g:1687:5: ( KW_WITH KW_ADMIN KW_OPTION -> ^( TOK_GRANT_WITH_ADMIN_OPTION ) )
			// grammar/HiveParser.g:1687:7: KW_WITH KW_ADMIN KW_OPTION
			{
			KW_WITH587=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withAdminOption9412); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH587);

			KW_ADMIN588=(Token)match(input,KW_ADMIN,FOLLOW_KW_ADMIN_in_withAdminOption9414); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ADMIN.add(KW_ADMIN588);

			KW_OPTION589=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withAdminOption9416); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION589);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1688:5: -> ^( TOK_GRANT_WITH_ADMIN_OPTION )
			{
				// grammar/HiveParser.g:1688:8: ^( TOK_GRANT_WITH_ADMIN_OPTION )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GRANT_WITH_ADMIN_OPTION, "TOK_GRANT_WITH_ADMIN_OPTION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "withAdminOption"


	public static class metastoreCheck_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "metastoreCheck"
	// grammar/HiveParser.g:1691:1: metastoreCheck : KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( tableName ( partitionSpec )* )? ) ;
	public final HiveParser.metastoreCheck_return metastoreCheck() throws RecognitionException {
		HiveParser.metastoreCheck_return retval = new HiveParser.metastoreCheck_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token repair=null;
		Token KW_MSCK590=null;
		Token KW_TABLE591=null;
		Token COMMA594=null;
		ParserRuleReturnScope tableName592 =null;
		ParserRuleReturnScope partitionSpec593 =null;
		ParserRuleReturnScope partitionSpec595 =null;

		CommonTree repair_tree=null;
		CommonTree KW_MSCK590_tree=null;
		CommonTree KW_TABLE591_tree=null;
		CommonTree COMMA594_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_REPAIR=new RewriteRuleTokenStream(adaptor,"token KW_REPAIR");
		RewriteRuleTokenStream stream_KW_MSCK=new RewriteRuleTokenStream(adaptor,"token KW_MSCK");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("metastore check statement", state); 
		try {
			// grammar/HiveParser.g:1694:5: ( KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( tableName ( partitionSpec )* )? ) )
			// grammar/HiveParser.g:1694:7: KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )* )?
			{
			KW_MSCK590=(Token)match(input,KW_MSCK,FOLLOW_KW_MSCK_in_metastoreCheck9453); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MSCK.add(KW_MSCK590);

			// grammar/HiveParser.g:1694:15: (repair= KW_REPAIR )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==KW_REPAIR) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// grammar/HiveParser.g:1694:16: repair= KW_REPAIR
					{
					repair=(Token)match(input,KW_REPAIR,FOLLOW_KW_REPAIR_in_metastoreCheck9458); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_REPAIR.add(repair);

					}
					break;

			}

			// grammar/HiveParser.g:1694:35: ( KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )* )?
			int alt177=2;
			int LA177_0 = input.LA(1);
			if ( (LA177_0==KW_TABLE) ) {
				alt177=1;
			}
			switch (alt177) {
				case 1 :
					// grammar/HiveParser.g:1694:36: KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )*
					{
					KW_TABLE591=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_metastoreCheck9463); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE591);

					pushFollow(FOLLOW_tableName_in_metastoreCheck9465);
					tableName592=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName592.getTree());
					// grammar/HiveParser.g:1694:55: ( partitionSpec )?
					int alt175=2;
					int LA175_0 = input.LA(1);
					if ( (LA175_0==KW_PARTITION) ) {
						alt175=1;
					}
					switch (alt175) {
						case 1 :
							// grammar/HiveParser.g:1694:55: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_metastoreCheck9467);
							partitionSpec593=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec593.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:1694:70: ( COMMA partitionSpec )*
					loop176:
					while (true) {
						int alt176=2;
						int LA176_0 = input.LA(1);
						if ( (LA176_0==COMMA) ) {
							alt176=1;
						}

						switch (alt176) {
						case 1 :
							// grammar/HiveParser.g:1694:71: COMMA partitionSpec
							{
							COMMA594=(Token)match(input,COMMA,FOLLOW_COMMA_in_metastoreCheck9471); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA594);

							pushFollow(FOLLOW_partitionSpec_in_metastoreCheck9473);
							partitionSpec595=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec595.getTree());
							}
							break;

						default :
							break loop176;
						}
					}

					}
					break;

			}

			// AST REWRITE
			// elements: tableName, repair, partitionSpec
			// token labels: repair
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_repair=new RewriteRuleTokenStream(adaptor,"token repair",repair);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1695:5: -> ^( TOK_MSCK ( $repair)? ( tableName ( partitionSpec )* )? )
			{
				// grammar/HiveParser.g:1695:8: ^( TOK_MSCK ( $repair)? ( tableName ( partitionSpec )* )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_MSCK, "TOK_MSCK"), root_1);
				// grammar/HiveParser.g:1695:20: ( $repair)?
				if ( stream_repair.hasNext() ) {
					adaptor.addChild(root_1, stream_repair.nextNode());
				}
				stream_repair.reset();

				// grammar/HiveParser.g:1695:28: ( tableName ( partitionSpec )* )?
				if ( stream_tableName.hasNext()||stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_tableName.nextTree());
					// grammar/HiveParser.g:1695:39: ( partitionSpec )*
					while ( stream_partitionSpec.hasNext() ) {
						adaptor.addChild(root_1, stream_partitionSpec.nextTree());
					}
					stream_partitionSpec.reset();

				}
				stream_tableName.reset();
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "metastoreCheck"


	public static class resourceList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "resourceList"
	// grammar/HiveParser.g:1698:1: resourceList : resource ( COMMA resource )* -> ^( TOK_RESOURCE_LIST ( resource )+ ) ;
	public final HiveParser.resourceList_return resourceList() throws RecognitionException {
		HiveParser.resourceList_return retval = new HiveParser.resourceList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA597=null;
		ParserRuleReturnScope resource596 =null;
		ParserRuleReturnScope resource598 =null;

		CommonTree COMMA597_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_resource=new RewriteRuleSubtreeStream(adaptor,"rule resource");

		 pushMsg("resource list", state); 
		try {
			// grammar/HiveParser.g:1701:3: ( resource ( COMMA resource )* -> ^( TOK_RESOURCE_LIST ( resource )+ ) )
			// grammar/HiveParser.g:1702:3: resource ( COMMA resource )*
			{
			pushFollow(FOLLOW_resource_in_resourceList9526);
			resource596=resource();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_resource.add(resource596.getTree());
			// grammar/HiveParser.g:1702:12: ( COMMA resource )*
			loop178:
			while (true) {
				int alt178=2;
				int LA178_0 = input.LA(1);
				if ( (LA178_0==COMMA) ) {
					alt178=1;
				}

				switch (alt178) {
				case 1 :
					// grammar/HiveParser.g:1702:13: COMMA resource
					{
					COMMA597=(Token)match(input,COMMA,FOLLOW_COMMA_in_resourceList9529); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA597);

					pushFollow(FOLLOW_resource_in_resourceList9531);
					resource598=resource();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_resource.add(resource598.getTree());
					}
					break;

				default :
					break loop178;
				}
			}

			// AST REWRITE
			// elements: resource
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1702:30: -> ^( TOK_RESOURCE_LIST ( resource )+ )
			{
				// grammar/HiveParser.g:1702:33: ^( TOK_RESOURCE_LIST ( resource )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RESOURCE_LIST, "TOK_RESOURCE_LIST"), root_1);
				if ( !(stream_resource.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_resource.hasNext() ) {
					adaptor.addChild(root_1, stream_resource.nextTree());
				}
				stream_resource.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "resourceList"


	public static class resource_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "resource"
	// grammar/HiveParser.g:1705:1: resource : resType= resourceType resPath= StringLiteral -> ^( TOK_RESOURCE_URI $resType $resPath) ;
	public final HiveParser.resource_return resource() throws RecognitionException {
		HiveParser.resource_return retval = new HiveParser.resource_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token resPath=null;
		ParserRuleReturnScope resType =null;

		CommonTree resPath_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleSubtreeStream stream_resourceType=new RewriteRuleSubtreeStream(adaptor,"rule resourceType");

		 pushMsg("resource", state); 
		try {
			// grammar/HiveParser.g:1708:3: (resType= resourceType resPath= StringLiteral -> ^( TOK_RESOURCE_URI $resType $resPath) )
			// grammar/HiveParser.g:1709:3: resType= resourceType resPath= StringLiteral
			{
			pushFollow(FOLLOW_resourceType_in_resource9569);
			resType=resourceType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_resourceType.add(resType.getTree());
			resPath=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_resource9573); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(resPath);

			// AST REWRITE
			// elements: resType, resPath
			// token labels: resPath
			// rule labels: resType, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_resPath=new RewriteRuleTokenStream(adaptor,"token resPath",resPath);
			RewriteRuleSubtreeStream stream_resType=new RewriteRuleSubtreeStream(adaptor,"rule resType",resType!=null?resType.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1709:46: -> ^( TOK_RESOURCE_URI $resType $resPath)
			{
				// grammar/HiveParser.g:1709:49: ^( TOK_RESOURCE_URI $resType $resPath)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RESOURCE_URI, "TOK_RESOURCE_URI"), root_1);
				adaptor.addChild(root_1, stream_resType.nextTree());
				adaptor.addChild(root_1, stream_resPath.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "resource"


	public static class resourceType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "resourceType"
	// grammar/HiveParser.g:1712:1: resourceType : ( KW_JAR -> ^( TOK_JAR ) | KW_FILE -> ^( TOK_FILE ) | KW_ARCHIVE -> ^( TOK_ARCHIVE ) );
	public final HiveParser.resourceType_return resourceType() throws RecognitionException {
		HiveParser.resourceType_return retval = new HiveParser.resourceType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_JAR599=null;
		Token KW_FILE600=null;
		Token KW_ARCHIVE601=null;

		CommonTree KW_JAR599_tree=null;
		CommonTree KW_FILE600_tree=null;
		CommonTree KW_ARCHIVE601_tree=null;
		RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
		RewriteRuleTokenStream stream_KW_JAR=new RewriteRuleTokenStream(adaptor,"token KW_JAR");
		RewriteRuleTokenStream stream_KW_FILE=new RewriteRuleTokenStream(adaptor,"token KW_FILE");

		 pushMsg("resource type", state); 
		try {
			// grammar/HiveParser.g:1715:3: ( KW_JAR -> ^( TOK_JAR ) | KW_FILE -> ^( TOK_FILE ) | KW_ARCHIVE -> ^( TOK_ARCHIVE ) )
			int alt179=3;
			switch ( input.LA(1) ) {
			case KW_JAR:
				{
				alt179=1;
				}
				break;
			case KW_FILE:
				{
				alt179=2;
				}
				break;
			case KW_ARCHIVE:
				{
				alt179=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 179, 0, input);
				throw nvae;
			}
			switch (alt179) {
				case 1 :
					// grammar/HiveParser.g:1716:3: KW_JAR
					{
					KW_JAR599=(Token)match(input,KW_JAR,FOLLOW_KW_JAR_in_resourceType9610); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_JAR.add(KW_JAR599);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1716:10: -> ^( TOK_JAR )
					{
						// grammar/HiveParser.g:1716:13: ^( TOK_JAR )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_JAR, "TOK_JAR"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1718:3: KW_FILE
					{
					KW_FILE600=(Token)match(input,KW_FILE,FOLLOW_KW_FILE_in_resourceType9624); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FILE.add(KW_FILE600);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1718:11: -> ^( TOK_FILE )
					{
						// grammar/HiveParser.g:1718:14: ^( TOK_FILE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FILE, "TOK_FILE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1720:3: KW_ARCHIVE
					{
					KW_ARCHIVE601=(Token)match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_resourceType9638); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ARCHIVE.add(KW_ARCHIVE601);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1720:14: -> ^( TOK_ARCHIVE )
					{
						// grammar/HiveParser.g:1720:17: ^( TOK_ARCHIVE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ARCHIVE, "TOK_ARCHIVE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "resourceType"


	public static class createFunctionStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createFunctionStatement"
	// grammar/HiveParser.g:1723:1: createFunctionStatement : KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )? -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY ) -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? ) ;
	public final HiveParser.createFunctionStatement_return createFunctionStatement() throws RecognitionException {
		HiveParser.createFunctionStatement_return retval = new HiveParser.createFunctionStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token temp=null;
		Token KW_CREATE602=null;
		Token KW_FUNCTION603=null;
		Token KW_AS605=null;
		Token StringLiteral606=null;
		Token KW_USING607=null;
		ParserRuleReturnScope rList =null;
		ParserRuleReturnScope functionIdentifier604 =null;

		CommonTree temp_tree=null;
		CommonTree KW_CREATE602_tree=null;
		CommonTree KW_FUNCTION603_tree=null;
		CommonTree KW_AS605_tree=null;
		CommonTree StringLiteral606_tree=null;
		CommonTree KW_USING607_tree=null;
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_functionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule functionIdentifier");
		RewriteRuleSubtreeStream stream_resourceList=new RewriteRuleSubtreeStream(adaptor,"rule resourceList");

		 pushMsg("create function statement", state); 
		try {
			// grammar/HiveParser.g:1726:5: ( KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )? -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY ) -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? ) )
			// grammar/HiveParser.g:1726:7: KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )?
			{
			KW_CREATE602=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createFunctionStatement9669); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE602);

			// grammar/HiveParser.g:1726:17: (temp= KW_TEMPORARY )?
			int alt180=2;
			int LA180_0 = input.LA(1);
			if ( (LA180_0==KW_TEMPORARY) ) {
				alt180=1;
			}
			switch (alt180) {
				case 1 :
					// grammar/HiveParser.g:1726:18: temp= KW_TEMPORARY
					{
					temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createFunctionStatement9674); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);

					}
					break;

			}

			KW_FUNCTION603=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_createFunctionStatement9678); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION603);

			pushFollow(FOLLOW_functionIdentifier_in_createFunctionStatement9680);
			functionIdentifier604=functionIdentifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_functionIdentifier.add(functionIdentifier604.getTree());
			KW_AS605=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createFunctionStatement9682); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS605);

			StringLiteral606=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createFunctionStatement9684); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral606);

			// grammar/HiveParser.g:1727:7: ( KW_USING rList= resourceList )?
			int alt181=2;
			int LA181_0 = input.LA(1);
			if ( (LA181_0==KW_USING) ) {
				alt181=1;
			}
			switch (alt181) {
				case 1 :
					// grammar/HiveParser.g:1727:8: KW_USING rList= resourceList
					{
					KW_USING607=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_createFunctionStatement9693); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_USING.add(KW_USING607);

					pushFollow(FOLLOW_resourceList_in_createFunctionStatement9697);
					rList=resourceList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_resourceList.add(rList.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: functionIdentifier, StringLiteral, rList, StringLiteral, rList, functionIdentifier
			// token labels: 
			// rule labels: rList, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_rList=new RewriteRuleSubtreeStream(adaptor,"rule rList",rList!=null?rList.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1728:5: -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY )
			if (temp != null) {
				// grammar/HiveParser.g:1728:25: ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				// grammar/HiveParser.g:1728:80: ( $rList)?
				if ( stream_rList.hasNext() ) {
					adaptor.addChild(root_1, stream_rList.nextTree());
				}
				stream_rList.reset();

				adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_TEMPORARY, "TOK_TEMPORARY"));
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1729:5: -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? )
			{
				// grammar/HiveParser.g:1729:25: ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				// grammar/HiveParser.g:1729:80: ( $rList)?
				if ( stream_rList.hasNext() ) {
					adaptor.addChild(root_1, stream_rList.nextTree());
				}
				stream_rList.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createFunctionStatement"


	public static class dropFunctionStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropFunctionStatement"
	// grammar/HiveParser.g:1732:1: dropFunctionStatement : KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY ) -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? ) ;
	public final HiveParser.dropFunctionStatement_return dropFunctionStatement() throws RecognitionException {
		HiveParser.dropFunctionStatement_return retval = new HiveParser.dropFunctionStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token temp=null;
		Token KW_DROP608=null;
		Token KW_FUNCTION609=null;
		ParserRuleReturnScope ifExists610 =null;
		ParserRuleReturnScope functionIdentifier611 =null;

		CommonTree temp_tree=null;
		CommonTree KW_DROP608_tree=null;
		CommonTree KW_FUNCTION609_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_functionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule functionIdentifier");

		 pushMsg("drop function statement", state); 
		try {
			// grammar/HiveParser.g:1735:5: ( KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY ) -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? ) )
			// grammar/HiveParser.g:1735:7: KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier
			{
			KW_DROP608=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropFunctionStatement9783); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP608);

			// grammar/HiveParser.g:1735:15: (temp= KW_TEMPORARY )?
			int alt182=2;
			int LA182_0 = input.LA(1);
			if ( (LA182_0==KW_TEMPORARY) ) {
				alt182=1;
			}
			switch (alt182) {
				case 1 :
					// grammar/HiveParser.g:1735:16: temp= KW_TEMPORARY
					{
					temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropFunctionStatement9788); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);

					}
					break;

			}

			KW_FUNCTION609=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_dropFunctionStatement9792); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION609);

			// grammar/HiveParser.g:1735:48: ( ifExists )?
			int alt183=2;
			int LA183_0 = input.LA(1);
			if ( (LA183_0==KW_IF) ) {
				alt183=1;
			}
			switch (alt183) {
				case 1 :
					// grammar/HiveParser.g:1735:48: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropFunctionStatement9794);
					ifExists610=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists610.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_functionIdentifier_in_dropFunctionStatement9797);
			functionIdentifier611=functionIdentifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_functionIdentifier.add(functionIdentifier611.getTree());
			// AST REWRITE
			// elements: ifExists, ifExists, functionIdentifier, functionIdentifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1736:5: -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY )
			if (temp != null) {
				// grammar/HiveParser.g:1736:25: ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				// grammar/HiveParser.g:1736:63: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_TEMPORARY, "TOK_TEMPORARY"));
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1737:5: -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? )
			{
				// grammar/HiveParser.g:1737:25: ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				// grammar/HiveParser.g:1737:63: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropFunctionStatement"


	public static class reloadFunctionStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "reloadFunctionStatement"
	// grammar/HiveParser.g:1740:1: reloadFunctionStatement : KW_RELOAD KW_FUNCTION -> ^( TOK_RELOADFUNCTION ) ;
	public final HiveParser.reloadFunctionStatement_return reloadFunctionStatement() throws RecognitionException {
		HiveParser.reloadFunctionStatement_return retval = new HiveParser.reloadFunctionStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RELOAD612=null;
		Token KW_FUNCTION613=null;

		CommonTree KW_RELOAD612_tree=null;
		CommonTree KW_FUNCTION613_tree=null;
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_RELOAD=new RewriteRuleTokenStream(adaptor,"token KW_RELOAD");

		 pushMsg("reload function statement", state); 
		try {
			// grammar/HiveParser.g:1743:5: ( KW_RELOAD KW_FUNCTION -> ^( TOK_RELOADFUNCTION ) )
			// grammar/HiveParser.g:1743:7: KW_RELOAD KW_FUNCTION
			{
			KW_RELOAD612=(Token)match(input,KW_RELOAD,FOLLOW_KW_RELOAD_in_reloadFunctionStatement9875); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_RELOAD.add(KW_RELOAD612);

			KW_FUNCTION613=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_reloadFunctionStatement9877); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION613);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1743:29: -> ^( TOK_RELOADFUNCTION )
			{
				// grammar/HiveParser.g:1743:32: ^( TOK_RELOADFUNCTION )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RELOADFUNCTION, "TOK_RELOADFUNCTION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reloadFunctionStatement"


	public static class createMacroStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createMacroStatement"
	// grammar/HiveParser.g:1745:1: createMacroStatement : KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression ) ;
	public final HiveParser.createMacroStatement_return createMacroStatement() throws RecognitionException {
		HiveParser.createMacroStatement_return retval = new HiveParser.createMacroStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CREATE614=null;
		Token KW_TEMPORARY615=null;
		Token KW_MACRO616=null;
		Token Identifier617=null;
		Token LPAREN618=null;
		Token RPAREN620=null;
		ParserRuleReturnScope columnNameTypeList619 =null;
		ParserRuleReturnScope expression621 =null;

		CommonTree KW_CREATE614_tree=null;
		CommonTree KW_TEMPORARY615_tree=null;
		CommonTree KW_MACRO616_tree=null;
		CommonTree Identifier617_tree=null;
		CommonTree LPAREN618_tree=null;
		CommonTree RPAREN620_tree=null;
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_MACRO=new RewriteRuleTokenStream(adaptor,"token KW_MACRO");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");

		 pushMsg("create macro statement", state); 
		try {
			// grammar/HiveParser.g:1748:5: ( KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression ) )
			// grammar/HiveParser.g:1748:7: KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression
			{
			KW_CREATE614=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createMacroStatement9905); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE614);

			KW_TEMPORARY615=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createMacroStatement9907); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(KW_TEMPORARY615);

			KW_MACRO616=(Token)match(input,KW_MACRO,FOLLOW_KW_MACRO_in_createMacroStatement9909); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MACRO.add(KW_MACRO616);

			Identifier617=(Token)match(input,Identifier,FOLLOW_Identifier_in_createMacroStatement9911); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Identifier.add(Identifier617);

			LPAREN618=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createMacroStatement9919); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN618);

			// grammar/HiveParser.g:1749:14: ( columnNameTypeList )?
			int alt184=2;
			int LA184_0 = input.LA(1);
			if ( ((LA184_0 >= Identifier && LA184_0 <= KW_ANALYZE)||(LA184_0 >= KW_ARCHIVE && LA184_0 <= KW_BY)||LA184_0==KW_CASCADE||LA184_0==KW_CHANGE||(LA184_0 >= KW_CLUSTER && LA184_0 <= KW_COLLECTION)||(LA184_0 >= KW_COLUMNS && LA184_0 <= KW_COMMENT)||(LA184_0 >= KW_COMPACT && LA184_0 <= KW_CONCATENATE)||(LA184_0 >= KW_CONSTRAINT && LA184_0 <= KW_CREATE)||LA184_0==KW_CUBE||(LA184_0 >= KW_CURRENT_DATE && LA184_0 <= KW_DATA)||(LA184_0 >= KW_DATABASES && LA184_0 <= KW_DISABLE)||(LA184_0 >= KW_DISTRIBUTE && LA184_0 <= KW_ELEM_TYPE)||LA184_0==KW_ENABLE||LA184_0==KW_ESCAPED||(LA184_0 >= KW_EXCLUSIVE && LA184_0 <= KW_EXPORT)||(LA184_0 >= KW_EXTERNAL && LA184_0 <= KW_FLOAT)||(LA184_0 >= KW_FOR && LA184_0 <= KW_FORMATTED)||LA184_0==KW_FULL||(LA184_0 >= KW_FUNCTIONS && LA184_0 <= KW_GROUPING)||(LA184_0 >= KW_HOUR && LA184_0 <= KW_IDXPROPERTIES)||(LA184_0 >= KW_IMPORT && LA184_0 <= KW_INTERSECT)||(LA184_0 >= KW_INTO && LA184_0 <= KW_JAR)||(LA184_0 >= KW_KEY && LA184_0 <= KW_LEFT)||(LA184_0 >= KW_LEVEL && LA184_0 <= KW_LONG)||(LA184_0 >= KW_MAPJOIN && LA184_0 <= KW_MONTH)||(LA184_0 >= KW_MSCK && LA184_0 <= KW_NOSCAN)||(LA184_0 >= KW_NOVALIDATE && LA184_0 <= KW_OFFSET)||LA184_0==KW_OPTION||(LA184_0 >= KW_ORDER && LA184_0 <= KW_OUTPUTFORMAT)||(LA184_0 >= KW_OVERWRITE && LA184_0 <= KW_OWNER)||(LA184_0 >= KW_PARTITION && LA184_0 <= KW_PLUS)||(LA184_0 >= KW_PRETTY && LA184_0 <= KW_RECORDWRITER)||(LA184_0 >= KW_REFERENCES && LA184_0 <= KW_ROLES)||(LA184_0 >= KW_ROLLUP && LA184_0 <= KW_SECOND)||(LA184_0 >= KW_SEMI && LA184_0 <= KW_SSL)||(LA184_0 >= KW_STATISTICS && LA184_0 <= KW_TABLES)||(LA184_0 >= KW_TBLPROPERTIES && LA184_0 <= KW_TERMINATED)||(LA184_0 >= KW_TIMESTAMP && LA184_0 <= KW_TRANSACTIONS)||(LA184_0 >= KW_TRIGGER && LA184_0 <= KW_UNARCHIVE)||(LA184_0 >= KW_UNDO && LA184_0 <= KW_UNIONTYPE)||(LA184_0 >= KW_UNLOCK && LA184_0 <= KW_VALUE_TYPE)||LA184_0==KW_VIEW||LA184_0==KW_WHILE||(LA184_0 >= KW_WITH && LA184_0 <= KW_YEAR)||LA184_0==KW_HOLD_DDLTIME||LA184_0==KW_IGNORE||LA184_0==KW_NO_DROP||LA184_0==KW_OFFLINE||LA184_0==KW_PROTECTION||LA184_0==KW_READONLY) ) {
				alt184=1;
			}
			switch (alt184) {
				case 1 :
					// grammar/HiveParser.g:1749:14: columnNameTypeList
					{
					pushFollow(FOLLOW_columnNameTypeList_in_createMacroStatement9921);
					columnNameTypeList619=columnNameTypeList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameTypeList.add(columnNameTypeList619.getTree());
					}
					break;

			}

			RPAREN620=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createMacroStatement9924); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN620);

			pushFollow(FOLLOW_expression_in_createMacroStatement9926);
			expression621=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression621.getTree());
			// AST REWRITE
			// elements: columnNameTypeList, Identifier, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1750:5: -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression )
			{
				// grammar/HiveParser.g:1750:8: ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEMACRO, "TOK_CREATEMACRO"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// grammar/HiveParser.g:1750:37: ( columnNameTypeList )?
				if ( stream_columnNameTypeList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				}
				stream_columnNameTypeList.reset();

				adaptor.addChild(root_1, stream_expression.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createMacroStatement"


	public static class dropMacroStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropMacroStatement"
	// grammar/HiveParser.g:1753:1: dropMacroStatement : KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier -> ^( TOK_DROPMACRO Identifier ( ifExists )? ) ;
	public final HiveParser.dropMacroStatement_return dropMacroStatement() throws RecognitionException {
		HiveParser.dropMacroStatement_return retval = new HiveParser.dropMacroStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP622=null;
		Token KW_TEMPORARY623=null;
		Token KW_MACRO624=null;
		Token Identifier626=null;
		ParserRuleReturnScope ifExists625 =null;

		CommonTree KW_DROP622_tree=null;
		CommonTree KW_TEMPORARY623_tree=null;
		CommonTree KW_MACRO624_tree=null;
		CommonTree Identifier626_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_MACRO=new RewriteRuleTokenStream(adaptor,"token KW_MACRO");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg("drop macro statement", state); 
		try {
			// grammar/HiveParser.g:1756:5: ( KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier -> ^( TOK_DROPMACRO Identifier ( ifExists )? ) )
			// grammar/HiveParser.g:1756:7: KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier
			{
			KW_DROP622=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropMacroStatement9970); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP622);

			KW_TEMPORARY623=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropMacroStatement9972); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(KW_TEMPORARY623);

			KW_MACRO624=(Token)match(input,KW_MACRO,FOLLOW_KW_MACRO_in_dropMacroStatement9974); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MACRO.add(KW_MACRO624);

			// grammar/HiveParser.g:1756:37: ( ifExists )?
			int alt185=2;
			int LA185_0 = input.LA(1);
			if ( (LA185_0==KW_IF) ) {
				alt185=1;
			}
			switch (alt185) {
				case 1 :
					// grammar/HiveParser.g:1756:37: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropMacroStatement9976);
					ifExists625=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists625.getTree());
					}
					break;

			}

			Identifier626=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropMacroStatement9979); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Identifier.add(Identifier626);

			// AST REWRITE
			// elements: Identifier, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1757:5: -> ^( TOK_DROPMACRO Identifier ( ifExists )? )
			{
				// grammar/HiveParser.g:1757:8: ^( TOK_DROPMACRO Identifier ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPMACRO, "TOK_DROPMACRO"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// grammar/HiveParser.g:1757:35: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropMacroStatement"


	public static class createViewStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createViewStatement"
	// grammar/HiveParser.g:1760:1: createViewStatement : KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) ;
	public final HiveParser.createViewStatement_return createViewStatement() throws RecognitionException {
		HiveParser.createViewStatement_return retval = new HiveParser.createViewStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CREATE627=null;
		Token KW_VIEW629=null;
		Token LPAREN631=null;
		Token RPAREN633=null;
		Token KW_AS637=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope orReplace628 =null;
		ParserRuleReturnScope ifNotExists630 =null;
		ParserRuleReturnScope columnNameCommentList632 =null;
		ParserRuleReturnScope tableComment634 =null;
		ParserRuleReturnScope viewPartition635 =null;
		ParserRuleReturnScope tablePropertiesPrefixed636 =null;
		ParserRuleReturnScope selectStatementWithCTE638 =null;

		CommonTree KW_CREATE627_tree=null;
		CommonTree KW_VIEW629_tree=null;
		CommonTree LPAREN631_tree=null;
		CommonTree RPAREN633_tree=null;
		CommonTree KW_AS637_tree=null;
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_columnNameCommentList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameCommentList");
		RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
		RewriteRuleSubtreeStream stream_orReplace=new RewriteRuleSubtreeStream(adaptor,"rule orReplace");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
		RewriteRuleSubtreeStream stream_viewPartition=new RewriteRuleSubtreeStream(adaptor,"rule viewPartition");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");


		    pushMsg("create view statement", state);

		try {
			// grammar/HiveParser.g:1765:5: ( KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) )
			// grammar/HiveParser.g:1765:7: KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE
			{
			KW_CREATE627=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createViewStatement10021); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE627);

			// grammar/HiveParser.g:1765:17: ( orReplace )?
			int alt186=2;
			int LA186_0 = input.LA(1);
			if ( (LA186_0==KW_OR) ) {
				alt186=1;
			}
			switch (alt186) {
				case 1 :
					// grammar/HiveParser.g:1765:18: orReplace
					{
					pushFollow(FOLLOW_orReplace_in_createViewStatement10024);
					orReplace628=orReplace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orReplace.add(orReplace628.getTree());
					}
					break;

			}

			KW_VIEW629=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createViewStatement10028); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW629);

			// grammar/HiveParser.g:1765:38: ( ifNotExists )?
			int alt187=2;
			int LA187_0 = input.LA(1);
			if ( (LA187_0==KW_IF) ) {
				alt187=1;
			}
			switch (alt187) {
				case 1 :
					// grammar/HiveParser.g:1765:39: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createViewStatement10031);
					ifNotExists630=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists630.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_createViewStatement10037);
			name=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(name.getTree());
			// grammar/HiveParser.g:1766:9: ( LPAREN columnNameCommentList RPAREN )?
			int alt188=2;
			int LA188_0 = input.LA(1);
			if ( (LA188_0==LPAREN) ) {
				alt188=1;
			}
			switch (alt188) {
				case 1 :
					// grammar/HiveParser.g:1766:10: LPAREN columnNameCommentList RPAREN
					{
					LPAREN631=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createViewStatement10048); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN631);

					pushFollow(FOLLOW_columnNameCommentList_in_createViewStatement10050);
					columnNameCommentList632=columnNameCommentList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameCommentList.add(columnNameCommentList632.getTree());
					RPAREN633=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createViewStatement10052); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN633);

					}
					break;

			}

			// grammar/HiveParser.g:1766:48: ( tableComment )?
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==KW_COMMENT) ) {
				alt189=1;
			}
			switch (alt189) {
				case 1 :
					// grammar/HiveParser.g:1766:48: tableComment
					{
					pushFollow(FOLLOW_tableComment_in_createViewStatement10056);
					tableComment634=tableComment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableComment.add(tableComment634.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:1766:62: ( viewPartition )?
			int alt190=2;
			int LA190_0 = input.LA(1);
			if ( (LA190_0==KW_PARTITIONED) ) {
				alt190=1;
			}
			switch (alt190) {
				case 1 :
					// grammar/HiveParser.g:1766:62: viewPartition
					{
					pushFollow(FOLLOW_viewPartition_in_createViewStatement10059);
					viewPartition635=viewPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_viewPartition.add(viewPartition635.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:1767:9: ( tablePropertiesPrefixed )?
			int alt191=2;
			int LA191_0 = input.LA(1);
			if ( (LA191_0==KW_TBLPROPERTIES) ) {
				alt191=1;
			}
			switch (alt191) {
				case 1 :
					// grammar/HiveParser.g:1767:9: tablePropertiesPrefixed
					{
					pushFollow(FOLLOW_tablePropertiesPrefixed_in_createViewStatement10070);
					tablePropertiesPrefixed636=tablePropertiesPrefixed();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed636.getTree());
					}
					break;

			}

			KW_AS637=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createViewStatement10081); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS637);

			pushFollow(FOLLOW_selectStatementWithCTE_in_createViewStatement10091);
			selectStatementWithCTE638=selectStatementWithCTE();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_selectStatementWithCTE.add(selectStatementWithCTE638.getTree());
			// AST REWRITE
			// elements: tablePropertiesPrefixed, name, orReplace, selectStatementWithCTE, viewPartition, tableComment, columnNameCommentList, ifNotExists
			// token labels: 
			// rule labels: name, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1770:5: -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
			{
				// grammar/HiveParser.g:1770:8: ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEVIEW, "TOK_CREATEVIEW"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// grammar/HiveParser.g:1770:31: ( orReplace )?
				if ( stream_orReplace.hasNext() ) {
					adaptor.addChild(root_1, stream_orReplace.nextTree());
				}
				stream_orReplace.reset();

				// grammar/HiveParser.g:1771:10: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// grammar/HiveParser.g:1772:10: ( columnNameCommentList )?
				if ( stream_columnNameCommentList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameCommentList.nextTree());
				}
				stream_columnNameCommentList.reset();

				// grammar/HiveParser.g:1773:10: ( tableComment )?
				if ( stream_tableComment.hasNext() ) {
					adaptor.addChild(root_1, stream_tableComment.nextTree());
				}
				stream_tableComment.reset();

				// grammar/HiveParser.g:1774:10: ( viewPartition )?
				if ( stream_viewPartition.hasNext() ) {
					adaptor.addChild(root_1, stream_viewPartition.nextTree());
				}
				stream_viewPartition.reset();

				// grammar/HiveParser.g:1775:10: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createViewStatement"


	public static class viewPartition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "viewPartition"
	// grammar/HiveParser.g:1780:1: viewPartition : KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) ;
	public final HiveParser.viewPartition_return viewPartition() throws RecognitionException {
		HiveParser.viewPartition_return retval = new HiveParser.viewPartition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_PARTITIONED639=null;
		Token KW_ON640=null;
		Token LPAREN641=null;
		Token RPAREN643=null;
		ParserRuleReturnScope columnNameList642 =null;

		CommonTree KW_PARTITIONED639_tree=null;
		CommonTree KW_ON640_tree=null;
		CommonTree LPAREN641_tree=null;
		CommonTree RPAREN643_tree=null;
		RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg("view partition specification", state); 
		try {
			// grammar/HiveParser.g:1783:5: ( KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) )
			// grammar/HiveParser.g:1783:7: KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN
			{
			KW_PARTITIONED639=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_viewPartition10214); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PARTITIONED.add(KW_PARTITIONED639);

			KW_ON640=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_viewPartition10216); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON640);

			LPAREN641=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewPartition10218); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN641);

			pushFollow(FOLLOW_columnNameList_in_viewPartition10220);
			columnNameList642=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameList.add(columnNameList642.getTree());
			RPAREN643=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewPartition10222); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN643);

			// AST REWRITE
			// elements: columnNameList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1784:5: -> ^( TOK_VIEWPARTCOLS columnNameList )
			{
				// grammar/HiveParser.g:1784:8: ^( TOK_VIEWPARTCOLS columnNameList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_VIEWPARTCOLS, "TOK_VIEWPARTCOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "viewPartition"


	public static class dropViewStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropViewStatement"
	// grammar/HiveParser.g:1787:1: dropViewStatement : KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) ;
	public final HiveParser.dropViewStatement_return dropViewStatement() throws RecognitionException {
		HiveParser.dropViewStatement_return retval = new HiveParser.dropViewStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP644=null;
		Token KW_VIEW645=null;
		ParserRuleReturnScope ifExists646 =null;
		ParserRuleReturnScope viewName647 =null;

		CommonTree KW_DROP644_tree=null;
		CommonTree KW_VIEW645_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleSubtreeStream stream_viewName=new RewriteRuleSubtreeStream(adaptor,"rule viewName");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg("drop view statement", state); 
		try {
			// grammar/HiveParser.g:1790:5: ( KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) )
			// grammar/HiveParser.g:1790:7: KW_DROP KW_VIEW ( ifExists )? viewName
			{
			KW_DROP644=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropViewStatement10261); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP644);

			KW_VIEW645=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropViewStatement10263); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW645);

			// grammar/HiveParser.g:1790:23: ( ifExists )?
			int alt192=2;
			int LA192_0 = input.LA(1);
			if ( (LA192_0==KW_IF) ) {
				alt192=1;
			}
			switch (alt192) {
				case 1 :
					// grammar/HiveParser.g:1790:23: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropViewStatement10265);
					ifExists646=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists646.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_viewName_in_dropViewStatement10268);
			viewName647=viewName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_viewName.add(viewName647.getTree());
			// AST REWRITE
			// elements: ifExists, viewName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1790:42: -> ^( TOK_DROPVIEW viewName ( ifExists )? )
			{
				// grammar/HiveParser.g:1790:45: ^( TOK_DROPVIEW viewName ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPVIEW, "TOK_DROPVIEW"), root_1);
				adaptor.addChild(root_1, stream_viewName.nextTree());
				// grammar/HiveParser.g:1790:69: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropViewStatement"


	public static class showFunctionIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showFunctionIdentifier"
	// grammar/HiveParser.g:1793:1: showFunctionIdentifier : ( functionIdentifier | StringLiteral );
	public final HiveParser.showFunctionIdentifier_return showFunctionIdentifier() throws RecognitionException {
		HiveParser.showFunctionIdentifier_return retval = new HiveParser.showFunctionIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token StringLiteral649=null;
		ParserRuleReturnScope functionIdentifier648 =null;

		CommonTree StringLiteral649_tree=null;

		 pushMsg("identifier for show function statement", state); 
		try {
			// grammar/HiveParser.g:1796:5: ( functionIdentifier | StringLiteral )
			int alt193=2;
			int LA193_0 = input.LA(1);
			if ( ((LA193_0 >= Identifier && LA193_0 <= KW_ANALYZE)||(LA193_0 >= KW_ARCHIVE && LA193_0 <= KW_BY)||LA193_0==KW_CASCADE||LA193_0==KW_CHANGE||(LA193_0 >= KW_CLUSTER && LA193_0 <= KW_COLLECTION)||(LA193_0 >= KW_COLUMNS && LA193_0 <= KW_COMMENT)||(LA193_0 >= KW_COMPACT && LA193_0 <= KW_CONCATENATE)||(LA193_0 >= KW_CONSTRAINT && LA193_0 <= KW_CREATE)||LA193_0==KW_CUBE||(LA193_0 >= KW_CURRENT_DATE && LA193_0 <= KW_DATA)||(LA193_0 >= KW_DATABASES && LA193_0 <= KW_DISABLE)||(LA193_0 >= KW_DISTRIBUTE && LA193_0 <= KW_ELEM_TYPE)||LA193_0==KW_ENABLE||LA193_0==KW_ESCAPED||(LA193_0 >= KW_EXCLUSIVE && LA193_0 <= KW_EXPORT)||(LA193_0 >= KW_EXTERNAL && LA193_0 <= KW_FLOAT)||(LA193_0 >= KW_FOR && LA193_0 <= KW_FORMATTED)||LA193_0==KW_FULL||(LA193_0 >= KW_FUNCTIONS && LA193_0 <= KW_GROUPING)||(LA193_0 >= KW_HOUR && LA193_0 <= KW_IDXPROPERTIES)||(LA193_0 >= KW_IMPORT && LA193_0 <= KW_INTERSECT)||(LA193_0 >= KW_INTO && LA193_0 <= KW_JAR)||(LA193_0 >= KW_KEY && LA193_0 <= KW_LEFT)||(LA193_0 >= KW_LEVEL && LA193_0 <= KW_LONG)||(LA193_0 >= KW_MAPJOIN && LA193_0 <= KW_MONTH)||(LA193_0 >= KW_MSCK && LA193_0 <= KW_NOSCAN)||(LA193_0 >= KW_NOVALIDATE && LA193_0 <= KW_OFFSET)||LA193_0==KW_OPTION||(LA193_0 >= KW_ORDER && LA193_0 <= KW_OUTPUTFORMAT)||(LA193_0 >= KW_OVERWRITE && LA193_0 <= KW_OWNER)||(LA193_0 >= KW_PARTITION && LA193_0 <= KW_PLUS)||(LA193_0 >= KW_PRETTY && LA193_0 <= KW_RECORDWRITER)||(LA193_0 >= KW_REFERENCES && LA193_0 <= KW_ROLES)||(LA193_0 >= KW_ROLLUP && LA193_0 <= KW_SECOND)||(LA193_0 >= KW_SEMI && LA193_0 <= KW_SSL)||(LA193_0 >= KW_STATISTICS && LA193_0 <= KW_TABLES)||(LA193_0 >= KW_TBLPROPERTIES && LA193_0 <= KW_TERMINATED)||(LA193_0 >= KW_TIMESTAMP && LA193_0 <= KW_TRANSACTIONS)||(LA193_0 >= KW_TRIGGER && LA193_0 <= KW_UNARCHIVE)||(LA193_0 >= KW_UNDO && LA193_0 <= KW_UNIONTYPE)||(LA193_0 >= KW_UNLOCK && LA193_0 <= KW_VALUE_TYPE)||LA193_0==KW_VIEW||LA193_0==KW_WHILE||(LA193_0 >= KW_WITH && LA193_0 <= KW_YEAR)||LA193_0==KW_HOLD_DDLTIME||LA193_0==KW_IGNORE||LA193_0==KW_NO_DROP||LA193_0==KW_OFFLINE||LA193_0==KW_PROTECTION||LA193_0==KW_READONLY) ) {
				alt193=1;
			}
			else if ( (LA193_0==StringLiteral) ) {
				alt193=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 193, 0, input);
				throw nvae;
			}

			switch (alt193) {
				case 1 :
					// grammar/HiveParser.g:1796:7: functionIdentifier
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_functionIdentifier_in_showFunctionIdentifier10306);
					functionIdentifier648=functionIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, functionIdentifier648.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1797:7: StringLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					StringLiteral649=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showFunctionIdentifier10314); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					StringLiteral649_tree = (CommonTree)adaptor.create(StringLiteral649);
					adaptor.addChild(root_0, StringLiteral649_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showFunctionIdentifier"


	public static class showStmtIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showStmtIdentifier"
	// grammar/HiveParser.g:1800:1: showStmtIdentifier : ( identifier | StringLiteral );
	public final HiveParser.showStmtIdentifier_return showStmtIdentifier() throws RecognitionException {
		HiveParser.showStmtIdentifier_return retval = new HiveParser.showStmtIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token StringLiteral651=null;
		ParserRuleReturnScope identifier650 =null;

		CommonTree StringLiteral651_tree=null;

		 pushMsg("identifier for show statement", state); 
		try {
			// grammar/HiveParser.g:1803:5: ( identifier | StringLiteral )
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( ((LA194_0 >= Identifier && LA194_0 <= KW_ANALYZE)||(LA194_0 >= KW_ARCHIVE && LA194_0 <= KW_BY)||LA194_0==KW_CASCADE||LA194_0==KW_CHANGE||(LA194_0 >= KW_CLUSTER && LA194_0 <= KW_COLLECTION)||(LA194_0 >= KW_COLUMNS && LA194_0 <= KW_COMMENT)||(LA194_0 >= KW_COMPACT && LA194_0 <= KW_CONCATENATE)||(LA194_0 >= KW_CONSTRAINT && LA194_0 <= KW_CREATE)||LA194_0==KW_CUBE||(LA194_0 >= KW_CURRENT_DATE && LA194_0 <= KW_DATA)||(LA194_0 >= KW_DATABASES && LA194_0 <= KW_DISABLE)||(LA194_0 >= KW_DISTRIBUTE && LA194_0 <= KW_ELEM_TYPE)||LA194_0==KW_ENABLE||LA194_0==KW_ESCAPED||(LA194_0 >= KW_EXCLUSIVE && LA194_0 <= KW_EXPORT)||(LA194_0 >= KW_EXTERNAL && LA194_0 <= KW_FLOAT)||(LA194_0 >= KW_FOR && LA194_0 <= KW_FORMATTED)||LA194_0==KW_FULL||(LA194_0 >= KW_FUNCTIONS && LA194_0 <= KW_GROUPING)||(LA194_0 >= KW_HOUR && LA194_0 <= KW_IDXPROPERTIES)||(LA194_0 >= KW_IMPORT && LA194_0 <= KW_INTERSECT)||(LA194_0 >= KW_INTO && LA194_0 <= KW_JAR)||(LA194_0 >= KW_KEY && LA194_0 <= KW_LEFT)||(LA194_0 >= KW_LEVEL && LA194_0 <= KW_LONG)||(LA194_0 >= KW_MAPJOIN && LA194_0 <= KW_MONTH)||(LA194_0 >= KW_MSCK && LA194_0 <= KW_NOSCAN)||(LA194_0 >= KW_NOVALIDATE && LA194_0 <= KW_OFFSET)||LA194_0==KW_OPTION||(LA194_0 >= KW_ORDER && LA194_0 <= KW_OUTPUTFORMAT)||(LA194_0 >= KW_OVERWRITE && LA194_0 <= KW_OWNER)||(LA194_0 >= KW_PARTITION && LA194_0 <= KW_PLUS)||(LA194_0 >= KW_PRETTY && LA194_0 <= KW_RECORDWRITER)||(LA194_0 >= KW_REFERENCES && LA194_0 <= KW_ROLES)||(LA194_0 >= KW_ROLLUP && LA194_0 <= KW_SECOND)||(LA194_0 >= KW_SEMI && LA194_0 <= KW_SSL)||(LA194_0 >= KW_STATISTICS && LA194_0 <= KW_TABLES)||(LA194_0 >= KW_TBLPROPERTIES && LA194_0 <= KW_TERMINATED)||(LA194_0 >= KW_TIMESTAMP && LA194_0 <= KW_TRANSACTIONS)||(LA194_0 >= KW_TRIGGER && LA194_0 <= KW_UNARCHIVE)||(LA194_0 >= KW_UNDO && LA194_0 <= KW_UNIONTYPE)||(LA194_0 >= KW_UNLOCK && LA194_0 <= KW_VALUE_TYPE)||LA194_0==KW_VIEW||LA194_0==KW_WHILE||(LA194_0 >= KW_WITH && LA194_0 <= KW_YEAR)||LA194_0==KW_HOLD_DDLTIME||LA194_0==KW_IGNORE||LA194_0==KW_NO_DROP||LA194_0==KW_OFFLINE||LA194_0==KW_PROTECTION||LA194_0==KW_READONLY) ) {
				alt194=1;
			}
			else if ( (LA194_0==StringLiteral) ) {
				alt194=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 194, 0, input);
				throw nvae;
			}

			switch (alt194) {
				case 1 :
					// grammar/HiveParser.g:1803:7: identifier
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_identifier_in_showStmtIdentifier10341);
					identifier650=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier650.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1804:7: StringLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					StringLiteral651=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStmtIdentifier10349); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					StringLiteral651_tree = (CommonTree)adaptor.create(StringLiteral651);
					adaptor.addChild(root_0, StringLiteral651_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showStmtIdentifier"


	public static class tableComment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableComment"
	// grammar/HiveParser.g:1807:1: tableComment : KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) ;
	public final HiveParser.tableComment_return tableComment() throws RecognitionException {
		HiveParser.tableComment_return retval = new HiveParser.tableComment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_COMMENT652=null;

		CommonTree comment_tree=null;
		CommonTree KW_COMMENT652_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 pushMsg("table's comment", state); 
		try {
			// grammar/HiveParser.g:1810:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) )
			// grammar/HiveParser.g:1811:7: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT652=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_tableComment10382); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT652);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableComment10386); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1811:41: -> ^( TOK_TABLECOMMENT $comment)
			{
				// grammar/HiveParser.g:1811:44: ^( TOK_TABLECOMMENT $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLECOMMENT, "TOK_TABLECOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableComment"


	public static class tablePartition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tablePartition"
	// grammar/HiveParser.g:1814:1: tablePartition : KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) ;
	public final HiveParser.tablePartition_return tablePartition() throws RecognitionException {
		HiveParser.tablePartition_return retval = new HiveParser.tablePartition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_PARTITIONED653=null;
		Token KW_BY654=null;
		Token LPAREN655=null;
		Token RPAREN657=null;
		ParserRuleReturnScope columnNameTypeList656 =null;

		CommonTree KW_PARTITIONED653_tree=null;
		CommonTree KW_BY654_tree=null;
		CommonTree LPAREN655_tree=null;
		CommonTree RPAREN657_tree=null;
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");

		 pushMsg("table partition specification", state); 
		try {
			// grammar/HiveParser.g:1817:5: ( KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) )
			// grammar/HiveParser.g:1817:7: KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN
			{
			KW_PARTITIONED653=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_tablePartition10423); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PARTITIONED.add(KW_PARTITIONED653);

			KW_BY654=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tablePartition10425); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY654);

			LPAREN655=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tablePartition10427); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN655);

			pushFollow(FOLLOW_columnNameTypeList_in_tablePartition10429);
			columnNameTypeList656=columnNameTypeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameTypeList.add(columnNameTypeList656.getTree());
			RPAREN657=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tablePartition10431); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN657);

			// AST REWRITE
			// elements: columnNameTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1818:5: -> ^( TOK_TABLEPARTCOLS columnNameTypeList )
			{
				// grammar/HiveParser.g:1818:8: ^( TOK_TABLEPARTCOLS columnNameTypeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPARTCOLS, "TOK_TABLEPARTCOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePartition"


	public static class tableBuckets_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableBuckets"
	// grammar/HiveParser.g:1821:1: tableBuckets : KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num) ;
	public final HiveParser.tableBuckets_return tableBuckets() throws RecognitionException {
		HiveParser.tableBuckets_return retval = new HiveParser.tableBuckets_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token num=null;
		Token KW_CLUSTERED658=null;
		Token KW_BY659=null;
		Token LPAREN660=null;
		Token RPAREN661=null;
		Token KW_SORTED662=null;
		Token KW_BY663=null;
		Token LPAREN664=null;
		Token RPAREN665=null;
		Token KW_INTO666=null;
		Token KW_BUCKETS667=null;
		ParserRuleReturnScope bucketCols =null;
		ParserRuleReturnScope sortCols =null;

		CommonTree num_tree=null;
		CommonTree KW_CLUSTERED658_tree=null;
		CommonTree KW_BY659_tree=null;
		CommonTree LPAREN660_tree=null;
		CommonTree RPAREN661_tree=null;
		CommonTree KW_SORTED662_tree=null;
		CommonTree KW_BY663_tree=null;
		CommonTree LPAREN664_tree=null;
		CommonTree RPAREN665_tree=null;
		CommonTree KW_INTO666_tree=null;
		CommonTree KW_BUCKETS667_tree=null;
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
		RewriteRuleSubtreeStream stream_columnNameOrderList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrderList");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg("table buckets specification", state); 
		try {
			// grammar/HiveParser.g:1824:5: ( KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num) )
			// grammar/HiveParser.g:1825:7: KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS
			{
			KW_CLUSTERED658=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_tableBuckets10476); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CLUSTERED.add(KW_CLUSTERED658);

			KW_BY659=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets10478); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY659);

			LPAREN660=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets10480); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN660);

			pushFollow(FOLLOW_columnNameList_in_tableBuckets10484);
			bucketCols=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameList.add(bucketCols.getTree());
			RPAREN661=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets10486); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN661);

			// grammar/HiveParser.g:1825:66: ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )?
			int alt195=2;
			int LA195_0 = input.LA(1);
			if ( (LA195_0==KW_SORTED) ) {
				alt195=1;
			}
			switch (alt195) {
				case 1 :
					// grammar/HiveParser.g:1825:67: KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN
					{
					KW_SORTED662=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_tableBuckets10489); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SORTED.add(KW_SORTED662);

					KW_BY663=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets10491); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY663);

					LPAREN664=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets10493); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN664);

					pushFollow(FOLLOW_columnNameOrderList_in_tableBuckets10497);
					sortCols=columnNameOrderList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameOrderList.add(sortCols.getTree());
					RPAREN665=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets10499); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN665);

					}
					break;

			}

			KW_INTO666=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_tableBuckets10503); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO666);

			num=(Token)match(input,Number,FOLLOW_Number_in_tableBuckets10507); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Number.add(num);

			KW_BUCKETS667=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_tableBuckets10509); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BUCKETS.add(KW_BUCKETS667);

			// AST REWRITE
			// elements: sortCols, num, bucketCols
			// token labels: num
			// rule labels: bucketCols, sortCols, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
			RewriteRuleSubtreeStream stream_bucketCols=new RewriteRuleSubtreeStream(adaptor,"rule bucketCols",bucketCols!=null?bucketCols.getTree():null);
			RewriteRuleSubtreeStream stream_sortCols=new RewriteRuleSubtreeStream(adaptor,"rule sortCols",sortCols!=null?sortCols.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1826:5: -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num)
			{
				// grammar/HiveParser.g:1826:8: ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_BUCKETS, "TOK_ALTERTABLE_BUCKETS"), root_1);
				adaptor.addChild(root_1, stream_bucketCols.nextTree());
				// grammar/HiveParser.g:1826:46: ( $sortCols)?
				if ( stream_sortCols.hasNext() ) {
					adaptor.addChild(root_1, stream_sortCols.nextTree());
				}
				stream_sortCols.reset();

				adaptor.addChild(root_1, stream_num.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableBuckets"


	public static class tableSkewed_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableSkewed"
	// grammar/HiveParser.g:1829:1: tableSkewed : KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) ;
	public final HiveParser.tableSkewed_return tableSkewed() throws RecognitionException {
		HiveParser.tableSkewed_return retval = new HiveParser.tableSkewed_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SKEWED668=null;
		Token KW_BY669=null;
		Token LPAREN670=null;
		Token RPAREN671=null;
		Token KW_ON672=null;
		Token LPAREN673=null;
		Token RPAREN674=null;
		ParserRuleReturnScope skewedCols =null;
		ParserRuleReturnScope skewedValues =null;
		ParserRuleReturnScope storedAsDirs675 =null;

		CommonTree KW_SKEWED668_tree=null;
		CommonTree KW_BY669_tree=null;
		CommonTree LPAREN670_tree=null;
		CommonTree RPAREN671_tree=null;
		CommonTree KW_ON672_tree=null;
		CommonTree LPAREN673_tree=null;
		CommonTree RPAREN674_tree=null;
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_skewedValueElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueElement");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");

		 pushMsg("table skewed specification", state); 
		try {
			// grammar/HiveParser.g:1832:5: ( KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) )
			// grammar/HiveParser.g:1833:6: KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )?
			{
			KW_SKEWED668=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_tableSkewed10561); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SKEWED.add(KW_SKEWED668);

			KW_BY669=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableSkewed10563); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY669);

			LPAREN670=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed10565); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN670);

			pushFollow(FOLLOW_columnNameList_in_tableSkewed10569);
			skewedCols=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameList.add(skewedCols.getTree());
			RPAREN671=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed10571); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN671);

			KW_ON672=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_tableSkewed10573); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON672);

			LPAREN673=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed10575); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN673);

			// grammar/HiveParser.g:1833:75: (skewedValues= skewedValueElement )
			// grammar/HiveParser.g:1833:76: skewedValues= skewedValueElement
			{
			pushFollow(FOLLOW_skewedValueElement_in_tableSkewed10580);
			skewedValues=skewedValueElement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedValueElement.add(skewedValues.getTree());
			}

			RPAREN674=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed10583); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN674);

			// grammar/HiveParser.g:1833:116: ( ( storedAsDirs )=> storedAsDirs )?
			int alt196=2;
			int LA196_0 = input.LA(1);
			if ( (LA196_0==KW_STORED) ) {
				int LA196_1 = input.LA(2);
				if ( (LA196_1==KW_AS) ) {
					int LA196_7 = input.LA(3);
					if ( (LA196_7==KW_DIRECTORIES) ) {
						int LA196_9 = input.LA(4);
						if ( (synpred17_HiveParser()) ) {
							alt196=1;
						}
					}
				}
			}
			switch (alt196) {
				case 1 :
					// grammar/HiveParser.g:1833:117: ( storedAsDirs )=> storedAsDirs
					{
					pushFollow(FOLLOW_storedAsDirs_in_tableSkewed10592);
					storedAsDirs675=storedAsDirs();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_storedAsDirs.add(storedAsDirs675.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: storedAsDirs, skewedCols, skewedValues
			// token labels: 
			// rule labels: skewedCols, skewedValues, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_skewedCols=new RewriteRuleSubtreeStream(adaptor,"rule skewedCols",skewedCols!=null?skewedCols.getTree():null);
			RewriteRuleSubtreeStream stream_skewedValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedValues",skewedValues!=null?skewedValues.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1834:5: -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
			{
				// grammar/HiveParser.g:1834:8: ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLESKEWED, "TOK_TABLESKEWED"), root_1);
				adaptor.addChild(root_1, stream_skewedCols.nextTree());
				adaptor.addChild(root_1, stream_skewedValues.nextTree());
				// grammar/HiveParser.g:1834:52: ( storedAsDirs )?
				if ( stream_storedAsDirs.hasNext() ) {
					adaptor.addChild(root_1, stream_storedAsDirs.nextTree());
				}
				stream_storedAsDirs.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableSkewed"


	public static class rowFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "rowFormat"
	// grammar/HiveParser.g:1837:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );
	public final HiveParser.rowFormat_return rowFormat() throws RecognitionException {
		HiveParser.rowFormat_return retval = new HiveParser.rowFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope rowFormatSerde676 =null;
		ParserRuleReturnScope rowFormatDelimited677 =null;

		RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
		RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");

		 pushMsg("serde specification", state); 
		try {
			// grammar/HiveParser.g:1840:5: ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) )
			int alt197=3;
			int LA197_0 = input.LA(1);
			if ( (LA197_0==KW_ROW) ) {
				int LA197_1 = input.LA(2);
				if ( (LA197_1==KW_FORMAT) ) {
					int LA197_23 = input.LA(3);
					if ( (LA197_23==KW_SERDE) ) {
						alt197=1;
					}
					else if ( (LA197_23==KW_DELIMITED) ) {
						alt197=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 197, 23, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 197, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA197_0==EOF||LA197_0==KW_CLUSTER||LA197_0==KW_DISTRIBUTE||LA197_0==KW_FROM||LA197_0==KW_GROUP||LA197_0==KW_HAVING||LA197_0==KW_INSERT||LA197_0==KW_LATERAL||LA197_0==KW_LIMIT||LA197_0==KW_MAP||LA197_0==KW_ORDER||(LA197_0 >= KW_RECORDREADER && LA197_0 <= KW_REDUCE)||LA197_0==KW_SELECT||LA197_0==KW_SORT||LA197_0==KW_UNION||LA197_0==KW_USING||LA197_0==KW_WHERE||LA197_0==KW_WINDOW||LA197_0==RPAREN) ) {
				alt197=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 197, 0, input);
				throw nvae;
			}

			switch (alt197) {
				case 1 :
					// grammar/HiveParser.g:1840:7: rowFormatSerde
					{
					pushFollow(FOLLOW_rowFormatSerde_in_rowFormat10640);
					rowFormatSerde676=rowFormatSerde();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rowFormatSerde.add(rowFormatSerde676.getTree());
					// AST REWRITE
					// elements: rowFormatSerde
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1840:22: -> ^( TOK_SERDE rowFormatSerde )
					{
						// grammar/HiveParser.g:1840:25: ^( TOK_SERDE rowFormatSerde )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1841:7: rowFormatDelimited
					{
					pushFollow(FOLLOW_rowFormatDelimited_in_rowFormat10656);
					rowFormatDelimited677=rowFormatDelimited();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rowFormatDelimited.add(rowFormatDelimited677.getTree());
					// AST REWRITE
					// elements: rowFormatDelimited
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1841:26: -> ^( TOK_SERDE rowFormatDelimited )
					{
						// grammar/HiveParser.g:1841:29: ^( TOK_SERDE rowFormatDelimited )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1842:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1842:9: -> ^( TOK_SERDE )
					{
						// grammar/HiveParser.g:1842:12: ^( TOK_SERDE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormat"


	public static class recordReader_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "recordReader"
	// grammar/HiveParser.g:1845:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );
	public final HiveParser.recordReader_return recordReader() throws RecognitionException {
		HiveParser.recordReader_return retval = new HiveParser.recordReader_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RECORDREADER678=null;
		Token StringLiteral679=null;

		CommonTree KW_RECORDREADER678_tree=null;
		CommonTree StringLiteral679_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_RECORDREADER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDREADER");

		 pushMsg("record reader specification", state); 
		try {
			// grammar/HiveParser.g:1848:5: ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) )
			int alt198=2;
			int LA198_0 = input.LA(1);
			if ( (LA198_0==KW_RECORDREADER) ) {
				alt198=1;
			}
			else if ( (LA198_0==EOF||LA198_0==KW_CLUSTER||LA198_0==KW_DISTRIBUTE||LA198_0==KW_FROM||LA198_0==KW_GROUP||LA198_0==KW_HAVING||LA198_0==KW_INSERT||LA198_0==KW_LATERAL||LA198_0==KW_LIMIT||LA198_0==KW_MAP||LA198_0==KW_ORDER||LA198_0==KW_REDUCE||LA198_0==KW_SELECT||LA198_0==KW_SORT||LA198_0==KW_UNION||LA198_0==KW_WHERE||LA198_0==KW_WINDOW||LA198_0==RPAREN) ) {
				alt198=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 198, 0, input);
				throw nvae;
			}

			switch (alt198) {
				case 1 :
					// grammar/HiveParser.g:1848:7: KW_RECORDREADER StringLiteral
					{
					KW_RECORDREADER678=(Token)match(input,KW_RECORDREADER,FOLLOW_KW_RECORDREADER_in_recordReader10705); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_RECORDREADER.add(KW_RECORDREADER678);

					StringLiteral679=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordReader10707); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral679);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1848:37: -> ^( TOK_RECORDREADER StringLiteral )
					{
						// grammar/HiveParser.g:1848:40: ^( TOK_RECORDREADER StringLiteral )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1849:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1849:9: -> ^( TOK_RECORDREADER )
					{
						// grammar/HiveParser.g:1849:12: ^( TOK_RECORDREADER )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "recordReader"


	public static class recordWriter_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "recordWriter"
	// grammar/HiveParser.g:1852:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );
	public final HiveParser.recordWriter_return recordWriter() throws RecognitionException {
		HiveParser.recordWriter_return retval = new HiveParser.recordWriter_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RECORDWRITER680=null;
		Token StringLiteral681=null;

		CommonTree KW_RECORDWRITER680_tree=null;
		CommonTree StringLiteral681_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_RECORDWRITER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDWRITER");

		 pushMsg("record writer specification", state); 
		try {
			// grammar/HiveParser.g:1855:5: ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) )
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==KW_RECORDWRITER) ) {
				alt199=1;
			}
			else if ( (LA199_0==KW_USING) ) {
				alt199=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 199, 0, input);
				throw nvae;
			}

			switch (alt199) {
				case 1 :
					// grammar/HiveParser.g:1855:7: KW_RECORDWRITER StringLiteral
					{
					KW_RECORDWRITER680=(Token)match(input,KW_RECORDWRITER,FOLLOW_KW_RECORDWRITER_in_recordWriter10756); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_RECORDWRITER.add(KW_RECORDWRITER680);

					StringLiteral681=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordWriter10758); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral681);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1855:37: -> ^( TOK_RECORDWRITER StringLiteral )
					{
						// grammar/HiveParser.g:1855:40: ^( TOK_RECORDWRITER StringLiteral )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1856:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1856:9: -> ^( TOK_RECORDWRITER )
					{
						// grammar/HiveParser.g:1856:12: ^( TOK_RECORDWRITER )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "recordWriter"


	public static class rowFormatSerde_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "rowFormatSerde"
	// grammar/HiveParser.g:1859:1: rowFormatSerde : KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) ;
	public final HiveParser.rowFormatSerde_return rowFormatSerde() throws RecognitionException {
		HiveParser.rowFormatSerde_return retval = new HiveParser.rowFormatSerde_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token name=null;
		Token KW_ROW682=null;
		Token KW_FORMAT683=null;
		Token KW_SERDE684=null;
		Token KW_WITH685=null;
		Token KW_SERDEPROPERTIES686=null;
		ParserRuleReturnScope serdeprops =null;

		CommonTree name_tree=null;
		CommonTree KW_ROW682_tree=null;
		CommonTree KW_FORMAT683_tree=null;
		CommonTree KW_SERDE684_tree=null;
		CommonTree KW_WITH685_tree=null;
		CommonTree KW_SERDEPROPERTIES686_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
		RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("serde format specification", state); 
		try {
			// grammar/HiveParser.g:1862:5: ( KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) )
			// grammar/HiveParser.g:1862:7: KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
			{
			KW_ROW682=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatSerde10807); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROW.add(KW_ROW682);

			KW_FORMAT683=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatSerde10809); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FORMAT.add(KW_FORMAT683);

			KW_SERDE684=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_rowFormatSerde10811); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE684);

			name=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_rowFormatSerde10815); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(name);

			// grammar/HiveParser.g:1862:52: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
			int alt200=2;
			int LA200_0 = input.LA(1);
			if ( (LA200_0==KW_WITH) ) {
				alt200=1;
			}
			switch (alt200) {
				case 1 :
					// grammar/HiveParser.g:1862:53: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
					{
					KW_WITH685=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_rowFormatSerde10818); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH685);

					KW_SERDEPROPERTIES686=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde10820); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES686);

					pushFollow(FOLLOW_tableProperties_in_rowFormatSerde10824);
					serdeprops=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(serdeprops.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: name, serdeprops
			// token labels: name
			// rule labels: serdeprops, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1863:5: -> ^( TOK_SERDENAME $name ( $serdeprops)? )
			{
				// grammar/HiveParser.g:1863:8: ^( TOK_SERDENAME $name ( $serdeprops)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDENAME, "TOK_SERDENAME"), root_1);
				adaptor.addChild(root_1, stream_name.nextNode());
				// grammar/HiveParser.g:1863:31: ( $serdeprops)?
				if ( stream_serdeprops.hasNext() ) {
					adaptor.addChild(root_1, stream_serdeprops.nextTree());
				}
				stream_serdeprops.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormatSerde"


	public static class rowFormatDelimited_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "rowFormatDelimited"
	// grammar/HiveParser.g:1866:1: rowFormatDelimited : KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? ) ;
	public final HiveParser.rowFormatDelimited_return rowFormatDelimited() throws RecognitionException {
		HiveParser.rowFormatDelimited_return retval = new HiveParser.rowFormatDelimited_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ROW687=null;
		Token KW_FORMAT688=null;
		Token KW_DELIMITED689=null;
		ParserRuleReturnScope tableRowFormatFieldIdentifier690 =null;
		ParserRuleReturnScope tableRowFormatCollItemsIdentifier691 =null;
		ParserRuleReturnScope tableRowFormatMapKeysIdentifier692 =null;
		ParserRuleReturnScope tableRowFormatLinesIdentifier693 =null;
		ParserRuleReturnScope tableRowNullFormat694 =null;

		CommonTree KW_ROW687_tree=null;
		CommonTree KW_FORMAT688_tree=null;
		CommonTree KW_DELIMITED689_tree=null;
		RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
		RewriteRuleTokenStream stream_KW_DELIMITED=new RewriteRuleTokenStream(adaptor,"token KW_DELIMITED");
		RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
		RewriteRuleSubtreeStream stream_tableRowNullFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowNullFormat");
		RewriteRuleSubtreeStream stream_tableRowFormatFieldIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatFieldIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatCollItemsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatCollItemsIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatMapKeysIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatMapKeysIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatLinesIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatLinesIdentifier");

		 pushMsg("serde properties specification", state); 
		try {
			// grammar/HiveParser.g:1869:5: ( KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? ) )
			// grammar/HiveParser.g:1870:7: KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )?
			{
			KW_ROW687=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatDelimited10876); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROW.add(KW_ROW687);

			KW_FORMAT688=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatDelimited10878); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FORMAT.add(KW_FORMAT688);

			KW_DELIMITED689=(Token)match(input,KW_DELIMITED,FOLLOW_KW_DELIMITED_in_rowFormatDelimited10880); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DELIMITED.add(KW_DELIMITED689);

			// grammar/HiveParser.g:1870:37: ( tableRowFormatFieldIdentifier )?
			int alt201=2;
			int LA201_0 = input.LA(1);
			if ( (LA201_0==KW_FIELDS) ) {
				alt201=1;
			}
			switch (alt201) {
				case 1 :
					// grammar/HiveParser.g:1870:37: tableRowFormatFieldIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited10882);
					tableRowFormatFieldIdentifier690=tableRowFormatFieldIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormatFieldIdentifier.add(tableRowFormatFieldIdentifier690.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:1870:68: ( tableRowFormatCollItemsIdentifier )?
			int alt202=2;
			int LA202_0 = input.LA(1);
			if ( (LA202_0==KW_COLLECTION) ) {
				alt202=1;
			}
			switch (alt202) {
				case 1 :
					// grammar/HiveParser.g:1870:68: tableRowFormatCollItemsIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited10885);
					tableRowFormatCollItemsIdentifier691=tableRowFormatCollItemsIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormatCollItemsIdentifier.add(tableRowFormatCollItemsIdentifier691.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:1870:103: ( tableRowFormatMapKeysIdentifier )?
			int alt203=2;
			alt203 = dfa203.predict(input);
			switch (alt203) {
				case 1 :
					// grammar/HiveParser.g:1870:103: tableRowFormatMapKeysIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited10888);
					tableRowFormatMapKeysIdentifier692=tableRowFormatMapKeysIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormatMapKeysIdentifier.add(tableRowFormatMapKeysIdentifier692.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:1870:136: ( tableRowFormatLinesIdentifier )?
			int alt204=2;
			int LA204_0 = input.LA(1);
			if ( (LA204_0==KW_LINES) ) {
				alt204=1;
			}
			switch (alt204) {
				case 1 :
					// grammar/HiveParser.g:1870:136: tableRowFormatLinesIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited10891);
					tableRowFormatLinesIdentifier693=tableRowFormatLinesIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormatLinesIdentifier.add(tableRowFormatLinesIdentifier693.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:1870:167: ( tableRowNullFormat )?
			int alt205=2;
			int LA205_0 = input.LA(1);
			if ( (LA205_0==KW_NULL) ) {
				alt205=1;
			}
			switch (alt205) {
				case 1 :
					// grammar/HiveParser.g:1870:167: tableRowNullFormat
					{
					pushFollow(FOLLOW_tableRowNullFormat_in_rowFormatDelimited10894);
					tableRowNullFormat694=tableRowNullFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowNullFormat.add(tableRowNullFormat694.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableRowFormatMapKeysIdentifier, tableRowFormatFieldIdentifier, tableRowFormatCollItemsIdentifier, tableRowNullFormat, tableRowFormatLinesIdentifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1871:5: -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? )
			{
				// grammar/HiveParser.g:1871:8: ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDEPROPS, "TOK_SERDEPROPS"), root_1);
				// grammar/HiveParser.g:1871:25: ( tableRowFormatFieldIdentifier )?
				if ( stream_tableRowFormatFieldIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatFieldIdentifier.nextTree());
				}
				stream_tableRowFormatFieldIdentifier.reset();

				// grammar/HiveParser.g:1871:56: ( tableRowFormatCollItemsIdentifier )?
				if ( stream_tableRowFormatCollItemsIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatCollItemsIdentifier.nextTree());
				}
				stream_tableRowFormatCollItemsIdentifier.reset();

				// grammar/HiveParser.g:1871:91: ( tableRowFormatMapKeysIdentifier )?
				if ( stream_tableRowFormatMapKeysIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatMapKeysIdentifier.nextTree());
				}
				stream_tableRowFormatMapKeysIdentifier.reset();

				// grammar/HiveParser.g:1871:124: ( tableRowFormatLinesIdentifier )?
				if ( stream_tableRowFormatLinesIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatLinesIdentifier.nextTree());
				}
				stream_tableRowFormatLinesIdentifier.reset();

				// grammar/HiveParser.g:1871:155: ( tableRowNullFormat )?
				if ( stream_tableRowNullFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowNullFormat.nextTree());
				}
				stream_tableRowNullFormat.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormatDelimited"


	public static class tableRowFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormat"
	// grammar/HiveParser.g:1874:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );
	public final HiveParser.tableRowFormat_return tableRowFormat() throws RecognitionException {
		HiveParser.tableRowFormat_return retval = new HiveParser.tableRowFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope rowFormatDelimited695 =null;
		ParserRuleReturnScope rowFormatSerde696 =null;

		RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
		RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");

		 pushMsg("table row format specification", state); 
		try {
			// grammar/HiveParser.g:1877:5: ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) )
			int alt206=2;
			int LA206_0 = input.LA(1);
			if ( (LA206_0==KW_ROW) ) {
				int LA206_1 = input.LA(2);
				if ( (LA206_1==KW_FORMAT) ) {
					int LA206_2 = input.LA(3);
					if ( (LA206_2==KW_DELIMITED) ) {
						alt206=1;
					}
					else if ( (LA206_2==KW_SERDE) ) {
						alt206=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 206, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 206, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 206, 0, input);
				throw nvae;
			}

			switch (alt206) {
				case 1 :
					// grammar/HiveParser.g:1878:7: rowFormatDelimited
					{
					pushFollow(FOLLOW_rowFormatDelimited_in_tableRowFormat10953);
					rowFormatDelimited695=rowFormatDelimited();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rowFormatDelimited.add(rowFormatDelimited695.getTree());
					// AST REWRITE
					// elements: rowFormatDelimited
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1879:5: -> ^( TOK_TABLEROWFORMAT rowFormatDelimited )
					{
						// grammar/HiveParser.g:1879:8: ^( TOK_TABLEROWFORMAT rowFormatDelimited )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMAT, "TOK_TABLEROWFORMAT"), root_1);
						adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1880:7: rowFormatSerde
					{
					pushFollow(FOLLOW_rowFormatSerde_in_tableRowFormat10973);
					rowFormatSerde696=rowFormatSerde();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rowFormatSerde.add(rowFormatSerde696.getTree());
					// AST REWRITE
					// elements: rowFormatSerde
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1881:5: -> ^( TOK_TABLESERIALIZER rowFormatSerde )
					{
						// grammar/HiveParser.g:1881:8: ^( TOK_TABLESERIALIZER rowFormatSerde )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLESERIALIZER, "TOK_TABLESERIALIZER"), root_1);
						adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormat"


	public static class tablePropertiesPrefixed_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tablePropertiesPrefixed"
	// grammar/HiveParser.g:1884:1: tablePropertiesPrefixed : KW_TBLPROPERTIES ! tableProperties ;
	public final HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed() throws RecognitionException {
		HiveParser.tablePropertiesPrefixed_return retval = new HiveParser.tablePropertiesPrefixed_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_TBLPROPERTIES697=null;
		ParserRuleReturnScope tableProperties698 =null;

		CommonTree KW_TBLPROPERTIES697_tree=null;

		 pushMsg("table properties with prefix", state); 
		try {
			// grammar/HiveParser.g:1887:5: ( KW_TBLPROPERTIES ! tableProperties )
			// grammar/HiveParser.g:1888:9: KW_TBLPROPERTIES ! tableProperties
			{
			root_0 = (CommonTree)adaptor.nil();


			KW_TBLPROPERTIES697=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed11020); if (state.failed) return retval;
			pushFollow(FOLLOW_tableProperties_in_tablePropertiesPrefixed11023);
			tableProperties698=tableProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, tableProperties698.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePropertiesPrefixed"


	public static class tableProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableProperties"
	// grammar/HiveParser.g:1891:1: tableProperties : LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) ;
	public final HiveParser.tableProperties_return tableProperties() throws RecognitionException {
		HiveParser.tableProperties_return retval = new HiveParser.tableProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN699=null;
		Token RPAREN701=null;
		ParserRuleReturnScope tablePropertiesList700 =null;

		CommonTree LPAREN699_tree=null;
		CommonTree RPAREN701_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_tablePropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesList");

		 pushMsg("table properties", state); 
		try {
			// grammar/HiveParser.g:1894:5: ( LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) )
			// grammar/HiveParser.g:1895:7: LPAREN tablePropertiesList RPAREN
			{
			LPAREN699=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableProperties11056); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN699);

			pushFollow(FOLLOW_tablePropertiesList_in_tableProperties11058);
			tablePropertiesList700=tablePropertiesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tablePropertiesList.add(tablePropertiesList700.getTree());
			RPAREN701=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableProperties11060); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN701);

			// AST REWRITE
			// elements: tablePropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1895:41: -> ^( TOK_TABLEPROPERTIES tablePropertiesList )
			{
				// grammar/HiveParser.g:1895:44: ^( TOK_TABLEPROPERTIES tablePropertiesList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPROPERTIES, "TOK_TABLEPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_tablePropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableProperties"


	public static class tablePropertiesList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tablePropertiesList"
	// grammar/HiveParser.g:1898:1: tablePropertiesList : ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) );
	public final HiveParser.tablePropertiesList_return tablePropertiesList() throws RecognitionException {
		HiveParser.tablePropertiesList_return retval = new HiveParser.tablePropertiesList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA703=null;
		Token COMMA706=null;
		ParserRuleReturnScope keyValueProperty702 =null;
		ParserRuleReturnScope keyValueProperty704 =null;
		ParserRuleReturnScope keyProperty705 =null;
		ParserRuleReturnScope keyProperty707 =null;

		CommonTree COMMA703_tree=null;
		CommonTree COMMA706_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
		RewriteRuleSubtreeStream stream_keyProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyProperty");

		 pushMsg("table properties list", state); 
		try {
			// grammar/HiveParser.g:1901:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) )
			int alt209=2;
			int LA209_0 = input.LA(1);
			if ( (LA209_0==StringLiteral) ) {
				int LA209_1 = input.LA(2);
				if ( (LA209_1==EQUAL) ) {
					alt209=1;
				}
				else if ( (LA209_1==COMMA||LA209_1==RPAREN) ) {
					alt209=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 209, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 209, 0, input);
				throw nvae;
			}

			switch (alt209) {
				case 1 :
					// grammar/HiveParser.g:1902:7: keyValueProperty ( COMMA keyValueProperty )*
					{
					pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList11101);
					keyValueProperty702=keyValueProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty702.getTree());
					// grammar/HiveParser.g:1902:24: ( COMMA keyValueProperty )*
					loop207:
					while (true) {
						int alt207=2;
						int LA207_0 = input.LA(1);
						if ( (LA207_0==COMMA) ) {
							alt207=1;
						}

						switch (alt207) {
						case 1 :
							// grammar/HiveParser.g:1902:25: COMMA keyValueProperty
							{
							COMMA703=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList11104); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA703);

							pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList11106);
							keyValueProperty704=keyValueProperty();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty704.getTree());
							}
							break;

						default :
							break loop207;
						}
					}

					// AST REWRITE
					// elements: keyValueProperty
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1902:50: -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
					{
						// grammar/HiveParser.g:1902:53: ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST"), root_1);
						if ( !(stream_keyValueProperty.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_keyValueProperty.hasNext() ) {
							adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
						}
						stream_keyValueProperty.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1904:7: keyProperty ( COMMA keyProperty )*
					{
					pushFollow(FOLLOW_keyProperty_in_tablePropertiesList11131);
					keyProperty705=keyProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keyProperty.add(keyProperty705.getTree());
					// grammar/HiveParser.g:1904:19: ( COMMA keyProperty )*
					loop208:
					while (true) {
						int alt208=2;
						int LA208_0 = input.LA(1);
						if ( (LA208_0==COMMA) ) {
							alt208=1;
						}

						switch (alt208) {
						case 1 :
							// grammar/HiveParser.g:1904:20: COMMA keyProperty
							{
							COMMA706=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList11134); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA706);

							pushFollow(FOLLOW_keyProperty_in_tablePropertiesList11136);
							keyProperty707=keyProperty();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_keyProperty.add(keyProperty707.getTree());
							}
							break;

						default :
							break loop208;
						}
					}

					// AST REWRITE
					// elements: keyProperty
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1904:40: -> ^( TOK_TABLEPROPLIST ( keyProperty )+ )
					{
						// grammar/HiveParser.g:1904:43: ^( TOK_TABLEPROPLIST ( keyProperty )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST"), root_1);
						if ( !(stream_keyProperty.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_keyProperty.hasNext() ) {
							adaptor.addChild(root_1, stream_keyProperty.nextTree());
						}
						stream_keyProperty.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePropertiesList"


	public static class keyValueProperty_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "keyValueProperty"
	// grammar/HiveParser.g:1907:1: keyValueProperty : key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) ;
	public final HiveParser.keyValueProperty_return keyValueProperty() throws RecognitionException {
		HiveParser.keyValueProperty_return retval = new HiveParser.keyValueProperty_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token key=null;
		Token value=null;
		Token EQUAL708=null;

		CommonTree key_tree=null;
		CommonTree value_tree=null;
		CommonTree EQUAL708_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");

		 pushMsg("specifying key/value property", state); 
		try {
			// grammar/HiveParser.g:1910:5: (key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) )
			// grammar/HiveParser.g:1911:7: key= StringLiteral EQUAL value= StringLiteral
			{
			key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty11182); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(key);

			EQUAL708=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_keyValueProperty11184); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL708);

			value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty11188); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(value);

			// AST REWRITE
			// elements: value, key
			// token labels: value, key
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
			RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1911:51: -> ^( TOK_TABLEPROPERTY $key $value)
			{
				// grammar/HiveParser.g:1911:54: ^( TOK_TABLEPROPERTY $key $value)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY"), root_1);
				adaptor.addChild(root_1, stream_key.nextNode());
				adaptor.addChild(root_1, stream_value.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "keyValueProperty"


	public static class keyProperty_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "keyProperty"
	// grammar/HiveParser.g:1914:1: keyProperty : key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) ;
	public final HiveParser.keyProperty_return keyProperty() throws RecognitionException {
		HiveParser.keyProperty_return retval = new HiveParser.keyProperty_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token key=null;

		CommonTree key_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

		 pushMsg("specifying key property", state); 
		try {
			// grammar/HiveParser.g:1917:5: (key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) )
			// grammar/HiveParser.g:1918:7: key= StringLiteral
			{
			key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyProperty11235); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(key);

			// AST REWRITE
			// elements: key
			// token labels: key
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1918:25: -> ^( TOK_TABLEPROPERTY $key TOK_NULL )
			{
				// grammar/HiveParser.g:1918:28: ^( TOK_TABLEPROPERTY $key TOK_NULL )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY"), root_1);
				adaptor.addChild(root_1, stream_key.nextNode());
				adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_NULL, "TOK_NULL"));
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "keyProperty"


	public static class tableRowFormatFieldIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatFieldIdentifier"
	// grammar/HiveParser.g:1921:1: tableRowFormatFieldIdentifier : KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) ;
	public final HiveParser.tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatFieldIdentifier_return retval = new HiveParser.tableRowFormatFieldIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token fldIdnt=null;
		Token fldEscape=null;
		Token KW_FIELDS709=null;
		Token KW_TERMINATED710=null;
		Token KW_BY711=null;
		Token KW_ESCAPED712=null;
		Token KW_BY713=null;

		CommonTree fldIdnt_tree=null;
		CommonTree fldEscape_tree=null;
		CommonTree KW_FIELDS709_tree=null;
		CommonTree KW_TERMINATED710_tree=null;
		CommonTree KW_BY711_tree=null;
		CommonTree KW_ESCAPED712_tree=null;
		CommonTree KW_BY713_tree=null;
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_ESCAPED=new RewriteRuleTokenStream(adaptor,"token KW_ESCAPED");
		RewriteRuleTokenStream stream_KW_FIELDS=new RewriteRuleTokenStream(adaptor,"token KW_FIELDS");

		 pushMsg("table row format's field separator", state); 
		try {
			// grammar/HiveParser.g:1924:5: ( KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) )
			// grammar/HiveParser.g:1925:7: KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
			{
			KW_FIELDS709=(Token)match(input,KW_FIELDS,FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier11279); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FIELDS.add(KW_FIELDS709);

			KW_TERMINATED710=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier11281); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED710);

			KW_BY711=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier11283); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY711);

			fldIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier11287); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(fldIdnt);

			// grammar/HiveParser.g:1925:59: ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
			int alt210=2;
			int LA210_0 = input.LA(1);
			if ( (LA210_0==KW_ESCAPED) ) {
				alt210=1;
			}
			switch (alt210) {
				case 1 :
					// grammar/HiveParser.g:1925:60: KW_ESCAPED KW_BY fldEscape= StringLiteral
					{
					KW_ESCAPED712=(Token)match(input,KW_ESCAPED,FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier11290); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ESCAPED.add(KW_ESCAPED712);

					KW_BY713=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier11292); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY713);

					fldEscape=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier11296); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(fldEscape);

					}
					break;

			}

			// AST REWRITE
			// elements: fldEscape, fldIdnt
			// token labels: fldIdnt, fldEscape
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_fldIdnt=new RewriteRuleTokenStream(adaptor,"token fldIdnt",fldIdnt);
			RewriteRuleTokenStream stream_fldEscape=new RewriteRuleTokenStream(adaptor,"token fldEscape",fldEscape);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1926:5: -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
			{
				// grammar/HiveParser.g:1926:8: ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATFIELD, "TOK_TABLEROWFORMATFIELD"), root_1);
				adaptor.addChild(root_1, stream_fldIdnt.nextNode());
				// grammar/HiveParser.g:1926:44: ( $fldEscape)?
				if ( stream_fldEscape.hasNext() ) {
					adaptor.addChild(root_1, stream_fldEscape.nextNode());
				}
				stream_fldEscape.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatFieldIdentifier"


	public static class tableRowFormatCollItemsIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatCollItemsIdentifier"
	// grammar/HiveParser.g:1929:1: tableRowFormatCollItemsIdentifier : KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) ;
	public final HiveParser.tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatCollItemsIdentifier_return retval = new HiveParser.tableRowFormatCollItemsIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token collIdnt=null;
		Token KW_COLLECTION714=null;
		Token KW_ITEMS715=null;
		Token KW_TERMINATED716=null;
		Token KW_BY717=null;

		CommonTree collIdnt_tree=null;
		CommonTree KW_COLLECTION714_tree=null;
		CommonTree KW_ITEMS715_tree=null;
		CommonTree KW_TERMINATED716_tree=null;
		CommonTree KW_BY717_tree=null;
		RewriteRuleTokenStream stream_KW_COLLECTION=new RewriteRuleTokenStream(adaptor,"token KW_COLLECTION");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_ITEMS=new RewriteRuleTokenStream(adaptor,"token KW_ITEMS");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

		 pushMsg("table row format's column separator", state); 
		try {
			// grammar/HiveParser.g:1932:5: ( KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) )
			// grammar/HiveParser.g:1933:7: KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral
			{
			KW_COLLECTION714=(Token)match(input,KW_COLLECTION,FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier11348); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COLLECTION.add(KW_COLLECTION714);

			KW_ITEMS715=(Token)match(input,KW_ITEMS,FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier11350); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ITEMS.add(KW_ITEMS715);

			KW_TERMINATED716=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier11352); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED716);

			KW_BY717=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier11354); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY717);

			collIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier11358); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(collIdnt);

			// AST REWRITE
			// elements: collIdnt
			// token labels: collIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_collIdnt=new RewriteRuleTokenStream(adaptor,"token collIdnt",collIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1934:5: -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
			{
				// grammar/HiveParser.g:1934:8: ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATCOLLITEMS, "TOK_TABLEROWFORMATCOLLITEMS"), root_1);
				adaptor.addChild(root_1, stream_collIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatCollItemsIdentifier"


	public static class tableRowFormatMapKeysIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatMapKeysIdentifier"
	// grammar/HiveParser.g:1937:1: tableRowFormatMapKeysIdentifier : KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) ;
	public final HiveParser.tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatMapKeysIdentifier_return retval = new HiveParser.tableRowFormatMapKeysIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token mapKeysIdnt=null;
		Token KW_MAP718=null;
		Token KW_KEYS719=null;
		Token KW_TERMINATED720=null;
		Token KW_BY721=null;

		CommonTree mapKeysIdnt_tree=null;
		CommonTree KW_MAP718_tree=null;
		CommonTree KW_KEYS719_tree=null;
		CommonTree KW_TERMINATED720_tree=null;
		CommonTree KW_BY721_tree=null;
		RewriteRuleTokenStream stream_KW_KEYS=new RewriteRuleTokenStream(adaptor,"token KW_KEYS");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");

		 pushMsg("table row format's map key separator", state); 
		try {
			// grammar/HiveParser.g:1940:5: ( KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) )
			// grammar/HiveParser.g:1941:7: KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral
			{
			KW_MAP718=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier11404); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MAP.add(KW_MAP718);

			KW_KEYS719=(Token)match(input,KW_KEYS,FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier11406); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_KEYS.add(KW_KEYS719);

			KW_TERMINATED720=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier11408); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED720);

			KW_BY721=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier11410); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY721);

			mapKeysIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier11414); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(mapKeysIdnt);

			// AST REWRITE
			// elements: mapKeysIdnt
			// token labels: mapKeysIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_mapKeysIdnt=new RewriteRuleTokenStream(adaptor,"token mapKeysIdnt",mapKeysIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1942:5: -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
			{
				// grammar/HiveParser.g:1942:8: ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATMAPKEYS, "TOK_TABLEROWFORMATMAPKEYS"), root_1);
				adaptor.addChild(root_1, stream_mapKeysIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatMapKeysIdentifier"


	public static class tableRowFormatLinesIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatLinesIdentifier"
	// grammar/HiveParser.g:1945:1: tableRowFormatLinesIdentifier : KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) ;
	public final HiveParser.tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatLinesIdentifier_return retval = new HiveParser.tableRowFormatLinesIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token linesIdnt=null;
		Token KW_LINES722=null;
		Token KW_TERMINATED723=null;
		Token KW_BY724=null;

		CommonTree linesIdnt_tree=null;
		CommonTree KW_LINES722_tree=null;
		CommonTree KW_TERMINATED723_tree=null;
		CommonTree KW_BY724_tree=null;
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LINES=new RewriteRuleTokenStream(adaptor,"token KW_LINES");

		 pushMsg("table row format's line separator", state); 
		try {
			// grammar/HiveParser.g:1948:5: ( KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) )
			// grammar/HiveParser.g:1949:7: KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral
			{
			KW_LINES722=(Token)match(input,KW_LINES,FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier11460); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LINES.add(KW_LINES722);

			KW_TERMINATED723=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier11462); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED723);

			KW_BY724=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier11464); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY724);

			linesIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier11468); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(linesIdnt);

			// AST REWRITE
			// elements: linesIdnt
			// token labels: linesIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_linesIdnt=new RewriteRuleTokenStream(adaptor,"token linesIdnt",linesIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1950:5: -> ^( TOK_TABLEROWFORMATLINES $linesIdnt)
			{
				// grammar/HiveParser.g:1950:8: ^( TOK_TABLEROWFORMATLINES $linesIdnt)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATLINES, "TOK_TABLEROWFORMATLINES"), root_1);
				adaptor.addChild(root_1, stream_linesIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatLinesIdentifier"


	public static class tableRowNullFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowNullFormat"
	// grammar/HiveParser.g:1953:1: tableRowNullFormat : KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATNULL $nullIdnt) ;
	public final HiveParser.tableRowNullFormat_return tableRowNullFormat() throws RecognitionException {
		HiveParser.tableRowNullFormat_return retval = new HiveParser.tableRowNullFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token nullIdnt=null;
		Token KW_NULL725=null;
		Token KW_DEFINED726=null;
		Token KW_AS727=null;

		CommonTree nullIdnt_tree=null;
		CommonTree KW_NULL725_tree=null;
		CommonTree KW_DEFINED726_tree=null;
		CommonTree KW_AS727_tree=null;
		RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_DEFINED=new RewriteRuleTokenStream(adaptor,"token KW_DEFINED");

		 pushMsg("table row format's null specifier", state); 
		try {
			// grammar/HiveParser.g:1956:5: ( KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATNULL $nullIdnt) )
			// grammar/HiveParser.g:1957:7: KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral
			{
			KW_NULL725=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_tableRowNullFormat11514); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_NULL.add(KW_NULL725);

			KW_DEFINED726=(Token)match(input,KW_DEFINED,FOLLOW_KW_DEFINED_in_tableRowNullFormat11516); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DEFINED.add(KW_DEFINED726);

			KW_AS727=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableRowNullFormat11518); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS727);

			nullIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowNullFormat11522); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(nullIdnt);

			// AST REWRITE
			// elements: nullIdnt
			// token labels: nullIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_nullIdnt=new RewriteRuleTokenStream(adaptor,"token nullIdnt",nullIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1958:5: -> ^( TOK_TABLEROWFORMATNULL $nullIdnt)
			{
				// grammar/HiveParser.g:1958:8: ^( TOK_TABLEROWFORMATNULL $nullIdnt)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATNULL, "TOK_TABLEROWFORMATNULL"), root_1);
				adaptor.addChild(root_1, stream_nullIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowNullFormat"


	public static class tableFileFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableFileFormat"
	// grammar/HiveParser.g:1960:1: tableFileFormat : ( ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
	public final HiveParser.tableFileFormat_return tableFileFormat() throws RecognitionException {
		HiveParser.tableFileFormat_return retval = new HiveParser.tableFileFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token inFmt=null;
		Token outFmt=null;
		Token inDriver=null;
		Token outDriver=null;
		Token storageHandler=null;
		Token KW_STORED728=null;
		Token KW_AS729=null;
		Token KW_INPUTFORMAT730=null;
		Token KW_OUTPUTFORMAT731=null;
		Token KW_INPUTDRIVER732=null;
		Token KW_OUTPUTDRIVER733=null;
		Token KW_STORED734=null;
		Token KW_BY735=null;
		Token KW_WITH736=null;
		Token KW_SERDEPROPERTIES737=null;
		Token KW_STORED738=null;
		Token KW_AS739=null;
		ParserRuleReturnScope serdeprops =null;
		ParserRuleReturnScope genericSpec =null;

		CommonTree inFmt_tree=null;
		CommonTree outFmt_tree=null;
		CommonTree inDriver_tree=null;
		CommonTree outDriver_tree=null;
		CommonTree storageHandler_tree=null;
		CommonTree KW_STORED728_tree=null;
		CommonTree KW_AS729_tree=null;
		CommonTree KW_INPUTFORMAT730_tree=null;
		CommonTree KW_OUTPUTFORMAT731_tree=null;
		CommonTree KW_INPUTDRIVER732_tree=null;
		CommonTree KW_OUTPUTDRIVER733_tree=null;
		CommonTree KW_STORED734_tree=null;
		CommonTree KW_BY735_tree=null;
		CommonTree KW_WITH736_tree=null;
		CommonTree KW_SERDEPROPERTIES737_tree=null;
		CommonTree KW_STORED738_tree=null;
		CommonTree KW_AS739_tree=null;
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
		RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
		RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("table file format specification", state); 
		try {
			// grammar/HiveParser.g:1963:5: ( ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
			int alt213=3;
			int LA213_0 = input.LA(1);
			if ( (LA213_0==KW_STORED) ) {
				int LA213_1 = input.LA(2);
				if ( (LA213_1==KW_AS) ) {
					int LA213_2 = input.LA(3);
					if ( (LA213_2==KW_INPUTFORMAT) ) {
						int LA213_4 = input.LA(4);
						if ( (synpred18_HiveParser()) ) {
							alt213=1;
						}
						else if ( (true) ) {
							alt213=3;
						}

					}
					else if ( ((LA213_2 >= Identifier && LA213_2 <= KW_ANALYZE)||(LA213_2 >= KW_ARCHIVE && LA213_2 <= KW_BY)||LA213_2==KW_CASCADE||LA213_2==KW_CHANGE||(LA213_2 >= KW_CLUSTER && LA213_2 <= KW_COLLECTION)||(LA213_2 >= KW_COLUMNS && LA213_2 <= KW_COMMENT)||(LA213_2 >= KW_COMPACT && LA213_2 <= KW_CONCATENATE)||(LA213_2 >= KW_CONSTRAINT && LA213_2 <= KW_CREATE)||LA213_2==KW_CUBE||(LA213_2 >= KW_CURRENT_DATE && LA213_2 <= KW_DATA)||(LA213_2 >= KW_DATABASES && LA213_2 <= KW_DISABLE)||(LA213_2 >= KW_DISTRIBUTE && LA213_2 <= KW_ELEM_TYPE)||LA213_2==KW_ENABLE||LA213_2==KW_ESCAPED||(LA213_2 >= KW_EXCLUSIVE && LA213_2 <= KW_EXPORT)||(LA213_2 >= KW_EXTERNAL && LA213_2 <= KW_FLOAT)||(LA213_2 >= KW_FOR && LA213_2 <= KW_FORMATTED)||LA213_2==KW_FULL||(LA213_2 >= KW_FUNCTIONS && LA213_2 <= KW_GROUPING)||(LA213_2 >= KW_HOUR && LA213_2 <= KW_IDXPROPERTIES)||(LA213_2 >= KW_IMPORT && LA213_2 <= KW_INPUTDRIVER)||(LA213_2 >= KW_INSERT && LA213_2 <= KW_INTERSECT)||(LA213_2 >= KW_INTO && LA213_2 <= KW_JAR)||(LA213_2 >= KW_KEY && LA213_2 <= KW_LEFT)||(LA213_2 >= KW_LEVEL && LA213_2 <= KW_LONG)||(LA213_2 >= KW_MAPJOIN && LA213_2 <= KW_MONTH)||(LA213_2 >= KW_MSCK && LA213_2 <= KW_NOSCAN)||(LA213_2 >= KW_NOVALIDATE && LA213_2 <= KW_OFFSET)||LA213_2==KW_OPTION||(LA213_2 >= KW_ORDER && LA213_2 <= KW_OUTPUTFORMAT)||(LA213_2 >= KW_OVERWRITE && LA213_2 <= KW_OWNER)||(LA213_2 >= KW_PARTITION && LA213_2 <= KW_PLUS)||(LA213_2 >= KW_PRETTY && LA213_2 <= KW_RECORDWRITER)||(LA213_2 >= KW_REFERENCES && LA213_2 <= KW_ROLES)||(LA213_2 >= KW_ROLLUP && LA213_2 <= KW_SECOND)||(LA213_2 >= KW_SEMI && LA213_2 <= KW_SSL)||(LA213_2 >= KW_STATISTICS && LA213_2 <= KW_TABLES)||(LA213_2 >= KW_TBLPROPERTIES && LA213_2 <= KW_TERMINATED)||(LA213_2 >= KW_TIMESTAMP && LA213_2 <= KW_TRANSACTIONS)||(LA213_2 >= KW_TRIGGER && LA213_2 <= KW_UNARCHIVE)||(LA213_2 >= KW_UNDO && LA213_2 <= KW_UNIONTYPE)||(LA213_2 >= KW_UNLOCK && LA213_2 <= KW_VALUE_TYPE)||LA213_2==KW_VIEW||LA213_2==KW_WHILE||(LA213_2 >= KW_WITH && LA213_2 <= KW_YEAR)||LA213_2==KW_HOLD_DDLTIME||LA213_2==KW_IGNORE||LA213_2==KW_NO_DROP||LA213_2==KW_OFFLINE||LA213_2==KW_PROTECTION||LA213_2==KW_READONLY) ) {
						alt213=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 213, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA213_1==KW_BY) ) {
					alt213=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 213, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 213, 0, input);
				throw nvae;
			}

			switch (alt213) {
				case 1 :
					// grammar/HiveParser.g:1964:7: ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					{
					KW_STORED728=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat11577); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED728);

					KW_AS729=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat11579); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS729);

					KW_INPUTFORMAT730=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_tableFileFormat11581); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT730);

					inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11585); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(inFmt);

					KW_OUTPUTFORMAT731=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat11587); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT731);

					outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11591); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(outFmt);

					// grammar/HiveParser.g:1964:131: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					int alt211=2;
					int LA211_0 = input.LA(1);
					if ( (LA211_0==KW_INPUTDRIVER) ) {
						alt211=1;
					}
					switch (alt211) {
						case 1 :
							// grammar/HiveParser.g:1964:132: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
							{
							KW_INPUTDRIVER732=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_tableFileFormat11594); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER732);

							inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11598); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(inDriver);

							KW_OUTPUTDRIVER733=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat11600); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER733);

							outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11604); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(outDriver);

							}
							break;

					}

					// AST REWRITE
					// elements: inFmt, outFmt, inDriver, outDriver
					// token labels: inFmt, inDriver, outDriver, outFmt
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
					RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
					RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
					RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1965:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
					{
						// grammar/HiveParser.g:1965:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);
						adaptor.addChild(root_1, stream_inFmt.nextNode());
						adaptor.addChild(root_1, stream_outFmt.nextNode());
						// grammar/HiveParser.g:1965:48: ( $inDriver)?
						if ( stream_inDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_inDriver.nextNode());
						}
						stream_inDriver.reset();

						// grammar/HiveParser.g:1965:59: ( $outDriver)?
						if ( stream_outDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_outDriver.nextNode());
						}
						stream_outDriver.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:1966:9: KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
					{
					KW_STORED734=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat11642); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED734);

					KW_BY735=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableFileFormat11644); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY735);

					storageHandler=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11648); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(storageHandler);

					// grammar/HiveParser.g:1967:10: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
					int alt212=2;
					int LA212_0 = input.LA(1);
					if ( (LA212_0==KW_WITH) ) {
						alt212=1;
					}
					switch (alt212) {
						case 1 :
							// grammar/HiveParser.g:1967:11: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
							{
							KW_WITH736=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_tableFileFormat11660); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH736);

							KW_SERDEPROPERTIES737=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat11662); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES737);

							pushFollow(FOLLOW_tableProperties_in_tableFileFormat11666);
							serdeprops=tableProperties();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableProperties.add(serdeprops.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: storageHandler, serdeprops
					// token labels: storageHandler
					// rule labels: serdeprops, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_storageHandler=new RewriteRuleTokenStream(adaptor,"token storageHandler",storageHandler);
					RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1968:7: -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
					{
						// grammar/HiveParser.g:1968:10: ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_STORAGEHANDLER, "TOK_STORAGEHANDLER"), root_1);
						adaptor.addChild(root_1, stream_storageHandler.nextNode());
						// grammar/HiveParser.g:1968:48: ( $serdeprops)?
						if ( stream_serdeprops.hasNext() ) {
							adaptor.addChild(root_1, stream_serdeprops.nextTree());
						}
						stream_serdeprops.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:1969:9: KW_STORED KW_AS genericSpec= identifier
					{
					KW_STORED738=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat11697); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED738);

					KW_AS739=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat11699); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS739);

					pushFollow(FOLLOW_identifier_in_tableFileFormat11703);
					genericSpec=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(genericSpec.getTree());
					// AST REWRITE
					// elements: genericSpec
					// token labels: 
					// rule labels: genericSpec, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_genericSpec=new RewriteRuleSubtreeStream(adaptor,"rule genericSpec",genericSpec!=null?genericSpec.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1970:7: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
					{
						// grammar/HiveParser.g:1970:10: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);
						adaptor.addChild(root_1, stream_genericSpec.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableFileFormat"


	public static class tableLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableLocation"
	// grammar/HiveParser.g:1973:1: tableLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) ;
	public final HiveParser.tableLocation_return tableLocation() throws RecognitionException {
		HiveParser.tableLocation_return retval = new HiveParser.tableLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token locn=null;
		Token KW_LOCATION740=null;

		CommonTree locn_tree=null;
		CommonTree KW_LOCATION740_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 pushMsg("table location specification", state); 
		try {
			// grammar/HiveParser.g:1976:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) )
			// grammar/HiveParser.g:1977:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION740=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_tableLocation11751); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION740);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableLocation11755); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1977:38: -> ^( TOK_TABLELOCATION $locn)
			{
				// grammar/HiveParser.g:1977:41: ^( TOK_TABLELOCATION $locn)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLELOCATION, "TOK_TABLELOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableLocation"


	public static class columnNameTypeList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameTypeList"
	// grammar/HiveParser.g:1980:1: columnNameTypeList : columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) ;
	public final HiveParser.columnNameTypeList_return columnNameTypeList() throws RecognitionException {
		HiveParser.columnNameTypeList_return retval = new HiveParser.columnNameTypeList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA742=null;
		ParserRuleReturnScope columnNameType741 =null;
		ParserRuleReturnScope columnNameType743 =null;

		CommonTree COMMA742_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");

		 pushMsg("column name type list", state); 
		try {
			// grammar/HiveParser.g:1983:5: ( columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) )
			// grammar/HiveParser.g:1983:7: columnNameType ( COMMA columnNameType )*
			{
			pushFollow(FOLLOW_columnNameType_in_columnNameTypeList11791);
			columnNameType741=columnNameType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType741.getTree());
			// grammar/HiveParser.g:1983:22: ( COMMA columnNameType )*
			loop214:
			while (true) {
				int alt214=2;
				int LA214_0 = input.LA(1);
				if ( (LA214_0==COMMA) ) {
					alt214=1;
				}

				switch (alt214) {
				case 1 :
					// grammar/HiveParser.g:1983:23: COMMA columnNameType
					{
					COMMA742=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeList11794); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA742);

					pushFollow(FOLLOW_columnNameType_in_columnNameTypeList11796);
					columnNameType743=columnNameType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType743.getTree());
					}
					break;

				default :
					break loop214;
				}
			}

			// AST REWRITE
			// elements: columnNameType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1983:46: -> ^( TOK_TABCOLLIST ( columnNameType )+ )
			{
				// grammar/HiveParser.g:1983:49: ^( TOK_TABCOLLIST ( columnNameType )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);
				if ( !(stream_columnNameType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameType.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameType.nextTree());
				}
				stream_columnNameType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameTypeList"


	public static class columnNameTypeOrPKOrFKList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameTypeOrPKOrFKList"
	// grammar/HiveParser.g:1985:1: columnNameTypeOrPKOrFKList : columnNameTypeOrPKOrFK ( COMMA columnNameTypeOrPKOrFK )* -> ^( TOK_TABCOLLIST ( columnNameTypeOrPKOrFK )+ ) ;
	public final HiveParser.columnNameTypeOrPKOrFKList_return columnNameTypeOrPKOrFKList() throws RecognitionException {
		HiveParser.columnNameTypeOrPKOrFKList_return retval = new HiveParser.columnNameTypeOrPKOrFKList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA745=null;
		ParserRuleReturnScope columnNameTypeOrPKOrFK744 =null;
		ParserRuleReturnScope columnNameTypeOrPKOrFK746 =null;

		CommonTree COMMA745_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameTypeOrPKOrFK=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeOrPKOrFK");

		 pushMsg("column name type list with PK and FK", state); 
		try {
			// grammar/HiveParser.g:1988:5: ( columnNameTypeOrPKOrFK ( COMMA columnNameTypeOrPKOrFK )* -> ^( TOK_TABCOLLIST ( columnNameTypeOrPKOrFK )+ ) )
			// grammar/HiveParser.g:1988:7: columnNameTypeOrPKOrFK ( COMMA columnNameTypeOrPKOrFK )*
			{
			pushFollow(FOLLOW_columnNameTypeOrPKOrFK_in_columnNameTypeOrPKOrFKList11833);
			columnNameTypeOrPKOrFK744=columnNameTypeOrPKOrFK();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameTypeOrPKOrFK.add(columnNameTypeOrPKOrFK744.getTree());
			// grammar/HiveParser.g:1988:30: ( COMMA columnNameTypeOrPKOrFK )*
			loop215:
			while (true) {
				int alt215=2;
				int LA215_0 = input.LA(1);
				if ( (LA215_0==COMMA) ) {
					alt215=1;
				}

				switch (alt215) {
				case 1 :
					// grammar/HiveParser.g:1988:31: COMMA columnNameTypeOrPKOrFK
					{
					COMMA745=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeOrPKOrFKList11836); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA745);

					pushFollow(FOLLOW_columnNameTypeOrPKOrFK_in_columnNameTypeOrPKOrFKList11838);
					columnNameTypeOrPKOrFK746=columnNameTypeOrPKOrFK();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameTypeOrPKOrFK.add(columnNameTypeOrPKOrFK746.getTree());
					}
					break;

				default :
					break loop215;
				}
			}

			// AST REWRITE
			// elements: columnNameTypeOrPKOrFK
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1988:62: -> ^( TOK_TABCOLLIST ( columnNameTypeOrPKOrFK )+ )
			{
				// grammar/HiveParser.g:1988:65: ^( TOK_TABCOLLIST ( columnNameTypeOrPKOrFK )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);
				if ( !(stream_columnNameTypeOrPKOrFK.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameTypeOrPKOrFK.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeOrPKOrFK.nextTree());
				}
				stream_columnNameTypeOrPKOrFK.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameTypeOrPKOrFKList"


	public static class columnNameColonTypeList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameColonTypeList"
	// grammar/HiveParser.g:1991:1: columnNameColonTypeList : columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) ;
	public final HiveParser.columnNameColonTypeList_return columnNameColonTypeList() throws RecognitionException {
		HiveParser.columnNameColonTypeList_return retval = new HiveParser.columnNameColonTypeList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA748=null;
		ParserRuleReturnScope columnNameColonType747 =null;
		ParserRuleReturnScope columnNameColonType749 =null;

		CommonTree COMMA748_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameColonType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonType");

		 pushMsg("column name type list", state); 
		try {
			// grammar/HiveParser.g:1994:5: ( columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) )
			// grammar/HiveParser.g:1994:7: columnNameColonType ( COMMA columnNameColonType )*
			{
			pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList11876);
			columnNameColonType747=columnNameColonType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameColonType.add(columnNameColonType747.getTree());
			// grammar/HiveParser.g:1994:27: ( COMMA columnNameColonType )*
			loop216:
			while (true) {
				int alt216=2;
				int LA216_0 = input.LA(1);
				if ( (LA216_0==COMMA) ) {
					alt216=1;
				}

				switch (alt216) {
				case 1 :
					// grammar/HiveParser.g:1994:28: COMMA columnNameColonType
					{
					COMMA748=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameColonTypeList11879); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA748);

					pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList11881);
					columnNameColonType749=columnNameColonType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameColonType.add(columnNameColonType749.getTree());
					}
					break;

				default :
					break loop216;
				}
			}

			// AST REWRITE
			// elements: columnNameColonType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1994:56: -> ^( TOK_TABCOLLIST ( columnNameColonType )+ )
			{
				// grammar/HiveParser.g:1994:59: ^( TOK_TABCOLLIST ( columnNameColonType )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);
				if ( !(stream_columnNameColonType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameColonType.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameColonType.nextTree());
				}
				stream_columnNameColonType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameColonTypeList"


	public static class columnNameList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameList"
	// grammar/HiveParser.g:1997:1: columnNameList : columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) ;
	public final HiveParser.columnNameList_return columnNameList() throws RecognitionException {
		HiveParser.columnNameList_return retval = new HiveParser.columnNameList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA751=null;
		ParserRuleReturnScope columnName750 =null;
		ParserRuleReturnScope columnName752 =null;

		CommonTree COMMA751_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");

		 pushMsg("column name list", state); 
		try {
			// grammar/HiveParser.g:2000:5: ( columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) )
			// grammar/HiveParser.g:2000:7: columnName ( COMMA columnName )*
			{
			pushFollow(FOLLOW_columnName_in_columnNameList11919);
			columnName750=columnName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnName.add(columnName750.getTree());
			// grammar/HiveParser.g:2000:18: ( COMMA columnName )*
			loop217:
			while (true) {
				int alt217=2;
				int LA217_0 = input.LA(1);
				if ( (LA217_0==COMMA) ) {
					alt217=1;
				}

				switch (alt217) {
				case 1 :
					// grammar/HiveParser.g:2000:19: COMMA columnName
					{
					COMMA751=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameList11922); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA751);

					pushFollow(FOLLOW_columnName_in_columnNameList11924);
					columnName752=columnName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnName.add(columnName752.getTree());
					}
					break;

				default :
					break loop217;
				}
			}

			// AST REWRITE
			// elements: columnName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2000:38: -> ^( TOK_TABCOLNAME ( columnName )+ )
			{
				// grammar/HiveParser.g:2000:41: ^( TOK_TABCOLNAME ( columnName )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnName.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnName.hasNext() ) {
					adaptor.addChild(root_1, stream_columnName.nextTree());
				}
				stream_columnName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameList"


	public static class columnName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnName"
	// grammar/HiveParser.g:2003:1: columnName : identifier ;
	public final HiveParser.columnName_return columnName() throws RecognitionException {
		HiveParser.columnName_return retval = new HiveParser.columnName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope identifier753 =null;


		 pushMsg("column name", state); 
		try {
			// grammar/HiveParser.g:2006:5: ( identifier )
			// grammar/HiveParser.g:2007:7: identifier
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_columnName11968);
			identifier753=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier753.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnName"


	public static class extColumnName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "extColumnName"
	// grammar/HiveParser.g:2010:1: extColumnName : identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* ;
	public final HiveParser.extColumnName_return extColumnName() throws RecognitionException {
		HiveParser.extColumnName_return retval = new HiveParser.extColumnName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DOT755=null;
		Token KW_ELEM_TYPE756=null;
		Token KW_KEY_TYPE757=null;
		Token KW_VALUE_TYPE758=null;
		ParserRuleReturnScope identifier754 =null;
		ParserRuleReturnScope identifier759 =null;

		CommonTree DOT755_tree=null;
		CommonTree KW_ELEM_TYPE756_tree=null;
		CommonTree KW_KEY_TYPE757_tree=null;
		CommonTree KW_VALUE_TYPE758_tree=null;

		 pushMsg("column name for complex types", state); 
		try {
			// grammar/HiveParser.g:2013:5: ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )
			// grammar/HiveParser.g:2014:7: identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_extColumnName12001);
			identifier754=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier754.getTree());

			// grammar/HiveParser.g:2014:18: ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
			loop219:
			while (true) {
				int alt219=2;
				int LA219_0 = input.LA(1);
				if ( (LA219_0==DOT) ) {
					alt219=1;
				}

				switch (alt219) {
				case 1 :
					// grammar/HiveParser.g:2014:19: DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
					{
					DOT755=(Token)match(input,DOT,FOLLOW_DOT_in_extColumnName12004); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT755_tree = (CommonTree)adaptor.create(DOT755);
					root_0 = (CommonTree)adaptor.becomeRoot(DOT755_tree, root_0);
					}

					// grammar/HiveParser.g:2014:24: ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
					int alt218=4;
					switch ( input.LA(1) ) {
					case KW_ELEM_TYPE:
						{
						int LA218_1 = input.LA(2);
						if ( (synpred19_HiveParser()) ) {
							alt218=1;
						}
						else if ( (true) ) {
							alt218=4;
						}

						}
						break;
					case KW_KEY_TYPE:
						{
						int LA218_2 = input.LA(2);
						if ( (synpred20_HiveParser()) ) {
							alt218=2;
						}
						else if ( (true) ) {
							alt218=4;
						}

						}
						break;
					case KW_VALUE_TYPE:
						{
						int LA218_3 = input.LA(2);
						if ( (synpred21_HiveParser()) ) {
							alt218=3;
						}
						else if ( (true) ) {
							alt218=4;
						}

						}
						break;
					case Identifier:
					case KW_ABORT:
					case KW_ADD:
					case KW_ADMIN:
					case KW_AFTER:
					case KW_ALL:
					case KW_ALTER:
					case KW_ANALYZE:
					case KW_ARCHIVE:
					case KW_ARRAY:
					case KW_AS:
					case KW_ASC:
					case KW_AUTHORIZATION:
					case KW_AUTOCOMMIT:
					case KW_BEFORE:
					case KW_BETWEEN:
					case KW_BIGINT:
					case KW_BINARY:
					case KW_BOOLEAN:
					case KW_BOTH:
					case KW_BUCKET:
					case KW_BUCKETS:
					case KW_BY:
					case KW_CASCADE:
					case KW_CHANGE:
					case KW_CLUSTER:
					case KW_CLUSTERED:
					case KW_CLUSTERSTATUS:
					case KW_COLLECTION:
					case KW_COLUMNS:
					case KW_COMMENT:
					case KW_COMPACT:
					case KW_COMPACTIONS:
					case KW_COMPUTE:
					case KW_CONCATENATE:
					case KW_CONSTRAINT:
					case KW_CONTINUE:
					case KW_CREATE:
					case KW_CUBE:
					case KW_CURRENT_DATE:
					case KW_CURRENT_TIMESTAMP:
					case KW_CURSOR:
					case KW_DATA:
					case KW_DATABASES:
					case KW_DATE:
					case KW_DATETIME:
					case KW_DAY:
					case KW_DBPROPERTIES:
					case KW_DECIMAL:
					case KW_DEFERRED:
					case KW_DEFINED:
					case KW_DELETE:
					case KW_DELIMITED:
					case KW_DEPENDENCY:
					case KW_DESC:
					case KW_DESCRIBE:
					case KW_DIRECTORIES:
					case KW_DIRECTORY:
					case KW_DISABLE:
					case KW_DISTRIBUTE:
					case KW_DOUBLE:
					case KW_DROP:
					case KW_ENABLE:
					case KW_ESCAPED:
					case KW_EXCLUSIVE:
					case KW_EXISTS:
					case KW_EXPLAIN:
					case KW_EXPORT:
					case KW_EXTERNAL:
					case KW_FALSE:
					case KW_FETCH:
					case KW_FIELDS:
					case KW_FILE:
					case KW_FILEFORMAT:
					case KW_FIRST:
					case KW_FLOAT:
					case KW_FOR:
					case KW_FOREIGN:
					case KW_FORMAT:
					case KW_FORMATTED:
					case KW_FULL:
					case KW_FUNCTIONS:
					case KW_GRANT:
					case KW_GROUP:
					case KW_GROUPING:
					case KW_HOUR:
					case KW_IDXPROPERTIES:
					case KW_IMPORT:
					case KW_IN:
					case KW_INDEX:
					case KW_INDEXES:
					case KW_INNER:
					case KW_INPATH:
					case KW_INPUTDRIVER:
					case KW_INPUTFORMAT:
					case KW_INSERT:
					case KW_INT:
					case KW_INTERSECT:
					case KW_INTO:
					case KW_IS:
					case KW_ISOLATION:
					case KW_ITEMS:
					case KW_JAR:
					case KW_KEY:
					case KW_KEYS:
					case KW_LAST:
					case KW_LATERAL:
					case KW_LEFT:
					case KW_LEVEL:
					case KW_LIKE:
					case KW_LIMIT:
					case KW_LINES:
					case KW_LOAD:
					case KW_LOCAL:
					case KW_LOCATION:
					case KW_LOCK:
					case KW_LOCKS:
					case KW_LOGICAL:
					case KW_LONG:
					case KW_MAPJOIN:
					case KW_MATERIALIZED:
					case KW_METADATA:
					case KW_MINUS:
					case KW_MINUTE:
					case KW_MONTH:
					case KW_MSCK:
					case KW_NONE:
					case KW_NORELY:
					case KW_NOSCAN:
					case KW_NOVALIDATE:
					case KW_NULL:
					case KW_NULLS:
					case KW_OF:
					case KW_OFFSET:
					case KW_OPTION:
					case KW_ORDER:
					case KW_OUT:
					case KW_OUTER:
					case KW_OUTPUTDRIVER:
					case KW_OUTPUTFORMAT:
					case KW_OVERWRITE:
					case KW_OWNER:
					case KW_PARTITION:
					case KW_PARTITIONED:
					case KW_PARTITIONS:
					case KW_PERCENT:
					case KW_PLUS:
					case KW_PRETTY:
					case KW_PRIMARY:
					case KW_PRINCIPALS:
					case KW_PROCEDURE:
					case KW_PURGE:
					case KW_RANGE:
					case KW_READ:
					case KW_READS:
					case KW_REBUILD:
					case KW_RECORDREADER:
					case KW_RECORDWRITER:
					case KW_REFERENCES:
					case KW_REGEXP:
					case KW_RELOAD:
					case KW_RELY:
					case KW_RENAME:
					case KW_REPAIR:
					case KW_REPLACE:
					case KW_REPLICATION:
					case KW_RESTRICT:
					case KW_REVOKE:
					case KW_REWRITE:
					case KW_RIGHT:
					case KW_RLIKE:
					case KW_ROLE:
					case KW_ROLES:
					case KW_ROLLUP:
					case KW_ROW:
					case KW_ROWS:
					case KW_SCHEMA:
					case KW_SCHEMAS:
					case KW_SECOND:
					case KW_SEMI:
					case KW_SERDE:
					case KW_SERDEPROPERTIES:
					case KW_SERVER:
					case KW_SET:
					case KW_SETS:
					case KW_SHARED:
					case KW_SHOW:
					case KW_SHOW_DATABASE:
					case KW_SKEWED:
					case KW_SMALLINT:
					case KW_SNAPSHOT:
					case KW_SORT:
					case KW_SORTED:
					case KW_SSL:
					case KW_STATISTICS:
					case KW_STORED:
					case KW_STREAMTABLE:
					case KW_STRING:
					case KW_STRUCT:
					case KW_TABLE:
					case KW_TABLES:
					case KW_TBLPROPERTIES:
					case KW_TEMPORARY:
					case KW_TERMINATED:
					case KW_TIMESTAMP:
					case KW_TINYINT:
					case KW_TO:
					case KW_TOUCH:
					case KW_TRANSACTION:
					case KW_TRANSACTIONS:
					case KW_TRIGGER:
					case KW_TRUE:
					case KW_TRUNCATE:
					case KW_UNARCHIVE:
					case KW_UNDO:
					case KW_UNION:
					case KW_UNIONTYPE:
					case KW_UNLOCK:
					case KW_UNSET:
					case KW_UNSIGNED:
					case KW_UPDATE:
					case KW_URI:
					case KW_USE:
					case KW_USER:
					case KW_USING:
					case KW_UTC:
					case KW_UTCTIMESTAMP:
					case KW_VALIDATE:
					case KW_VALUES:
					case KW_VIEW:
					case KW_WHILE:
					case KW_WITH:
					case KW_WORK:
					case KW_WRITE:
					case KW_YEAR:
					case KW_HOLD_DDLTIME:
					case KW_IGNORE:
					case KW_NO_DROP:
					case KW_OFFLINE:
					case KW_PROTECTION:
					case KW_READONLY:
						{
						alt218=4;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 218, 0, input);
						throw nvae;
					}
					switch (alt218) {
						case 1 :
							// grammar/HiveParser.g:2014:25: ( KW_ELEM_TYPE )=> KW_ELEM_TYPE
							{
							KW_ELEM_TYPE756=(Token)match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_extColumnName12014); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KW_ELEM_TYPE756_tree = (CommonTree)adaptor.create(KW_ELEM_TYPE756);
							adaptor.addChild(root_0, KW_ELEM_TYPE756_tree);
							}

							}
							break;
						case 2 :
							// grammar/HiveParser.g:2014:58: ( KW_KEY_TYPE )=> KW_KEY_TYPE
							{
							KW_KEY_TYPE757=(Token)match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_extColumnName12024); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KW_KEY_TYPE757_tree = (CommonTree)adaptor.create(KW_KEY_TYPE757);
							adaptor.addChild(root_0, KW_KEY_TYPE757_tree);
							}

							}
							break;
						case 3 :
							// grammar/HiveParser.g:2014:89: ( KW_VALUE_TYPE )=> KW_VALUE_TYPE
							{
							KW_VALUE_TYPE758=(Token)match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_extColumnName12034); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KW_VALUE_TYPE758_tree = (CommonTree)adaptor.create(KW_VALUE_TYPE758);
							adaptor.addChild(root_0, KW_VALUE_TYPE758_tree);
							}

							}
							break;
						case 4 :
							// grammar/HiveParser.g:2014:124: identifier
							{
							pushFollow(FOLLOW_identifier_in_extColumnName12038);
							identifier759=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier759.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop219;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "extColumnName"


	public static class columnNameOrderList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameOrderList"
	// grammar/HiveParser.g:2017:1: columnNameOrderList : columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) ;
	public final HiveParser.columnNameOrderList_return columnNameOrderList() throws RecognitionException {
		HiveParser.columnNameOrderList_return retval = new HiveParser.columnNameOrderList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA761=null;
		ParserRuleReturnScope columnNameOrder760 =null;
		ParserRuleReturnScope columnNameOrder762 =null;

		CommonTree COMMA761_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrder");

		 pushMsg("column name order list", state); 
		try {
			// grammar/HiveParser.g:2020:5: ( columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) )
			// grammar/HiveParser.g:2020:7: columnNameOrder ( COMMA columnNameOrder )*
			{
			pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList12068);
			columnNameOrder760=columnNameOrder();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameOrder.add(columnNameOrder760.getTree());
			// grammar/HiveParser.g:2020:23: ( COMMA columnNameOrder )*
			loop220:
			while (true) {
				int alt220=2;
				int LA220_0 = input.LA(1);
				if ( (LA220_0==COMMA) ) {
					alt220=1;
				}

				switch (alt220) {
				case 1 :
					// grammar/HiveParser.g:2020:24: COMMA columnNameOrder
					{
					COMMA761=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameOrderList12071); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA761);

					pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList12073);
					columnNameOrder762=columnNameOrder();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameOrder.add(columnNameOrder762.getTree());
					}
					break;

				default :
					break loop220;
				}
			}

			// AST REWRITE
			// elements: columnNameOrder
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2020:48: -> ^( TOK_TABCOLNAME ( columnNameOrder )+ )
			{
				// grammar/HiveParser.g:2020:51: ^( TOK_TABCOLNAME ( columnNameOrder )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnNameOrder.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameOrder.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameOrder.nextTree());
				}
				stream_columnNameOrder.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameOrderList"


	public static class columnParenthesesList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnParenthesesList"
	// grammar/HiveParser.g:2023:1: columnParenthesesList : LPAREN columnNameList RPAREN ;
	public final HiveParser.columnParenthesesList_return columnParenthesesList() throws RecognitionException {
		HiveParser.columnParenthesesList_return retval = new HiveParser.columnParenthesesList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN763=null;
		Token RPAREN765=null;
		ParserRuleReturnScope columnNameList764 =null;

		CommonTree LPAREN763_tree=null;
		CommonTree RPAREN765_tree=null;

		 pushMsg("column parentheses list", state); 
		try {
			// grammar/HiveParser.g:2026:5: ( LPAREN columnNameList RPAREN )
			// grammar/HiveParser.g:2026:7: LPAREN columnNameList RPAREN
			{
			root_0 = (CommonTree)adaptor.nil();


			LPAREN763=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_columnParenthesesList12111); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN763_tree = (CommonTree)adaptor.create(LPAREN763);
			adaptor.addChild(root_0, LPAREN763_tree);
			}

			pushFollow(FOLLOW_columnNameList_in_columnParenthesesList12113);
			columnNameList764=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, columnNameList764.getTree());

			RPAREN765=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_columnParenthesesList12115); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN765_tree = (CommonTree)adaptor.create(RPAREN765);
			adaptor.addChild(root_0, RPAREN765_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnParenthesesList"


	public static class enableSpecification_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "enableSpecification"
	// grammar/HiveParser.g:2029:1: enableSpecification : ( KW_ENABLE -> ^( TOK_ENABLE ) | KW_DISABLE -> ^( TOK_DISABLE ) );
	public final HiveParser.enableSpecification_return enableSpecification() throws RecognitionException {
		HiveParser.enableSpecification_return retval = new HiveParser.enableSpecification_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ENABLE766=null;
		Token KW_DISABLE767=null;

		CommonTree KW_ENABLE766_tree=null;
		CommonTree KW_DISABLE767_tree=null;
		RewriteRuleTokenStream stream_KW_DISABLE=new RewriteRuleTokenStream(adaptor,"token KW_DISABLE");
		RewriteRuleTokenStream stream_KW_ENABLE=new RewriteRuleTokenStream(adaptor,"token KW_ENABLE");

		 pushMsg("enable specification", state); 
		try {
			// grammar/HiveParser.g:2032:5: ( KW_ENABLE -> ^( TOK_ENABLE ) | KW_DISABLE -> ^( TOK_DISABLE ) )
			int alt221=2;
			int LA221_0 = input.LA(1);
			if ( (LA221_0==KW_ENABLE) ) {
				alt221=1;
			}
			else if ( (LA221_0==KW_DISABLE) ) {
				alt221=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 221, 0, input);
				throw nvae;
			}

			switch (alt221) {
				case 1 :
					// grammar/HiveParser.g:2032:7: KW_ENABLE
					{
					KW_ENABLE766=(Token)match(input,KW_ENABLE,FOLLOW_KW_ENABLE_in_enableSpecification12142); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ENABLE.add(KW_ENABLE766);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2032:17: -> ^( TOK_ENABLE )
					{
						// grammar/HiveParser.g:2032:20: ^( TOK_ENABLE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ENABLE, "TOK_ENABLE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2033:7: KW_DISABLE
					{
					KW_DISABLE767=(Token)match(input,KW_DISABLE,FOLLOW_KW_DISABLE_in_enableSpecification12156); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DISABLE.add(KW_DISABLE767);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2033:18: -> ^( TOK_DISABLE )
					{
						// grammar/HiveParser.g:2033:21: ^( TOK_DISABLE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DISABLE, "TOK_DISABLE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "enableSpecification"


	public static class validateSpecification_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "validateSpecification"
	// grammar/HiveParser.g:2036:1: validateSpecification : ( KW_VALIDATE -> ^( TOK_VALIDATE ) | KW_NOVALIDATE -> ^( TOK_NOVALIDATE ) );
	public final HiveParser.validateSpecification_return validateSpecification() throws RecognitionException {
		HiveParser.validateSpecification_return retval = new HiveParser.validateSpecification_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_VALIDATE768=null;
		Token KW_NOVALIDATE769=null;

		CommonTree KW_VALIDATE768_tree=null;
		CommonTree KW_NOVALIDATE769_tree=null;
		RewriteRuleTokenStream stream_KW_VALIDATE=new RewriteRuleTokenStream(adaptor,"token KW_VALIDATE");
		RewriteRuleTokenStream stream_KW_NOVALIDATE=new RewriteRuleTokenStream(adaptor,"token KW_NOVALIDATE");

		 pushMsg("validate specification", state); 
		try {
			// grammar/HiveParser.g:2039:5: ( KW_VALIDATE -> ^( TOK_VALIDATE ) | KW_NOVALIDATE -> ^( TOK_NOVALIDATE ) )
			int alt222=2;
			int LA222_0 = input.LA(1);
			if ( (LA222_0==KW_VALIDATE) ) {
				alt222=1;
			}
			else if ( (LA222_0==KW_NOVALIDATE) ) {
				alt222=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 222, 0, input);
				throw nvae;
			}

			switch (alt222) {
				case 1 :
					// grammar/HiveParser.g:2039:7: KW_VALIDATE
					{
					KW_VALIDATE768=(Token)match(input,KW_VALIDATE,FOLLOW_KW_VALIDATE_in_validateSpecification12189); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_VALIDATE.add(KW_VALIDATE768);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2039:19: -> ^( TOK_VALIDATE )
					{
						// grammar/HiveParser.g:2039:22: ^( TOK_VALIDATE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_VALIDATE, "TOK_VALIDATE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2040:7: KW_NOVALIDATE
					{
					KW_NOVALIDATE769=(Token)match(input,KW_NOVALIDATE,FOLLOW_KW_NOVALIDATE_in_validateSpecification12203); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOVALIDATE.add(KW_NOVALIDATE769);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2040:21: -> ^( TOK_NOVALIDATE )
					{
						// grammar/HiveParser.g:2040:24: ^( TOK_NOVALIDATE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_NOVALIDATE, "TOK_NOVALIDATE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "validateSpecification"


	public static class relySpecification_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "relySpecification"
	// grammar/HiveParser.g:2043:1: relySpecification : ( KW_RELY -> ^( TOK_RELY ) | ( KW_NORELY )? -> ^( TOK_NORELY ) );
	public final HiveParser.relySpecification_return relySpecification() throws RecognitionException {
		HiveParser.relySpecification_return retval = new HiveParser.relySpecification_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RELY770=null;
		Token KW_NORELY771=null;

		CommonTree KW_RELY770_tree=null;
		CommonTree KW_NORELY771_tree=null;
		RewriteRuleTokenStream stream_KW_NORELY=new RewriteRuleTokenStream(adaptor,"token KW_NORELY");
		RewriteRuleTokenStream stream_KW_RELY=new RewriteRuleTokenStream(adaptor,"token KW_RELY");

		 pushMsg("rely specification", state); 
		try {
			// grammar/HiveParser.g:2046:5: ( KW_RELY -> ^( TOK_RELY ) | ( KW_NORELY )? -> ^( TOK_NORELY ) )
			int alt224=2;
			int LA224_0 = input.LA(1);
			if ( (LA224_0==KW_RELY) ) {
				alt224=1;
			}
			else if ( (LA224_0==EOF||LA224_0==COMMA||LA224_0==KW_NORELY||LA224_0==RPAREN) ) {
				alt224=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 224, 0, input);
				throw nvae;
			}

			switch (alt224) {
				case 1 :
					// grammar/HiveParser.g:2046:8: KW_RELY
					{
					KW_RELY770=(Token)match(input,KW_RELY,FOLLOW_KW_RELY_in_relySpecification12237); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_RELY.add(KW_RELY770);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2046:16: -> ^( TOK_RELY )
					{
						// grammar/HiveParser.g:2046:19: ^( TOK_RELY )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RELY, "TOK_RELY"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2047:8: ( KW_NORELY )?
					{
					// grammar/HiveParser.g:2047:8: ( KW_NORELY )?
					int alt223=2;
					int LA223_0 = input.LA(1);
					if ( (LA223_0==KW_NORELY) ) {
						alt223=1;
					}
					switch (alt223) {
						case 1 :
							// grammar/HiveParser.g:2047:9: KW_NORELY
							{
							KW_NORELY771=(Token)match(input,KW_NORELY,FOLLOW_KW_NORELY_in_relySpecification12253); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_NORELY.add(KW_NORELY771);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2047:21: -> ^( TOK_NORELY )
					{
						// grammar/HiveParser.g:2047:24: ^( TOK_NORELY )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_NORELY, "TOK_NORELY"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "relySpecification"


	public static class primaryKeyWithoutName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "primaryKeyWithoutName"
	// grammar/HiveParser.g:2050:1: primaryKeyWithoutName : KW_PRIMARY KW_KEY columnParenthesesList enableSpec= enableSpecification validateSpec= validateSpecification relySpec= relySpecification -> ^( TOK_PRIMARY_KEY columnParenthesesList $relySpec $enableSpec $validateSpec) ;
	public final HiveParser.primaryKeyWithoutName_return primaryKeyWithoutName() throws RecognitionException {
		HiveParser.primaryKeyWithoutName_return retval = new HiveParser.primaryKeyWithoutName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_PRIMARY772=null;
		Token KW_KEY773=null;
		ParserRuleReturnScope enableSpec =null;
		ParserRuleReturnScope validateSpec =null;
		ParserRuleReturnScope relySpec =null;
		ParserRuleReturnScope columnParenthesesList774 =null;

		CommonTree KW_PRIMARY772_tree=null;
		CommonTree KW_KEY773_tree=null;
		RewriteRuleTokenStream stream_KW_PRIMARY=new RewriteRuleTokenStream(adaptor,"token KW_PRIMARY");
		RewriteRuleTokenStream stream_KW_KEY=new RewriteRuleTokenStream(adaptor,"token KW_KEY");
		RewriteRuleSubtreeStream stream_enableSpecification=new RewriteRuleSubtreeStream(adaptor,"rule enableSpecification");
		RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
		RewriteRuleSubtreeStream stream_relySpecification=new RewriteRuleSubtreeStream(adaptor,"rule relySpecification");
		RewriteRuleSubtreeStream stream_validateSpecification=new RewriteRuleSubtreeStream(adaptor,"rule validateSpecification");

		 pushMsg("primary key without key name", state); 
		try {
			// grammar/HiveParser.g:2053:5: ( KW_PRIMARY KW_KEY columnParenthesesList enableSpec= enableSpecification validateSpec= validateSpecification relySpec= relySpecification -> ^( TOK_PRIMARY_KEY columnParenthesesList $relySpec $enableSpec $validateSpec) )
			// grammar/HiveParser.g:2053:7: KW_PRIMARY KW_KEY columnParenthesesList enableSpec= enableSpecification validateSpec= validateSpecification relySpec= relySpecification
			{
			KW_PRIMARY772=(Token)match(input,KW_PRIMARY,FOLLOW_KW_PRIMARY_in_primaryKeyWithoutName12288); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PRIMARY.add(KW_PRIMARY772);

			KW_KEY773=(Token)match(input,KW_KEY,FOLLOW_KW_KEY_in_primaryKeyWithoutName12290); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_KEY.add(KW_KEY773);

			pushFollow(FOLLOW_columnParenthesesList_in_primaryKeyWithoutName12292);
			columnParenthesesList774=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(columnParenthesesList774.getTree());
			pushFollow(FOLLOW_enableSpecification_in_primaryKeyWithoutName12296);
			enableSpec=enableSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_enableSpecification.add(enableSpec.getTree());
			pushFollow(FOLLOW_validateSpecification_in_primaryKeyWithoutName12300);
			validateSpec=validateSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_validateSpecification.add(validateSpec.getTree());
			pushFollow(FOLLOW_relySpecification_in_primaryKeyWithoutName12304);
			relySpec=relySpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_relySpecification.add(relySpec.getTree());
			// AST REWRITE
			// elements: enableSpec, validateSpec, relySpec, columnParenthesesList
			// token labels: 
			// rule labels: validateSpec, enableSpec, relySpec, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_validateSpec=new RewriteRuleSubtreeStream(adaptor,"rule validateSpec",validateSpec!=null?validateSpec.getTree():null);
			RewriteRuleSubtreeStream stream_enableSpec=new RewriteRuleSubtreeStream(adaptor,"rule enableSpec",enableSpec!=null?enableSpec.getTree():null);
			RewriteRuleSubtreeStream stream_relySpec=new RewriteRuleSubtreeStream(adaptor,"rule relySpec",relySpec!=null?relySpec.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2054:5: -> ^( TOK_PRIMARY_KEY columnParenthesesList $relySpec $enableSpec $validateSpec)
			{
				// grammar/HiveParser.g:2054:8: ^( TOK_PRIMARY_KEY columnParenthesesList $relySpec $enableSpec $validateSpec)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIMARY_KEY, "TOK_PRIMARY_KEY"), root_1);
				adaptor.addChild(root_1, stream_columnParenthesesList.nextTree());
				adaptor.addChild(root_1, stream_relySpec.nextTree());
				adaptor.addChild(root_1, stream_enableSpec.nextTree());
				adaptor.addChild(root_1, stream_validateSpec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "primaryKeyWithoutName"


	public static class primaryKeyWithName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "primaryKeyWithName"
	// grammar/HiveParser.g:2057:1: primaryKeyWithName : KW_CONSTRAINT idfr= identifier KW_PRIMARY KW_KEY pkCols= columnParenthesesList enableSpec= enableSpecification validateSpec= validateSpecification relySpec= relySpecification -> ^( TOK_PRIMARY_KEY $pkCols $idfr $relySpec $enableSpec $validateSpec) ;
	public final HiveParser.primaryKeyWithName_return primaryKeyWithName() throws RecognitionException {
		HiveParser.primaryKeyWithName_return retval = new HiveParser.primaryKeyWithName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CONSTRAINT775=null;
		Token KW_PRIMARY776=null;
		Token KW_KEY777=null;
		ParserRuleReturnScope idfr =null;
		ParserRuleReturnScope pkCols =null;
		ParserRuleReturnScope enableSpec =null;
		ParserRuleReturnScope validateSpec =null;
		ParserRuleReturnScope relySpec =null;

		CommonTree KW_CONSTRAINT775_tree=null;
		CommonTree KW_PRIMARY776_tree=null;
		CommonTree KW_KEY777_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleTokenStream stream_KW_PRIMARY=new RewriteRuleTokenStream(adaptor,"token KW_PRIMARY");
		RewriteRuleTokenStream stream_KW_KEY=new RewriteRuleTokenStream(adaptor,"token KW_KEY");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_enableSpecification=new RewriteRuleSubtreeStream(adaptor,"rule enableSpecification");
		RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
		RewriteRuleSubtreeStream stream_relySpecification=new RewriteRuleSubtreeStream(adaptor,"rule relySpecification");
		RewriteRuleSubtreeStream stream_validateSpecification=new RewriteRuleSubtreeStream(adaptor,"rule validateSpecification");

		 pushMsg("primary key with key name", state); 
		try {
			// grammar/HiveParser.g:2060:5: ( KW_CONSTRAINT idfr= identifier KW_PRIMARY KW_KEY pkCols= columnParenthesesList enableSpec= enableSpecification validateSpec= validateSpecification relySpec= relySpecification -> ^( TOK_PRIMARY_KEY $pkCols $idfr $relySpec $enableSpec $validateSpec) )
			// grammar/HiveParser.g:2060:7: KW_CONSTRAINT idfr= identifier KW_PRIMARY KW_KEY pkCols= columnParenthesesList enableSpec= enableSpecification validateSpec= validateSpecification relySpec= relySpecification
			{
			KW_CONSTRAINT775=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_primaryKeyWithName12352); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT775);

			pushFollow(FOLLOW_identifier_in_primaryKeyWithName12356);
			idfr=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(idfr.getTree());
			KW_PRIMARY776=(Token)match(input,KW_PRIMARY,FOLLOW_KW_PRIMARY_in_primaryKeyWithName12358); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PRIMARY.add(KW_PRIMARY776);

			KW_KEY777=(Token)match(input,KW_KEY,FOLLOW_KW_KEY_in_primaryKeyWithName12360); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_KEY.add(KW_KEY777);

			pushFollow(FOLLOW_columnParenthesesList_in_primaryKeyWithName12364);
			pkCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(pkCols.getTree());
			pushFollow(FOLLOW_enableSpecification_in_primaryKeyWithName12368);
			enableSpec=enableSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_enableSpecification.add(enableSpec.getTree());
			pushFollow(FOLLOW_validateSpecification_in_primaryKeyWithName12372);
			validateSpec=validateSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_validateSpecification.add(validateSpec.getTree());
			pushFollow(FOLLOW_relySpecification_in_primaryKeyWithName12376);
			relySpec=relySpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_relySpecification.add(relySpec.getTree());
			// AST REWRITE
			// elements: idfr, enableSpec, pkCols, relySpec, validateSpec
			// token labels: 
			// rule labels: validateSpec, idfr, enableSpec, pkCols, relySpec, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_validateSpec=new RewriteRuleSubtreeStream(adaptor,"rule validateSpec",validateSpec!=null?validateSpec.getTree():null);
			RewriteRuleSubtreeStream stream_idfr=new RewriteRuleSubtreeStream(adaptor,"rule idfr",idfr!=null?idfr.getTree():null);
			RewriteRuleSubtreeStream stream_enableSpec=new RewriteRuleSubtreeStream(adaptor,"rule enableSpec",enableSpec!=null?enableSpec.getTree():null);
			RewriteRuleSubtreeStream stream_pkCols=new RewriteRuleSubtreeStream(adaptor,"rule pkCols",pkCols!=null?pkCols.getTree():null);
			RewriteRuleSubtreeStream stream_relySpec=new RewriteRuleSubtreeStream(adaptor,"rule relySpec",relySpec!=null?relySpec.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2061:5: -> ^( TOK_PRIMARY_KEY $pkCols $idfr $relySpec $enableSpec $validateSpec)
			{
				// grammar/HiveParser.g:2061:8: ^( TOK_PRIMARY_KEY $pkCols $idfr $relySpec $enableSpec $validateSpec)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIMARY_KEY, "TOK_PRIMARY_KEY"), root_1);
				adaptor.addChild(root_1, stream_pkCols.nextTree());
				adaptor.addChild(root_1, stream_idfr.nextTree());
				adaptor.addChild(root_1, stream_relySpec.nextTree());
				adaptor.addChild(root_1, stream_enableSpec.nextTree());
				adaptor.addChild(root_1, stream_validateSpec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "primaryKeyWithName"


	public static class foreignKeyWithName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "foreignKeyWithName"
	// grammar/HiveParser.g:2064:1: foreignKeyWithName : KW_CONSTRAINT idfr= identifier KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList enableSpec= enableSpecification validateSpec= validateSpecification relySpec= relySpecification -> ^( TOK_FOREIGN_KEY $idfr $fkCols $tabName $parCols $relySpec $enableSpec $validateSpec) ;
	public final HiveParser.foreignKeyWithName_return foreignKeyWithName() throws RecognitionException {
		HiveParser.foreignKeyWithName_return retval = new HiveParser.foreignKeyWithName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CONSTRAINT778=null;
		Token KW_FOREIGN779=null;
		Token KW_KEY780=null;
		Token KW_REFERENCES781=null;
		ParserRuleReturnScope idfr =null;
		ParserRuleReturnScope fkCols =null;
		ParserRuleReturnScope tabName =null;
		ParserRuleReturnScope parCols =null;
		ParserRuleReturnScope enableSpec =null;
		ParserRuleReturnScope validateSpec =null;
		ParserRuleReturnScope relySpec =null;

		CommonTree KW_CONSTRAINT778_tree=null;
		CommonTree KW_FOREIGN779_tree=null;
		CommonTree KW_KEY780_tree=null;
		CommonTree KW_REFERENCES781_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleTokenStream stream_KW_REFERENCES=new RewriteRuleTokenStream(adaptor,"token KW_REFERENCES");
		RewriteRuleTokenStream stream_KW_FOREIGN=new RewriteRuleTokenStream(adaptor,"token KW_FOREIGN");
		RewriteRuleTokenStream stream_KW_KEY=new RewriteRuleTokenStream(adaptor,"token KW_KEY");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_enableSpecification=new RewriteRuleSubtreeStream(adaptor,"rule enableSpecification");
		RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
		RewriteRuleSubtreeStream stream_relySpecification=new RewriteRuleSubtreeStream(adaptor,"rule relySpecification");
		RewriteRuleSubtreeStream stream_validateSpecification=new RewriteRuleSubtreeStream(adaptor,"rule validateSpecification");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("foreign key with key name", state); 
		try {
			// grammar/HiveParser.g:2067:5: ( KW_CONSTRAINT idfr= identifier KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList enableSpec= enableSpecification validateSpec= validateSpecification relySpec= relySpecification -> ^( TOK_FOREIGN_KEY $idfr $fkCols $tabName $parCols $relySpec $enableSpec $validateSpec) )
			// grammar/HiveParser.g:2067:7: KW_CONSTRAINT idfr= identifier KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList enableSpec= enableSpecification validateSpec= validateSpecification relySpec= relySpecification
			{
			KW_CONSTRAINT778=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_foreignKeyWithName12428); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT778);

			pushFollow(FOLLOW_identifier_in_foreignKeyWithName12432);
			idfr=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(idfr.getTree());
			KW_FOREIGN779=(Token)match(input,KW_FOREIGN,FOLLOW_KW_FOREIGN_in_foreignKeyWithName12434); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOREIGN.add(KW_FOREIGN779);

			KW_KEY780=(Token)match(input,KW_KEY,FOLLOW_KW_KEY_in_foreignKeyWithName12436); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_KEY.add(KW_KEY780);

			pushFollow(FOLLOW_columnParenthesesList_in_foreignKeyWithName12440);
			fkCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(fkCols.getTree());
			KW_REFERENCES781=(Token)match(input,KW_REFERENCES,FOLLOW_KW_REFERENCES_in_foreignKeyWithName12443); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REFERENCES.add(KW_REFERENCES781);

			pushFollow(FOLLOW_tableName_in_foreignKeyWithName12447);
			tabName=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
			pushFollow(FOLLOW_columnParenthesesList_in_foreignKeyWithName12451);
			parCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(parCols.getTree());
			pushFollow(FOLLOW_enableSpecification_in_foreignKeyWithName12455);
			enableSpec=enableSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_enableSpecification.add(enableSpec.getTree());
			pushFollow(FOLLOW_validateSpecification_in_foreignKeyWithName12459);
			validateSpec=validateSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_validateSpecification.add(validateSpec.getTree());
			pushFollow(FOLLOW_relySpecification_in_foreignKeyWithName12463);
			relySpec=relySpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_relySpecification.add(relySpec.getTree());
			// AST REWRITE
			// elements: relySpec, enableSpec, fkCols, idfr, tabName, validateSpec, parCols
			// token labels: 
			// rule labels: tabName, parCols, validateSpec, enableSpec, idfr, fkCols, relySpec, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
			RewriteRuleSubtreeStream stream_parCols=new RewriteRuleSubtreeStream(adaptor,"rule parCols",parCols!=null?parCols.getTree():null);
			RewriteRuleSubtreeStream stream_validateSpec=new RewriteRuleSubtreeStream(adaptor,"rule validateSpec",validateSpec!=null?validateSpec.getTree():null);
			RewriteRuleSubtreeStream stream_enableSpec=new RewriteRuleSubtreeStream(adaptor,"rule enableSpec",enableSpec!=null?enableSpec.getTree():null);
			RewriteRuleSubtreeStream stream_idfr=new RewriteRuleSubtreeStream(adaptor,"rule idfr",idfr!=null?idfr.getTree():null);
			RewriteRuleSubtreeStream stream_fkCols=new RewriteRuleSubtreeStream(adaptor,"rule fkCols",fkCols!=null?fkCols.getTree():null);
			RewriteRuleSubtreeStream stream_relySpec=new RewriteRuleSubtreeStream(adaptor,"rule relySpec",relySpec!=null?relySpec.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2068:5: -> ^( TOK_FOREIGN_KEY $idfr $fkCols $tabName $parCols $relySpec $enableSpec $validateSpec)
			{
				// grammar/HiveParser.g:2068:8: ^( TOK_FOREIGN_KEY $idfr $fkCols $tabName $parCols $relySpec $enableSpec $validateSpec)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY"), root_1);
				adaptor.addChild(root_1, stream_idfr.nextTree());
				adaptor.addChild(root_1, stream_fkCols.nextTree());
				adaptor.addChild(root_1, stream_tabName.nextTree());
				adaptor.addChild(root_1, stream_parCols.nextTree());
				adaptor.addChild(root_1, stream_relySpec.nextTree());
				adaptor.addChild(root_1, stream_enableSpec.nextTree());
				adaptor.addChild(root_1, stream_validateSpec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "foreignKeyWithName"


	public static class foreignKeyWithoutName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "foreignKeyWithoutName"
	// grammar/HiveParser.g:2071:1: foreignKeyWithoutName : KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList enableSpec= enableSpecification validateSpec= validateSpecification relySpec= relySpecification -> ^( TOK_FOREIGN_KEY $fkCols $tabName $parCols $relySpec $enableSpec $validateSpec) ;
	public final HiveParser.foreignKeyWithoutName_return foreignKeyWithoutName() throws RecognitionException {
		HiveParser.foreignKeyWithoutName_return retval = new HiveParser.foreignKeyWithoutName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_FOREIGN782=null;
		Token KW_KEY783=null;
		Token KW_REFERENCES784=null;
		ParserRuleReturnScope fkCols =null;
		ParserRuleReturnScope tabName =null;
		ParserRuleReturnScope parCols =null;
		ParserRuleReturnScope enableSpec =null;
		ParserRuleReturnScope validateSpec =null;
		ParserRuleReturnScope relySpec =null;

		CommonTree KW_FOREIGN782_tree=null;
		CommonTree KW_KEY783_tree=null;
		CommonTree KW_REFERENCES784_tree=null;
		RewriteRuleTokenStream stream_KW_REFERENCES=new RewriteRuleTokenStream(adaptor,"token KW_REFERENCES");
		RewriteRuleTokenStream stream_KW_FOREIGN=new RewriteRuleTokenStream(adaptor,"token KW_FOREIGN");
		RewriteRuleTokenStream stream_KW_KEY=new RewriteRuleTokenStream(adaptor,"token KW_KEY");
		RewriteRuleSubtreeStream stream_enableSpecification=new RewriteRuleSubtreeStream(adaptor,"rule enableSpecification");
		RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
		RewriteRuleSubtreeStream stream_relySpecification=new RewriteRuleSubtreeStream(adaptor,"rule relySpecification");
		RewriteRuleSubtreeStream stream_validateSpecification=new RewriteRuleSubtreeStream(adaptor,"rule validateSpecification");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("foreign key without key name", state); 
		try {
			// grammar/HiveParser.g:2074:5: ( KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList enableSpec= enableSpecification validateSpec= validateSpecification relySpec= relySpecification -> ^( TOK_FOREIGN_KEY $fkCols $tabName $parCols $relySpec $enableSpec $validateSpec) )
			// grammar/HiveParser.g:2074:7: KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList enableSpec= enableSpecification validateSpec= validateSpecification relySpec= relySpecification
			{
			KW_FOREIGN782=(Token)match(input,KW_FOREIGN,FOLLOW_KW_FOREIGN_in_foreignKeyWithoutName12521); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOREIGN.add(KW_FOREIGN782);

			KW_KEY783=(Token)match(input,KW_KEY,FOLLOW_KW_KEY_in_foreignKeyWithoutName12523); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_KEY.add(KW_KEY783);

			pushFollow(FOLLOW_columnParenthesesList_in_foreignKeyWithoutName12527);
			fkCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(fkCols.getTree());
			KW_REFERENCES784=(Token)match(input,KW_REFERENCES,FOLLOW_KW_REFERENCES_in_foreignKeyWithoutName12530); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REFERENCES.add(KW_REFERENCES784);

			pushFollow(FOLLOW_tableName_in_foreignKeyWithoutName12534);
			tabName=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
			pushFollow(FOLLOW_columnParenthesesList_in_foreignKeyWithoutName12538);
			parCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(parCols.getTree());
			pushFollow(FOLLOW_enableSpecification_in_foreignKeyWithoutName12542);
			enableSpec=enableSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_enableSpecification.add(enableSpec.getTree());
			pushFollow(FOLLOW_validateSpecification_in_foreignKeyWithoutName12546);
			validateSpec=validateSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_validateSpecification.add(validateSpec.getTree());
			pushFollow(FOLLOW_relySpecification_in_foreignKeyWithoutName12550);
			relySpec=relySpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_relySpecification.add(relySpec.getTree());
			// AST REWRITE
			// elements: tabName, parCols, fkCols, validateSpec, enableSpec, relySpec
			// token labels: 
			// rule labels: tabName, parCols, validateSpec, enableSpec, fkCols, relySpec, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
			RewriteRuleSubtreeStream stream_parCols=new RewriteRuleSubtreeStream(adaptor,"rule parCols",parCols!=null?parCols.getTree():null);
			RewriteRuleSubtreeStream stream_validateSpec=new RewriteRuleSubtreeStream(adaptor,"rule validateSpec",validateSpec!=null?validateSpec.getTree():null);
			RewriteRuleSubtreeStream stream_enableSpec=new RewriteRuleSubtreeStream(adaptor,"rule enableSpec",enableSpec!=null?enableSpec.getTree():null);
			RewriteRuleSubtreeStream stream_fkCols=new RewriteRuleSubtreeStream(adaptor,"rule fkCols",fkCols!=null?fkCols.getTree():null);
			RewriteRuleSubtreeStream stream_relySpec=new RewriteRuleSubtreeStream(adaptor,"rule relySpec",relySpec!=null?relySpec.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2075:5: -> ^( TOK_FOREIGN_KEY $fkCols $tabName $parCols $relySpec $enableSpec $validateSpec)
			{
				// grammar/HiveParser.g:2075:8: ^( TOK_FOREIGN_KEY $fkCols $tabName $parCols $relySpec $enableSpec $validateSpec)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY"), root_1);
				adaptor.addChild(root_1, stream_fkCols.nextTree());
				adaptor.addChild(root_1, stream_tabName.nextTree());
				adaptor.addChild(root_1, stream_parCols.nextTree());
				adaptor.addChild(root_1, stream_relySpec.nextTree());
				adaptor.addChild(root_1, stream_enableSpec.nextTree());
				adaptor.addChild(root_1, stream_validateSpec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "foreignKeyWithoutName"


	public static class skewedValueElement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedValueElement"
	// grammar/HiveParser.g:2078:1: skewedValueElement : ( skewedColumnValues | skewedColumnValuePairList );
	public final HiveParser.skewedValueElement_return skewedValueElement() throws RecognitionException {
		HiveParser.skewedValueElement_return retval = new HiveParser.skewedValueElement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope skewedColumnValues785 =null;
		ParserRuleReturnScope skewedColumnValuePairList786 =null;


		 pushMsg("skewed value element", state); 
		try {
			// grammar/HiveParser.g:2081:5: ( skewedColumnValues | skewedColumnValuePairList )
			int alt225=2;
			int LA225_0 = input.LA(1);
			if ( (LA225_0==BigintLiteral||LA225_0==CharSetName||LA225_0==DecimalLiteral||(LA225_0 >= KW_CURRENT_DATE && LA225_0 <= KW_CURRENT_TIMESTAMP)||LA225_0==KW_DATE||LA225_0==KW_FALSE||LA225_0==KW_INTERVAL||LA225_0==KW_TIMESTAMP||LA225_0==KW_TRUE||LA225_0==Number||(LA225_0 >= SmallintLiteral && LA225_0 <= StringLiteral)||LA225_0==TinyintLiteral) ) {
				alt225=1;
			}
			else if ( (LA225_0==LPAREN) ) {
				alt225=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 225, 0, input);
				throw nvae;
			}

			switch (alt225) {
				case 1 :
					// grammar/HiveParser.g:2082:7: skewedColumnValues
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValues_in_skewedValueElement12613);
					skewedColumnValues785=skewedColumnValues();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValues785.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2083:8: skewedColumnValuePairList
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValuePairList_in_skewedValueElement12622);
					skewedColumnValuePairList786=skewedColumnValuePairList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValuePairList786.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedValueElement"


	public static class skewedColumnValuePairList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValuePairList"
	// grammar/HiveParser.g:2086:1: skewedColumnValuePairList : skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) ;
	public final HiveParser.skewedColumnValuePairList_return skewedColumnValuePairList() throws RecognitionException {
		HiveParser.skewedColumnValuePairList_return retval = new HiveParser.skewedColumnValuePairList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA788=null;
		ParserRuleReturnScope skewedColumnValuePair787 =null;
		ParserRuleReturnScope skewedColumnValuePair789 =null;

		CommonTree COMMA788_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_skewedColumnValuePair=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValuePair");

		 pushMsg("column value pair list", state); 
		try {
			// grammar/HiveParser.g:2089:5: ( skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) )
			// grammar/HiveParser.g:2089:7: skewedColumnValuePair ( COMMA skewedColumnValuePair )*
			{
			pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList12649);
			skewedColumnValuePair787=skewedColumnValuePair();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedColumnValuePair.add(skewedColumnValuePair787.getTree());
			// grammar/HiveParser.g:2089:29: ( COMMA skewedColumnValuePair )*
			loop226:
			while (true) {
				int alt226=2;
				int LA226_0 = input.LA(1);
				if ( (LA226_0==COMMA) ) {
					alt226=1;
				}

				switch (alt226) {
				case 1 :
					// grammar/HiveParser.g:2089:30: COMMA skewedColumnValuePair
					{
					COMMA788=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValuePairList12652); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA788);

					pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList12654);
					skewedColumnValuePair789=skewedColumnValuePair();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_skewedColumnValuePair.add(skewedColumnValuePair789.getTree());
					}
					break;

				default :
					break loop226;
				}
			}

			// AST REWRITE
			// elements: skewedColumnValuePair
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2089:60: -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
			{
				// grammar/HiveParser.g:2089:63: ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLVALUE_PAIR, "TOK_TABCOLVALUE_PAIR"), root_1);
				if ( !(stream_skewedColumnValuePair.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_skewedColumnValuePair.hasNext() ) {
					adaptor.addChild(root_1, stream_skewedColumnValuePair.nextTree());
				}
				stream_skewedColumnValuePair.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValuePairList"


	public static class skewedColumnValuePair_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValuePair"
	// grammar/HiveParser.g:2092:1: skewedColumnValuePair : LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) ;
	public final HiveParser.skewedColumnValuePair_return skewedColumnValuePair() throws RecognitionException {
		HiveParser.skewedColumnValuePair_return retval = new HiveParser.skewedColumnValuePair_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN790=null;
		Token RPAREN791=null;
		ParserRuleReturnScope colValues =null;

		CommonTree LPAREN790_tree=null;
		CommonTree RPAREN791_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_skewedColumnValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValues");

		 pushMsg("column value pair", state); 
		try {
			// grammar/HiveParser.g:2095:5: ( LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) )
			// grammar/HiveParser.g:2096:7: LPAREN colValues= skewedColumnValues RPAREN
			{
			LPAREN790=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_skewedColumnValuePair12699); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN790);

			pushFollow(FOLLOW_skewedColumnValues_in_skewedColumnValuePair12703);
			colValues=skewedColumnValues();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedColumnValues.add(colValues.getTree());
			RPAREN791=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_skewedColumnValuePair12705); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN791);

			// AST REWRITE
			// elements: colValues
			// token labels: 
			// rule labels: colValues, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_colValues=new RewriteRuleSubtreeStream(adaptor,"rule colValues",colValues!=null?colValues.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2097:7: -> ^( TOK_TABCOLVALUES $colValues)
			{
				// grammar/HiveParser.g:2097:10: ^( TOK_TABCOLVALUES $colValues)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLVALUES, "TOK_TABCOLVALUES"), root_1);
				adaptor.addChild(root_1, stream_colValues.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValuePair"


	public static class skewedColumnValues_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValues"
	// grammar/HiveParser.g:2100:1: skewedColumnValues : skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) ;
	public final HiveParser.skewedColumnValues_return skewedColumnValues() throws RecognitionException {
		HiveParser.skewedColumnValues_return retval = new HiveParser.skewedColumnValues_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA793=null;
		ParserRuleReturnScope skewedColumnValue792 =null;
		ParserRuleReturnScope skewedColumnValue794 =null;

		CommonTree COMMA793_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_skewedColumnValue=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValue");

		 pushMsg("column values", state); 
		try {
			// grammar/HiveParser.g:2103:5: ( skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) )
			// grammar/HiveParser.g:2103:7: skewedColumnValue ( COMMA skewedColumnValue )*
			{
			pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues12748);
			skewedColumnValue792=skewedColumnValue();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedColumnValue.add(skewedColumnValue792.getTree());
			// grammar/HiveParser.g:2103:25: ( COMMA skewedColumnValue )*
			loop227:
			while (true) {
				int alt227=2;
				int LA227_0 = input.LA(1);
				if ( (LA227_0==COMMA) ) {
					alt227=1;
				}

				switch (alt227) {
				case 1 :
					// grammar/HiveParser.g:2103:26: COMMA skewedColumnValue
					{
					COMMA793=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValues12751); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA793);

					pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues12753);
					skewedColumnValue794=skewedColumnValue();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_skewedColumnValue.add(skewedColumnValue794.getTree());
					}
					break;

				default :
					break loop227;
				}
			}

			// AST REWRITE
			// elements: skewedColumnValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2103:52: -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
			{
				// grammar/HiveParser.g:2103:55: ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLVALUE, "TOK_TABCOLVALUE"), root_1);
				if ( !(stream_skewedColumnValue.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_skewedColumnValue.hasNext() ) {
					adaptor.addChild(root_1, stream_skewedColumnValue.nextTree());
				}
				stream_skewedColumnValue.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValues"


	public static class skewedColumnValue_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValue"
	// grammar/HiveParser.g:2106:1: skewedColumnValue : constant ;
	public final HiveParser.skewedColumnValue_return skewedColumnValue() throws RecognitionException {
		HiveParser.skewedColumnValue_return retval = new HiveParser.skewedColumnValue_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope constant795 =null;


		 pushMsg("column value", state); 
		try {
			// grammar/HiveParser.g:2109:5: ( constant )
			// grammar/HiveParser.g:2110:7: constant
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_constant_in_skewedColumnValue12797);
			constant795=constant();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constant795.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValue"


	public static class skewedValueLocationElement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedValueLocationElement"
	// grammar/HiveParser.g:2113:1: skewedValueLocationElement : ( skewedColumnValue | skewedColumnValuePair );
	public final HiveParser.skewedValueLocationElement_return skewedValueLocationElement() throws RecognitionException {
		HiveParser.skewedValueLocationElement_return retval = new HiveParser.skewedValueLocationElement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope skewedColumnValue796 =null;
		ParserRuleReturnScope skewedColumnValuePair797 =null;


		 pushMsg("skewed value location element", state); 
		try {
			// grammar/HiveParser.g:2116:5: ( skewedColumnValue | skewedColumnValuePair )
			int alt228=2;
			int LA228_0 = input.LA(1);
			if ( (LA228_0==BigintLiteral||LA228_0==CharSetName||LA228_0==DecimalLiteral||(LA228_0 >= KW_CURRENT_DATE && LA228_0 <= KW_CURRENT_TIMESTAMP)||LA228_0==KW_DATE||LA228_0==KW_FALSE||LA228_0==KW_INTERVAL||LA228_0==KW_TIMESTAMP||LA228_0==KW_TRUE||LA228_0==Number||(LA228_0 >= SmallintLiteral && LA228_0 <= StringLiteral)||LA228_0==TinyintLiteral) ) {
				alt228=1;
			}
			else if ( (LA228_0==LPAREN) ) {
				alt228=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 228, 0, input);
				throw nvae;
			}

			switch (alt228) {
				case 1 :
					// grammar/HiveParser.g:2117:7: skewedColumnValue
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValue_in_skewedValueLocationElement12831);
					skewedColumnValue796=skewedColumnValue();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValue796.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2118:8: skewedColumnValuePair
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement12840);
					skewedColumnValuePair797=skewedColumnValuePair();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValuePair797.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedValueLocationElement"


	public static class orderSpecification_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "orderSpecification"
	// grammar/HiveParser.g:2121:1: orderSpecification : ( KW_ASC | KW_DESC );
	public final HiveParser.orderSpecification_return orderSpecification() throws RecognitionException {
		HiveParser.orderSpecification_return retval = new HiveParser.orderSpecification_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set798=null;

		CommonTree set798_tree=null;

		 pushMsg("order specification", state); 
		try {
			// grammar/HiveParser.g:2124:5: ( KW_ASC | KW_DESC )
			// grammar/HiveParser.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set798=input.LT(1);
			if ( input.LA(1)==KW_ASC||input.LA(1)==KW_DESC ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set798));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orderSpecification"


	public static class nullOrdering_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "nullOrdering"
	// grammar/HiveParser.g:2126:1: nullOrdering : ( KW_NULLS KW_FIRST -> ^( TOK_NULLS_FIRST ) | KW_NULLS KW_LAST -> ^( TOK_NULLS_LAST ) );
	public final HiveParser.nullOrdering_return nullOrdering() throws RecognitionException {
		HiveParser.nullOrdering_return retval = new HiveParser.nullOrdering_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_NULLS799=null;
		Token KW_FIRST800=null;
		Token KW_NULLS801=null;
		Token KW_LAST802=null;

		CommonTree KW_NULLS799_tree=null;
		CommonTree KW_FIRST800_tree=null;
		CommonTree KW_NULLS801_tree=null;
		CommonTree KW_LAST802_tree=null;
		RewriteRuleTokenStream stream_KW_FIRST=new RewriteRuleTokenStream(adaptor,"token KW_FIRST");
		RewriteRuleTokenStream stream_KW_NULLS=new RewriteRuleTokenStream(adaptor,"token KW_NULLS");
		RewriteRuleTokenStream stream_KW_LAST=new RewriteRuleTokenStream(adaptor,"token KW_LAST");

		 pushMsg("nulls ordering", state); 
		try {
			// grammar/HiveParser.g:2129:5: ( KW_NULLS KW_FIRST -> ^( TOK_NULLS_FIRST ) | KW_NULLS KW_LAST -> ^( TOK_NULLS_LAST ) )
			int alt229=2;
			int LA229_0 = input.LA(1);
			if ( (LA229_0==KW_NULLS) ) {
				int LA229_1 = input.LA(2);
				if ( (LA229_1==KW_FIRST) ) {
					alt229=1;
				}
				else if ( (LA229_1==KW_LAST) ) {
					alt229=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 229, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 229, 0, input);
				throw nvae;
			}

			switch (alt229) {
				case 1 :
					// grammar/HiveParser.g:2129:7: KW_NULLS KW_FIRST
					{
					KW_NULLS799=(Token)match(input,KW_NULLS,FOLLOW_KW_NULLS_in_nullOrdering12894); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NULLS.add(KW_NULLS799);

					KW_FIRST800=(Token)match(input,KW_FIRST,FOLLOW_KW_FIRST_in_nullOrdering12896); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FIRST.add(KW_FIRST800);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2129:25: -> ^( TOK_NULLS_FIRST )
					{
						// grammar/HiveParser.g:2129:28: ^( TOK_NULLS_FIRST )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2130:7: KW_NULLS KW_LAST
					{
					KW_NULLS801=(Token)match(input,KW_NULLS,FOLLOW_KW_NULLS_in_nullOrdering12910); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NULLS.add(KW_NULLS801);

					KW_LAST802=(Token)match(input,KW_LAST,FOLLOW_KW_LAST_in_nullOrdering12912); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LAST.add(KW_LAST802);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2130:24: -> ^( TOK_NULLS_LAST )
					{
						// grammar/HiveParser.g:2130:27: ^( TOK_NULLS_LAST )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "nullOrdering"


	public static class columnNameOrder_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameOrder"
	// grammar/HiveParser.g:2133:1: columnNameOrder : identifier (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) ) -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) ) ;
	public final HiveParser.columnNameOrder_return columnNameOrder() throws RecognitionException {
		HiveParser.columnNameOrder_return retval = new HiveParser.columnNameOrder_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope orderSpec =null;
		ParserRuleReturnScope nullSpec =null;
		ParserRuleReturnScope identifier803 =null;

		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_nullOrdering=new RewriteRuleSubtreeStream(adaptor,"rule nullOrdering");
		RewriteRuleSubtreeStream stream_orderSpecification=new RewriteRuleSubtreeStream(adaptor,"rule orderSpecification");

		 pushMsg("column name order", state); 
		try {
			// grammar/HiveParser.g:2136:5: ( identifier (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) ) -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) ) )
			// grammar/HiveParser.g:2136:7: identifier (orderSpec= orderSpecification )? (nullSpec= nullOrdering )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameOrder12945);
			identifier803=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier803.getTree());
			// grammar/HiveParser.g:2136:27: (orderSpec= orderSpecification )?
			int alt230=2;
			int LA230_0 = input.LA(1);
			if ( (LA230_0==KW_ASC||LA230_0==KW_DESC) ) {
				alt230=1;
			}
			switch (alt230) {
				case 1 :
					// grammar/HiveParser.g:2136:27: orderSpec= orderSpecification
					{
					pushFollow(FOLLOW_orderSpecification_in_columnNameOrder12949);
					orderSpec=orderSpecification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orderSpecification.add(orderSpec.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2136:56: (nullSpec= nullOrdering )?
			int alt231=2;
			int LA231_0 = input.LA(1);
			if ( (LA231_0==KW_NULLS) ) {
				alt231=1;
			}
			switch (alt231) {
				case 1 :
					// grammar/HiveParser.g:2136:56: nullSpec= nullOrdering
					{
					pushFollow(FOLLOW_nullOrdering_in_columnNameOrder12954);
					nullSpec=nullOrdering();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_nullOrdering.add(nullSpec.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: identifier, identifier, identifier, identifier, nullSpec, identifier, nullSpec, identifier, nullSpec
			// token labels: 
			// rule labels: nullSpec, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_nullSpec=new RewriteRuleSubtreeStream(adaptor,"rule nullSpec",nullSpec!=null?nullSpec.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2137:5: -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
			if ((orderSpec!=null?((CommonTree)orderSpec.getTree()):null) == null && (nullSpec!=null?((CommonTree)nullSpec.getTree()):null) == null) {
				// grammar/HiveParser.g:2138:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// grammar/HiveParser.g:2138:37: ^( TOK_NULLS_FIRST identifier )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2139:5: -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
			if ((orderSpec!=null?((CommonTree)orderSpec.getTree()):null) == null) {
				// grammar/HiveParser.g:2140:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// grammar/HiveParser.g:2140:37: ^( $nullSpec identifier )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2141:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
			if ((nullSpec!=null?((CommonTree)nullSpec.getTree()):null) == null && (orderSpec!=null?((CommonTree)orderSpec.getTree()):null).getType()==HiveParser.KW_ASC) {
				// grammar/HiveParser.g:2142:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// grammar/HiveParser.g:2142:37: ^( TOK_NULLS_FIRST identifier )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2143:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) )
			if ((nullSpec!=null?((CommonTree)nullSpec.getTree()):null) == null && (orderSpec!=null?((CommonTree)orderSpec.getTree()):null).getType()==HiveParser.KW_DESC) {
				// grammar/HiveParser.g:2144:13: ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				// grammar/HiveParser.g:2144:38: ^( TOK_NULLS_LAST identifier )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST"), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2145:5: -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
			if ((orderSpec!=null?((CommonTree)orderSpec.getTree()):null).getType()==HiveParser.KW_ASC) {
				// grammar/HiveParser.g:2146:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// grammar/HiveParser.g:2146:37: ^( $nullSpec identifier )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2147:5: -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) )
			{
				// grammar/HiveParser.g:2147:8: ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				// grammar/HiveParser.g:2147:33: ^( $nullSpec identifier )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameOrder"


	public static class columnNameCommentList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameCommentList"
	// grammar/HiveParser.g:2150:1: columnNameCommentList : columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) ;
	public final HiveParser.columnNameCommentList_return columnNameCommentList() throws RecognitionException {
		HiveParser.columnNameCommentList_return retval = new HiveParser.columnNameCommentList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA805=null;
		ParserRuleReturnScope columnNameComment804 =null;
		ParserRuleReturnScope columnNameComment806 =null;

		CommonTree COMMA805_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameComment=new RewriteRuleSubtreeStream(adaptor,"rule columnNameComment");

		 pushMsg("column name comment list", state); 
		try {
			// grammar/HiveParser.g:2153:5: ( columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) )
			// grammar/HiveParser.g:2153:7: columnNameComment ( COMMA columnNameComment )*
			{
			pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList13151);
			columnNameComment804=columnNameComment();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameComment.add(columnNameComment804.getTree());
			// grammar/HiveParser.g:2153:25: ( COMMA columnNameComment )*
			loop232:
			while (true) {
				int alt232=2;
				int LA232_0 = input.LA(1);
				if ( (LA232_0==COMMA) ) {
					alt232=1;
				}

				switch (alt232) {
				case 1 :
					// grammar/HiveParser.g:2153:26: COMMA columnNameComment
					{
					COMMA805=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameCommentList13154); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA805);

					pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList13156);
					columnNameComment806=columnNameComment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameComment.add(columnNameComment806.getTree());
					}
					break;

				default :
					break loop232;
				}
			}

			// AST REWRITE
			// elements: columnNameComment
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2153:52: -> ^( TOK_TABCOLNAME ( columnNameComment )+ )
			{
				// grammar/HiveParser.g:2153:55: ^( TOK_TABCOLNAME ( columnNameComment )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnNameComment.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameComment.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameComment.nextTree());
				}
				stream_columnNameComment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameCommentList"


	public static class columnNameComment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameComment"
	// grammar/HiveParser.g:2156:1: columnNameComment : colName= identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) ;
	public final HiveParser.columnNameComment_return columnNameComment() throws RecognitionException {
		HiveParser.columnNameComment_return retval = new HiveParser.columnNameComment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_COMMENT807=null;
		ParserRuleReturnScope colName =null;

		CommonTree comment_tree=null;
		CommonTree KW_COMMENT807_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("column name comment", state); 
		try {
			// grammar/HiveParser.g:2159:5: (colName= identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) )
			// grammar/HiveParser.g:2159:7: colName= identifier ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameComment13196);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			// grammar/HiveParser.g:2159:26: ( KW_COMMENT comment= StringLiteral )?
			int alt233=2;
			int LA233_0 = input.LA(1);
			if ( (LA233_0==KW_COMMENT) ) {
				alt233=1;
			}
			switch (alt233) {
				case 1 :
					// grammar/HiveParser.g:2159:27: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT807=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameComment13199); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT807);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameComment13203); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: colName, comment
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2160:5: -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
			{
				// grammar/HiveParser.g:2160:8: ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_NULL, "TOK_NULL"));
				// grammar/HiveParser.g:2160:40: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameComment"


	public static class columnRefOrder_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnRefOrder"
	// grammar/HiveParser.g:2163:1: columnRefOrder : expression (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST expression ) ) -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec expression ) ) ;
	public final HiveParser.columnRefOrder_return columnRefOrder() throws RecognitionException {
		HiveParser.columnRefOrder_return retval = new HiveParser.columnRefOrder_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope orderSpec =null;
		ParserRuleReturnScope nullSpec =null;
		ParserRuleReturnScope expression808 =null;

		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_nullOrdering=new RewriteRuleSubtreeStream(adaptor,"rule nullOrdering");
		RewriteRuleSubtreeStream stream_orderSpecification=new RewriteRuleSubtreeStream(adaptor,"rule orderSpecification");

		 pushMsg("column order", state); 
		try {
			// grammar/HiveParser.g:2166:5: ( expression (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST expression ) ) -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec expression ) ) )
			// grammar/HiveParser.g:2166:7: expression (orderSpec= orderSpecification )? (nullSpec= nullOrdering )?
			{
			pushFollow(FOLLOW_expression_in_columnRefOrder13251);
			expression808=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression808.getTree());
			// grammar/HiveParser.g:2166:27: (orderSpec= orderSpecification )?
			int alt234=2;
			int LA234_0 = input.LA(1);
			if ( (LA234_0==KW_ASC||LA234_0==KW_DESC) ) {
				alt234=1;
			}
			switch (alt234) {
				case 1 :
					// grammar/HiveParser.g:2166:27: orderSpec= orderSpecification
					{
					pushFollow(FOLLOW_orderSpecification_in_columnRefOrder13255);
					orderSpec=orderSpecification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orderSpecification.add(orderSpec.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2166:56: (nullSpec= nullOrdering )?
			int alt235=2;
			int LA235_0 = input.LA(1);
			if ( (LA235_0==KW_NULLS) ) {
				alt235=1;
			}
			switch (alt235) {
				case 1 :
					// grammar/HiveParser.g:2166:56: nullSpec= nullOrdering
					{
					pushFollow(FOLLOW_nullOrdering_in_columnRefOrder13260);
					nullSpec=nullOrdering();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_nullOrdering.add(nullSpec.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: expression, expression, expression, nullSpec, nullSpec, nullSpec, expression, expression, expression
			// token labels: 
			// rule labels: nullSpec, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_nullSpec=new RewriteRuleSubtreeStream(adaptor,"rule nullSpec",nullSpec!=null?nullSpec.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2167:5: -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
			if ((orderSpec!=null?((CommonTree)orderSpec.getTree()):null) == null && (nullSpec!=null?((CommonTree)nullSpec.getTree()):null) == null) {
				// grammar/HiveParser.g:2168:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// grammar/HiveParser.g:2168:37: ^( TOK_NULLS_FIRST expression )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2169:5: -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
			if ((orderSpec!=null?((CommonTree)orderSpec.getTree()):null) == null) {
				// grammar/HiveParser.g:2170:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// grammar/HiveParser.g:2170:37: ^( $nullSpec expression )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2171:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
			if ((nullSpec!=null?((CommonTree)nullSpec.getTree()):null) == null && (orderSpec!=null?((CommonTree)orderSpec.getTree()):null).getType()==HiveParser.KW_ASC) {
				// grammar/HiveParser.g:2172:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// grammar/HiveParser.g:2172:37: ^( TOK_NULLS_FIRST expression )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2173:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST expression ) )
			if ((nullSpec!=null?((CommonTree)nullSpec.getTree()):null) == null && (orderSpec!=null?((CommonTree)orderSpec.getTree()):null).getType()==HiveParser.KW_DESC) {
				// grammar/HiveParser.g:2174:13: ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST expression ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				// grammar/HiveParser.g:2174:38: ^( TOK_NULLS_LAST expression )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2175:5: -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
			if ((orderSpec!=null?((CommonTree)orderSpec.getTree()):null).getType()==HiveParser.KW_ASC) {
				// grammar/HiveParser.g:2176:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// grammar/HiveParser.g:2176:37: ^( $nullSpec expression )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2177:5: -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec expression ) )
			{
				// grammar/HiveParser.g:2177:8: ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec expression ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				// grammar/HiveParser.g:2177:33: ^( $nullSpec expression )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnRefOrder"


	public static class columnNameType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameType"
	// grammar/HiveParser.g:2180:1: columnNameType : colName= identifier colType ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
	public final HiveParser.columnNameType_return columnNameType() throws RecognitionException {
		HiveParser.columnNameType_return retval = new HiveParser.columnNameType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_COMMENT810=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope colType809 =null;

		CommonTree comment_tree=null;
		CommonTree KW_COMMENT810_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 pushMsg("column specification", state); 
		try {
			// grammar/HiveParser.g:2183:5: (colName= identifier colType ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
			// grammar/HiveParser.g:2183:7: colName= identifier colType ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameType13459);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			pushFollow(FOLLOW_colType_in_columnNameType13461);
			colType809=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType809.getTree());
			// grammar/HiveParser.g:2183:34: ( KW_COMMENT comment= StringLiteral )?
			int alt236=2;
			int LA236_0 = input.LA(1);
			if ( (LA236_0==KW_COMMENT) ) {
				alt236=1;
			}
			switch (alt236) {
				case 1 :
					// grammar/HiveParser.g:2183:35: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT810=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameType13464); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT810);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameType13468); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: colName, colType, comment, colType, colName
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2184:5: -> {containExcludedCharForCreateTableColumnName($colName.text)}?
			if (containExcludedCharForCreateTableColumnName((colName!=null?input.toString(colName.start,colName.stop):null))) {
				adaptor.addChild(root_0, throwColumnNameException());
			}

			else // 2185:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
			if (comment == null) {
				// grammar/HiveParser.g:2185:28: ^( TOK_TABCOL $colName colType )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2186:5: -> ^( TOK_TABCOL $colName colType $comment)
			{
				// grammar/HiveParser.g:2186:28: ^( TOK_TABCOL $colName colType $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameType"


	public static class columnNameTypeOrPKOrFK_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameTypeOrPKOrFK"
	// grammar/HiveParser.g:2189:1: columnNameTypeOrPKOrFK : ( ( foreignKeyWithName ) | ( primaryKeyWithName ) | ( primaryKeyWithoutName ) | ( foreignKeyWithoutName ) | ( columnNameType ) );
	public final HiveParser.columnNameTypeOrPKOrFK_return columnNameTypeOrPKOrFK() throws RecognitionException {
		HiveParser.columnNameTypeOrPKOrFK_return retval = new HiveParser.columnNameTypeOrPKOrFK_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope foreignKeyWithName811 =null;
		ParserRuleReturnScope primaryKeyWithName812 =null;
		ParserRuleReturnScope primaryKeyWithoutName813 =null;
		ParserRuleReturnScope foreignKeyWithoutName814 =null;
		ParserRuleReturnScope columnNameType815 =null;


		 pushMsg("column name or primary key or foreign key", state); 
		try {
			// grammar/HiveParser.g:2192:5: ( ( foreignKeyWithName ) | ( primaryKeyWithName ) | ( primaryKeyWithoutName ) | ( foreignKeyWithoutName ) | ( columnNameType ) )
			int alt237=5;
			alt237 = dfa237.predict(input);
			switch (alt237) {
				case 1 :
					// grammar/HiveParser.g:2192:7: ( foreignKeyWithName )
					{
					root_0 = (CommonTree)adaptor.nil();


					// grammar/HiveParser.g:2192:7: ( foreignKeyWithName )
					// grammar/HiveParser.g:2192:9: foreignKeyWithName
					{
					pushFollow(FOLLOW_foreignKeyWithName_in_columnNameTypeOrPKOrFK13564);
					foreignKeyWithName811=foreignKeyWithName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, foreignKeyWithName811.getTree());

					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2193:7: ( primaryKeyWithName )
					{
					root_0 = (CommonTree)adaptor.nil();


					// grammar/HiveParser.g:2193:7: ( primaryKeyWithName )
					// grammar/HiveParser.g:2193:9: primaryKeyWithName
					{
					pushFollow(FOLLOW_primaryKeyWithName_in_columnNameTypeOrPKOrFK13576);
					primaryKeyWithName812=primaryKeyWithName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryKeyWithName812.getTree());

					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:2194:7: ( primaryKeyWithoutName )
					{
					root_0 = (CommonTree)adaptor.nil();


					// grammar/HiveParser.g:2194:7: ( primaryKeyWithoutName )
					// grammar/HiveParser.g:2194:9: primaryKeyWithoutName
					{
					pushFollow(FOLLOW_primaryKeyWithoutName_in_columnNameTypeOrPKOrFK13588);
					primaryKeyWithoutName813=primaryKeyWithoutName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryKeyWithoutName813.getTree());

					}

					}
					break;
				case 4 :
					// grammar/HiveParser.g:2195:7: ( foreignKeyWithoutName )
					{
					root_0 = (CommonTree)adaptor.nil();


					// grammar/HiveParser.g:2195:7: ( foreignKeyWithoutName )
					// grammar/HiveParser.g:2195:9: foreignKeyWithoutName
					{
					pushFollow(FOLLOW_foreignKeyWithoutName_in_columnNameTypeOrPKOrFK13600);
					foreignKeyWithoutName814=foreignKeyWithoutName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, foreignKeyWithoutName814.getTree());

					}

					}
					break;
				case 5 :
					// grammar/HiveParser.g:2196:7: ( columnNameType )
					{
					root_0 = (CommonTree)adaptor.nil();


					// grammar/HiveParser.g:2196:7: ( columnNameType )
					// grammar/HiveParser.g:2196:9: columnNameType
					{
					pushFollow(FOLLOW_columnNameType_in_columnNameTypeOrPKOrFK13612);
					columnNameType815=columnNameType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, columnNameType815.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameTypeOrPKOrFK"


	public static class columnNameColonType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameColonType"
	// grammar/HiveParser.g:2199:1: columnNameColonType : colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
	public final HiveParser.columnNameColonType_return columnNameColonType() throws RecognitionException {
		HiveParser.columnNameColonType_return retval = new HiveParser.columnNameColonType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token COLON816=null;
		Token KW_COMMENT818=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope colType817 =null;

		CommonTree comment_tree=null;
		CommonTree COLON816_tree=null;
		CommonTree KW_COMMENT818_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 pushMsg("column specification", state); 
		try {
			// grammar/HiveParser.g:2202:5: (colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
			// grammar/HiveParser.g:2202:7: colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameColonType13643);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			COLON816=(Token)match(input,COLON,FOLLOW_COLON_in_columnNameColonType13645); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(COLON816);

			pushFollow(FOLLOW_colType_in_columnNameColonType13647);
			colType817=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType817.getTree());
			// grammar/HiveParser.g:2202:40: ( KW_COMMENT comment= StringLiteral )?
			int alt238=2;
			int LA238_0 = input.LA(1);
			if ( (LA238_0==KW_COMMENT) ) {
				alt238=1;
			}
			switch (alt238) {
				case 1 :
					// grammar/HiveParser.g:2202:41: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT818=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameColonType13650); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT818);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameColonType13654); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: colType, colName, comment, colName, colType
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2203:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
			if (comment == null) {
				// grammar/HiveParser.g:2203:28: ^( TOK_TABCOL $colName colType )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2204:5: -> ^( TOK_TABCOL $colName colType $comment)
			{
				// grammar/HiveParser.g:2204:28: ^( TOK_TABCOL $colName colType $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameColonType"


	public static class colType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "colType"
	// grammar/HiveParser.g:2207:1: colType : type ;
	public final HiveParser.colType_return colType() throws RecognitionException {
		HiveParser.colType_return retval = new HiveParser.colType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope type819 =null;


		 pushMsg("column type", state); 
		try {
			// grammar/HiveParser.g:2210:5: ( type )
			// grammar/HiveParser.g:2210:7: type
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_in_colType13738);
			type819=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type819.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "colType"


	public static class colTypeList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "colTypeList"
	// grammar/HiveParser.g:2213:1: colTypeList : colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) ;
	public final HiveParser.colTypeList_return colTypeList() throws RecognitionException {
		HiveParser.colTypeList_return retval = new HiveParser.colTypeList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA821=null;
		ParserRuleReturnScope colType820 =null;
		ParserRuleReturnScope colType822 =null;

		CommonTree COMMA821_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 pushMsg("column type list", state); 
		try {
			// grammar/HiveParser.g:2216:5: ( colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) )
			// grammar/HiveParser.g:2216:7: colType ( COMMA colType )*
			{
			pushFollow(FOLLOW_colType_in_colTypeList13765);
			colType820=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType820.getTree());
			// grammar/HiveParser.g:2216:15: ( COMMA colType )*
			loop239:
			while (true) {
				int alt239=2;
				int LA239_0 = input.LA(1);
				if ( (LA239_0==COMMA) ) {
					alt239=1;
				}

				switch (alt239) {
				case 1 :
					// grammar/HiveParser.g:2216:16: COMMA colType
					{
					COMMA821=(Token)match(input,COMMA,FOLLOW_COMMA_in_colTypeList13768); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA821);

					pushFollow(FOLLOW_colType_in_colTypeList13770);
					colType822=colType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_colType.add(colType822.getTree());
					}
					break;

				default :
					break loop239;
				}
			}

			// AST REWRITE
			// elements: colType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2216:32: -> ^( TOK_COLTYPELIST ( colType )+ )
			{
				// grammar/HiveParser.g:2216:35: ^( TOK_COLTYPELIST ( colType )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_COLTYPELIST, "TOK_COLTYPELIST"), root_1);
				if ( !(stream_colType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_colType.hasNext() ) {
					adaptor.addChild(root_1, stream_colType.nextTree());
				}
				stream_colType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "colTypeList"


	public static class type_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "type"
	// grammar/HiveParser.g:2219:1: type : ( primitiveType | listType | structType | mapType | unionType );
	public final HiveParser.type_return type() throws RecognitionException {
		HiveParser.type_return retval = new HiveParser.type_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope primitiveType823 =null;
		ParserRuleReturnScope listType824 =null;
		ParserRuleReturnScope structType825 =null;
		ParserRuleReturnScope mapType826 =null;
		ParserRuleReturnScope unionType827 =null;


		try {
			// grammar/HiveParser.g:2220:5: ( primitiveType | listType | structType | mapType | unionType )
			int alt240=5;
			switch ( input.LA(1) ) {
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_CHAR:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DECIMAL:
			case KW_DOUBLE:
			case KW_FLOAT:
			case KW_INT:
			case KW_SMALLINT:
			case KW_STRING:
			case KW_TIMESTAMP:
			case KW_TINYINT:
			case KW_VARCHAR:
				{
				alt240=1;
				}
				break;
			case KW_ARRAY:
				{
				alt240=2;
				}
				break;
			case KW_STRUCT:
				{
				alt240=3;
				}
				break;
			case KW_MAP:
				{
				alt240=4;
				}
				break;
			case KW_UNIONTYPE:
				{
				alt240=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 240, 0, input);
				throw nvae;
			}
			switch (alt240) {
				case 1 :
					// grammar/HiveParser.g:2220:7: primitiveType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_primitiveType_in_type13798);
					primitiveType823=primitiveType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType823.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2221:7: listType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_listType_in_type13806);
					listType824=listType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, listType824.getTree());

					}
					break;
				case 3 :
					// grammar/HiveParser.g:2222:7: structType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_structType_in_type13814);
					structType825=structType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, structType825.getTree());

					}
					break;
				case 4 :
					// grammar/HiveParser.g:2223:7: mapType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_mapType_in_type13822);
					mapType826=mapType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, mapType826.getTree());

					}
					break;
				case 5 :
					// grammar/HiveParser.g:2224:7: unionType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_unionType_in_type13830);
					unionType827=unionType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unionType827.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type"


	public static class primitiveType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "primitiveType"
	// grammar/HiveParser.g:2226:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )? -> ^( TOK_DECIMAL ( $prec)? ( $scale)? ) | KW_VARCHAR LPAREN length= Number RPAREN -> ^( TOK_VARCHAR $length) | KW_CHAR LPAREN length= Number RPAREN -> ^( TOK_CHAR $length) );
	public final HiveParser.primitiveType_return primitiveType() throws RecognitionException {
		HiveParser.primitiveType_return retval = new HiveParser.primitiveType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token prec=null;
		Token scale=null;
		Token length=null;
		Token KW_TINYINT828=null;
		Token KW_SMALLINT829=null;
		Token KW_INT830=null;
		Token KW_BIGINT831=null;
		Token KW_BOOLEAN832=null;
		Token KW_FLOAT833=null;
		Token KW_DOUBLE834=null;
		Token KW_DATE835=null;
		Token KW_DATETIME836=null;
		Token KW_TIMESTAMP837=null;
		Token KW_STRING838=null;
		Token KW_BINARY839=null;
		Token KW_DECIMAL840=null;
		Token LPAREN841=null;
		Token COMMA842=null;
		Token RPAREN843=null;
		Token KW_VARCHAR844=null;
		Token LPAREN845=null;
		Token RPAREN846=null;
		Token KW_CHAR847=null;
		Token LPAREN848=null;
		Token RPAREN849=null;

		CommonTree prec_tree=null;
		CommonTree scale_tree=null;
		CommonTree length_tree=null;
		CommonTree KW_TINYINT828_tree=null;
		CommonTree KW_SMALLINT829_tree=null;
		CommonTree KW_INT830_tree=null;
		CommonTree KW_BIGINT831_tree=null;
		CommonTree KW_BOOLEAN832_tree=null;
		CommonTree KW_FLOAT833_tree=null;
		CommonTree KW_DOUBLE834_tree=null;
		CommonTree KW_DATE835_tree=null;
		CommonTree KW_DATETIME836_tree=null;
		CommonTree KW_TIMESTAMP837_tree=null;
		CommonTree KW_STRING838_tree=null;
		CommonTree KW_BINARY839_tree=null;
		CommonTree KW_DECIMAL840_tree=null;
		CommonTree LPAREN841_tree=null;
		CommonTree COMMA842_tree=null;
		CommonTree RPAREN843_tree=null;
		CommonTree KW_VARCHAR844_tree=null;
		CommonTree LPAREN845_tree=null;
		CommonTree RPAREN846_tree=null;
		CommonTree KW_CHAR847_tree=null;
		CommonTree LPAREN848_tree=null;
		CommonTree RPAREN849_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_SMALLINT=new RewriteRuleTokenStream(adaptor,"token KW_SMALLINT");
		RewriteRuleTokenStream stream_KW_DATE=new RewriteRuleTokenStream(adaptor,"token KW_DATE");
		RewriteRuleTokenStream stream_KW_DATETIME=new RewriteRuleTokenStream(adaptor,"token KW_DATETIME");
		RewriteRuleTokenStream stream_KW_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token KW_TIMESTAMP");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_BOOLEAN=new RewriteRuleTokenStream(adaptor,"token KW_BOOLEAN");
		RewriteRuleTokenStream stream_KW_DOUBLE=new RewriteRuleTokenStream(adaptor,"token KW_DOUBLE");
		RewriteRuleTokenStream stream_KW_BIGINT=new RewriteRuleTokenStream(adaptor,"token KW_BIGINT");
		RewriteRuleTokenStream stream_KW_CHAR=new RewriteRuleTokenStream(adaptor,"token KW_CHAR");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_INT=new RewriteRuleTokenStream(adaptor,"token KW_INT");
		RewriteRuleTokenStream stream_KW_STRING=new RewriteRuleTokenStream(adaptor,"token KW_STRING");
		RewriteRuleTokenStream stream_KW_DECIMAL=new RewriteRuleTokenStream(adaptor,"token KW_DECIMAL");
		RewriteRuleTokenStream stream_KW_VARCHAR=new RewriteRuleTokenStream(adaptor,"token KW_VARCHAR");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_FLOAT=new RewriteRuleTokenStream(adaptor,"token KW_FLOAT");
		RewriteRuleTokenStream stream_KW_TINYINT=new RewriteRuleTokenStream(adaptor,"token KW_TINYINT");
		RewriteRuleTokenStream stream_KW_BINARY=new RewriteRuleTokenStream(adaptor,"token KW_BINARY");

		 pushMsg("primitive type specification", state); 
		try {
			// grammar/HiveParser.g:2229:5: ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )? -> ^( TOK_DECIMAL ( $prec)? ( $scale)? ) | KW_VARCHAR LPAREN length= Number RPAREN -> ^( TOK_VARCHAR $length) | KW_CHAR LPAREN length= Number RPAREN -> ^( TOK_CHAR $length) )
			int alt243=15;
			switch ( input.LA(1) ) {
			case KW_TINYINT:
				{
				alt243=1;
				}
				break;
			case KW_SMALLINT:
				{
				alt243=2;
				}
				break;
			case KW_INT:
				{
				alt243=3;
				}
				break;
			case KW_BIGINT:
				{
				alt243=4;
				}
				break;
			case KW_BOOLEAN:
				{
				alt243=5;
				}
				break;
			case KW_FLOAT:
				{
				alt243=6;
				}
				break;
			case KW_DOUBLE:
				{
				alt243=7;
				}
				break;
			case KW_DATE:
				{
				alt243=8;
				}
				break;
			case KW_DATETIME:
				{
				alt243=9;
				}
				break;
			case KW_TIMESTAMP:
				{
				alt243=10;
				}
				break;
			case KW_STRING:
				{
				alt243=11;
				}
				break;
			case KW_BINARY:
				{
				alt243=12;
				}
				break;
			case KW_DECIMAL:
				{
				alt243=13;
				}
				break;
			case KW_VARCHAR:
				{
				alt243=14;
				}
				break;
			case KW_CHAR:
				{
				alt243=15;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 243, 0, input);
				throw nvae;
			}
			switch (alt243) {
				case 1 :
					// grammar/HiveParser.g:2229:7: KW_TINYINT
					{
					KW_TINYINT828=(Token)match(input,KW_TINYINT,FOLLOW_KW_TINYINT_in_primitiveType13852); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TINYINT.add(KW_TINYINT828);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2229:24: -> TOK_TINYINT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TINYINT, "TOK_TINYINT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2230:7: KW_SMALLINT
					{
					KW_SMALLINT829=(Token)match(input,KW_SMALLINT,FOLLOW_KW_SMALLINT_in_primitiveType13873); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SMALLINT.add(KW_SMALLINT829);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2230:24: -> TOK_SMALLINT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_SMALLINT, "TOK_SMALLINT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// grammar/HiveParser.g:2231:7: KW_INT
					{
					KW_INT830=(Token)match(input,KW_INT,FOLLOW_KW_INT_in_primitiveType13893); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INT.add(KW_INT830);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2231:24: -> TOK_INT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_INT, "TOK_INT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// grammar/HiveParser.g:2232:7: KW_BIGINT
					{
					KW_BIGINT831=(Token)match(input,KW_BIGINT,FOLLOW_KW_BIGINT_in_primitiveType13918); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BIGINT.add(KW_BIGINT831);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2232:24: -> TOK_BIGINT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_BIGINT, "TOK_BIGINT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// grammar/HiveParser.g:2233:7: KW_BOOLEAN
					{
					KW_BOOLEAN832=(Token)match(input,KW_BOOLEAN,FOLLOW_KW_BOOLEAN_in_primitiveType13940); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BOOLEAN.add(KW_BOOLEAN832);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2233:24: -> TOK_BOOLEAN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_BOOLEAN, "TOK_BOOLEAN"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// grammar/HiveParser.g:2234:7: KW_FLOAT
					{
					KW_FLOAT833=(Token)match(input,KW_FLOAT,FOLLOW_KW_FLOAT_in_primitiveType13961); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FLOAT.add(KW_FLOAT833);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2234:24: -> TOK_FLOAT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_FLOAT, "TOK_FLOAT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// grammar/HiveParser.g:2235:7: KW_DOUBLE
					{
					KW_DOUBLE834=(Token)match(input,KW_DOUBLE,FOLLOW_KW_DOUBLE_in_primitiveType13984); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DOUBLE.add(KW_DOUBLE834);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2235:24: -> TOK_DOUBLE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_DOUBLE, "TOK_DOUBLE"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 8 :
					// grammar/HiveParser.g:2236:7: KW_DATE
					{
					KW_DATE835=(Token)match(input,KW_DATE,FOLLOW_KW_DATE_in_primitiveType14006); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATE.add(KW_DATE835);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2236:24: -> TOK_DATE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_DATE, "TOK_DATE"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 9 :
					// grammar/HiveParser.g:2237:7: KW_DATETIME
					{
					KW_DATETIME836=(Token)match(input,KW_DATETIME,FOLLOW_KW_DATETIME_in_primitiveType14030); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATETIME.add(KW_DATETIME836);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2237:24: -> TOK_DATETIME
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_DATETIME, "TOK_DATETIME"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 10 :
					// grammar/HiveParser.g:2238:7: KW_TIMESTAMP
					{
					KW_TIMESTAMP837=(Token)match(input,KW_TIMESTAMP,FOLLOW_KW_TIMESTAMP_in_primitiveType14050); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TIMESTAMP.add(KW_TIMESTAMP837);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2238:24: -> TOK_TIMESTAMP
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TIMESTAMP, "TOK_TIMESTAMP"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 11 :
					// grammar/HiveParser.g:2242:7: KW_STRING
					{
					KW_STRING838=(Token)match(input,KW_STRING,FOLLOW_KW_STRING_in_primitiveType14084); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STRING.add(KW_STRING838);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2242:24: -> TOK_STRING
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_STRING, "TOK_STRING"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 12 :
					// grammar/HiveParser.g:2243:7: KW_BINARY
					{
					KW_BINARY839=(Token)match(input,KW_BINARY,FOLLOW_KW_BINARY_in_primitiveType14106); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BINARY.add(KW_BINARY839);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2243:24: -> TOK_BINARY
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_BINARY, "TOK_BINARY"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 13 :
					// grammar/HiveParser.g:2244:7: KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )?
					{
					KW_DECIMAL840=(Token)match(input,KW_DECIMAL,FOLLOW_KW_DECIMAL_in_primitiveType14128); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DECIMAL.add(KW_DECIMAL840);

					// grammar/HiveParser.g:2244:18: ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )?
					int alt242=2;
					int LA242_0 = input.LA(1);
					if ( (LA242_0==LPAREN) ) {
						alt242=1;
					}
					switch (alt242) {
						case 1 :
							// grammar/HiveParser.g:2244:19: LPAREN prec= Number ( COMMA scale= Number )? RPAREN
							{
							LPAREN841=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType14131); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN841);

							prec=(Token)match(input,Number,FOLLOW_Number_in_primitiveType14135); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_Number.add(prec);

							// grammar/HiveParser.g:2244:38: ( COMMA scale= Number )?
							int alt241=2;
							int LA241_0 = input.LA(1);
							if ( (LA241_0==COMMA) ) {
								alt241=1;
							}
							switch (alt241) {
								case 1 :
									// grammar/HiveParser.g:2244:39: COMMA scale= Number
									{
									COMMA842=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitiveType14138); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_COMMA.add(COMMA842);

									scale=(Token)match(input,Number,FOLLOW_Number_in_primitiveType14142); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_Number.add(scale);

									}
									break;

							}

							RPAREN843=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType14146); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN843);

							}
							break;

					}

					// AST REWRITE
					// elements: prec, scale
					// token labels: prec, scale
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_prec=new RewriteRuleTokenStream(adaptor,"token prec",prec);
					RewriteRuleTokenStream stream_scale=new RewriteRuleTokenStream(adaptor,"token scale",scale);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2244:69: -> ^( TOK_DECIMAL ( $prec)? ( $scale)? )
					{
						// grammar/HiveParser.g:2244:72: ^( TOK_DECIMAL ( $prec)? ( $scale)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DECIMAL, "TOK_DECIMAL"), root_1);
						// grammar/HiveParser.g:2244:87: ( $prec)?
						if ( stream_prec.hasNext() ) {
							adaptor.addChild(root_1, stream_prec.nextNode());
						}
						stream_prec.reset();

						// grammar/HiveParser.g:2244:94: ( $scale)?
						if ( stream_scale.hasNext() ) {
							adaptor.addChild(root_1, stream_scale.nextNode());
						}
						stream_scale.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 14 :
					// grammar/HiveParser.g:2245:7: KW_VARCHAR LPAREN length= Number RPAREN
					{
					KW_VARCHAR844=(Token)match(input,KW_VARCHAR,FOLLOW_KW_VARCHAR_in_primitiveType14170); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_VARCHAR.add(KW_VARCHAR844);

					LPAREN845=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType14172); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN845);

					length=(Token)match(input,Number,FOLLOW_Number_in_primitiveType14176); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(length);

					RPAREN846=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType14178); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN846);

					// AST REWRITE
					// elements: length
					// token labels: length
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_length=new RewriteRuleTokenStream(adaptor,"token length",length);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2245:51: -> ^( TOK_VARCHAR $length)
					{
						// grammar/HiveParser.g:2245:57: ^( TOK_VARCHAR $length)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_VARCHAR, "TOK_VARCHAR"), root_1);
						adaptor.addChild(root_1, stream_length.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 15 :
					// grammar/HiveParser.g:2246:7: KW_CHAR LPAREN length= Number RPAREN
					{
					KW_CHAR847=(Token)match(input,KW_CHAR,FOLLOW_KW_CHAR_in_primitiveType14203); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CHAR.add(KW_CHAR847);

					LPAREN848=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType14205); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN848);

					length=(Token)match(input,Number,FOLLOW_Number_in_primitiveType14209); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(length);

					RPAREN849=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType14211); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN849);

					// AST REWRITE
					// elements: length
					// token labels: length
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_length=new RewriteRuleTokenStream(adaptor,"token length",length);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2246:48: -> ^( TOK_CHAR $length)
					{
						// grammar/HiveParser.g:2246:54: ^( TOK_CHAR $length)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CHAR, "TOK_CHAR"), root_1);
						adaptor.addChild(root_1, stream_length.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "primitiveType"


	public static class listType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "listType"
	// grammar/HiveParser.g:2249:1: listType : KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) ;
	public final HiveParser.listType_return listType() throws RecognitionException {
		HiveParser.listType_return retval = new HiveParser.listType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ARRAY850=null;
		Token LESSTHAN851=null;
		Token GREATERTHAN853=null;
		ParserRuleReturnScope type852 =null;

		CommonTree KW_ARRAY850_tree=null;
		CommonTree LESSTHAN851_tree=null;
		CommonTree GREATERTHAN853_tree=null;
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_KW_ARRAY=new RewriteRuleTokenStream(adaptor,"token KW_ARRAY");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");

		 pushMsg("list type", state); 
		try {
			// grammar/HiveParser.g:2252:5: ( KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) )
			// grammar/HiveParser.g:2252:7: KW_ARRAY LESSTHAN type GREATERTHAN
			{
			KW_ARRAY850=(Token)match(input,KW_ARRAY,FOLLOW_KW_ARRAY_in_listType14255); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ARRAY.add(KW_ARRAY850);

			LESSTHAN851=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_listType14257); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN851);

			pushFollow(FOLLOW_type_in_listType14259);
			type852=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type.add(type852.getTree());
			GREATERTHAN853=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_listType14261); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN853);

			// AST REWRITE
			// elements: type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2252:44: -> ^( TOK_LIST type )
			{
				// grammar/HiveParser.g:2252:47: ^( TOK_LIST type )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LIST, "TOK_LIST"), root_1);
				adaptor.addChild(root_1, stream_type.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "listType"


	public static class structType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "structType"
	// grammar/HiveParser.g:2255:1: structType : KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) ;
	public final HiveParser.structType_return structType() throws RecognitionException {
		HiveParser.structType_return retval = new HiveParser.structType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_STRUCT854=null;
		Token LESSTHAN855=null;
		Token GREATERTHAN857=null;
		ParserRuleReturnScope columnNameColonTypeList856 =null;

		CommonTree KW_STRUCT854_tree=null;
		CommonTree LESSTHAN855_tree=null;
		CommonTree GREATERTHAN857_tree=null;
		RewriteRuleTokenStream stream_KW_STRUCT=new RewriteRuleTokenStream(adaptor,"token KW_STRUCT");
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_columnNameColonTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonTypeList");

		 pushMsg("struct type", state); 
		try {
			// grammar/HiveParser.g:2258:5: ( KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) )
			// grammar/HiveParser.g:2258:7: KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN
			{
			KW_STRUCT854=(Token)match(input,KW_STRUCT,FOLLOW_KW_STRUCT_in_structType14298); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STRUCT.add(KW_STRUCT854);

			LESSTHAN855=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_structType14300); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN855);

			pushFollow(FOLLOW_columnNameColonTypeList_in_structType14302);
			columnNameColonTypeList856=columnNameColonTypeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameColonTypeList.add(columnNameColonTypeList856.getTree());
			GREATERTHAN857=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_structType14304); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN857);

			// AST REWRITE
			// elements: columnNameColonTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2258:62: -> ^( TOK_STRUCT columnNameColonTypeList )
			{
				// grammar/HiveParser.g:2258:65: ^( TOK_STRUCT columnNameColonTypeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_STRUCT, "TOK_STRUCT"), root_1);
				adaptor.addChild(root_1, stream_columnNameColonTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "structType"


	public static class mapType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "mapType"
	// grammar/HiveParser.g:2261:1: mapType : KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) ;
	public final HiveParser.mapType_return mapType() throws RecognitionException {
		HiveParser.mapType_return retval = new HiveParser.mapType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_MAP858=null;
		Token LESSTHAN859=null;
		Token COMMA860=null;
		Token GREATERTHAN861=null;
		ParserRuleReturnScope left =null;
		ParserRuleReturnScope right =null;

		CommonTree KW_MAP858_tree=null;
		CommonTree LESSTHAN859_tree=null;
		CommonTree COMMA860_tree=null;
		CommonTree GREATERTHAN861_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");

		 pushMsg("map type", state); 
		try {
			// grammar/HiveParser.g:2264:5: ( KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) )
			// grammar/HiveParser.g:2264:7: KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN
			{
			KW_MAP858=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_mapType14339); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MAP.add(KW_MAP858);

			LESSTHAN859=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_mapType14341); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN859);

			pushFollow(FOLLOW_primitiveType_in_mapType14345);
			left=primitiveType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_primitiveType.add(left.getTree());
			COMMA860=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapType14347); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COMMA.add(COMMA860);

			pushFollow(FOLLOW_type_in_mapType14351);
			right=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type.add(right.getTree());
			GREATERTHAN861=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_mapType14353); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN861);

			// AST REWRITE
			// elements: right, left
			// token labels: 
			// rule labels: left, right, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.getTree():null);
			RewriteRuleSubtreeStream stream_right=new RewriteRuleSubtreeStream(adaptor,"rule right",right!=null?right.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2265:5: -> ^( TOK_MAP $left $right)
			{
				// grammar/HiveParser.g:2265:8: ^( TOK_MAP $left $right)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_MAP, "TOK_MAP"), root_1);
				adaptor.addChild(root_1, stream_left.nextTree());
				adaptor.addChild(root_1, stream_right.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "mapType"


	public static class unionType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unionType"
	// grammar/HiveParser.g:2268:1: unionType : KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) ;
	public final HiveParser.unionType_return unionType() throws RecognitionException {
		HiveParser.unionType_return retval = new HiveParser.unionType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UNIONTYPE862=null;
		Token LESSTHAN863=null;
		Token GREATERTHAN865=null;
		ParserRuleReturnScope colTypeList864 =null;

		CommonTree KW_UNIONTYPE862_tree=null;
		CommonTree LESSTHAN863_tree=null;
		CommonTree GREATERTHAN865_tree=null;
		RewriteRuleTokenStream stream_KW_UNIONTYPE=new RewriteRuleTokenStream(adaptor,"token KW_UNIONTYPE");
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_colTypeList=new RewriteRuleSubtreeStream(adaptor,"rule colTypeList");

		 pushMsg("uniontype type", state); 
		try {
			// grammar/HiveParser.g:2271:5: ( KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) )
			// grammar/HiveParser.g:2271:7: KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN
			{
			KW_UNIONTYPE862=(Token)match(input,KW_UNIONTYPE,FOLLOW_KW_UNIONTYPE_in_unionType14396); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UNIONTYPE.add(KW_UNIONTYPE862);

			LESSTHAN863=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_unionType14398); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN863);

			pushFollow(FOLLOW_colTypeList_in_unionType14400);
			colTypeList864=colTypeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colTypeList.add(colTypeList864.getTree());
			GREATERTHAN865=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_unionType14402); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN865);

			// AST REWRITE
			// elements: colTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2271:53: -> ^( TOK_UNIONTYPE colTypeList )
			{
				// grammar/HiveParser.g:2271:56: ^( TOK_UNIONTYPE colTypeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNIONTYPE, "TOK_UNIONTYPE"), root_1);
				adaptor.addChild(root_1, stream_colTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unionType"


	public static class setOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "setOperator"
	// grammar/HiveParser.g:2274:1: setOperator : ( KW_UNION KW_ALL -> ^( TOK_UNIONALL ) | KW_UNION ( KW_DISTINCT )? -> ^( TOK_UNIONDISTINCT ) );
	public final HiveParser.setOperator_return setOperator() throws RecognitionException {
		HiveParser.setOperator_return retval = new HiveParser.setOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UNION866=null;
		Token KW_ALL867=null;
		Token KW_UNION868=null;
		Token KW_DISTINCT869=null;

		CommonTree KW_UNION866_tree=null;
		CommonTree KW_ALL867_tree=null;
		CommonTree KW_UNION868_tree=null;
		CommonTree KW_DISTINCT869_tree=null;
		RewriteRuleTokenStream stream_KW_UNION=new RewriteRuleTokenStream(adaptor,"token KW_UNION");
		RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");

		 pushMsg("set operator", state); 
		try {
			// grammar/HiveParser.g:2277:5: ( KW_UNION KW_ALL -> ^( TOK_UNIONALL ) | KW_UNION ( KW_DISTINCT )? -> ^( TOK_UNIONDISTINCT ) )
			int alt245=2;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==KW_UNION) ) {
				int LA245_1 = input.LA(2);
				if ( (LA245_1==KW_ALL) ) {
					alt245=1;
				}
				else if ( (LA245_1==KW_DISTINCT||LA245_1==KW_FROM||LA245_1==KW_MAP||LA245_1==KW_REDUCE||LA245_1==KW_SELECT) ) {
					alt245=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 245, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 245, 0, input);
				throw nvae;
			}

			switch (alt245) {
				case 1 :
					// grammar/HiveParser.g:2277:7: KW_UNION KW_ALL
					{
					KW_UNION866=(Token)match(input,KW_UNION,FOLLOW_KW_UNION_in_setOperator14437); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNION.add(KW_UNION866);

					KW_ALL867=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator14439); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL867);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2277:23: -> ^( TOK_UNIONALL )
					{
						// grammar/HiveParser.g:2277:26: ^( TOK_UNIONALL )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2278:7: KW_UNION ( KW_DISTINCT )?
					{
					KW_UNION868=(Token)match(input,KW_UNION,FOLLOW_KW_UNION_in_setOperator14453); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNION.add(KW_UNION868);

					// grammar/HiveParser.g:2278:16: ( KW_DISTINCT )?
					int alt244=2;
					int LA244_0 = input.LA(1);
					if ( (LA244_0==KW_DISTINCT) ) {
						alt244=1;
					}
					switch (alt244) {
						case 1 :
							// grammar/HiveParser.g:2278:16: KW_DISTINCT
							{
							KW_DISTINCT869=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator14455); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT869);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2278:29: -> ^( TOK_UNIONDISTINCT )
					{
						// grammar/HiveParser.g:2278:32: ^( TOK_UNIONDISTINCT )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNIONDISTINCT, "TOK_UNIONDISTINCT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setOperator"


	public static class queryStatementExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "queryStatementExpression"
	// grammar/HiveParser.g:2281:1: queryStatementExpression[boolean topLevel] : (w= withClause {...}?)? queryStatementExpressionBody[topLevel] -> queryStatementExpressionBody ;
	public final HiveParser.queryStatementExpression_return queryStatementExpression(boolean topLevel) throws RecognitionException {
		HiveParser.queryStatementExpression_return retval = new HiveParser.queryStatementExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope w =null;
		ParserRuleReturnScope queryStatementExpressionBody870 =null;

		RewriteRuleSubtreeStream stream_withClause=new RewriteRuleSubtreeStream(adaptor,"rule withClause");
		RewriteRuleSubtreeStream stream_queryStatementExpressionBody=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpressionBody");

		try {
			// grammar/HiveParser.g:2282:5: ( (w= withClause {...}?)? queryStatementExpressionBody[topLevel] -> queryStatementExpressionBody )
			// grammar/HiveParser.g:2287:5: (w= withClause {...}?)? queryStatementExpressionBody[topLevel]
			{
			// grammar/HiveParser.g:2287:5: (w= withClause {...}?)?
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==KW_WITH) ) {
				alt246=1;
			}
			switch (alt246) {
				case 1 :
					// grammar/HiveParser.g:2287:6: w= withClause {...}?
					{
					pushFollow(FOLLOW_withClause_in_queryStatementExpression14493);
					w=withClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_withClause.add(w.getTree());
					if ( !((topLevel)) ) {
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "queryStatementExpression", "topLevel");
					}
					}
					break;

			}

			pushFollow(FOLLOW_queryStatementExpressionBody_in_queryStatementExpression14503);
			queryStatementExpressionBody870=queryStatementExpressionBody(topLevel);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_queryStatementExpressionBody.add(queryStatementExpressionBody870.getTree());
			if ( state.backtracking==0 ) {
			      if ((w!=null?((CommonTree)w.getTree()):null) != null) {
			      (queryStatementExpressionBody870!=null?((CommonTree)queryStatementExpressionBody870.getTree()):null).insertChild(0, (w!=null?((CommonTree)w.getTree()):null));
			      }
			    }
			// AST REWRITE
			// elements: queryStatementExpressionBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2293:5: -> queryStatementExpressionBody
			{
				adaptor.addChild(root_0, stream_queryStatementExpressionBody.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "queryStatementExpression"


	public static class queryStatementExpressionBody_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "queryStatementExpressionBody"
	// grammar/HiveParser.g:2296:1: queryStatementExpressionBody[boolean topLevel] : ( fromStatement[topLevel] | regularBody[topLevel] );
	public final HiveParser.queryStatementExpressionBody_return queryStatementExpressionBody(boolean topLevel) throws RecognitionException {
		HiveParser.queryStatementExpressionBody_return retval = new HiveParser.queryStatementExpressionBody_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope fromStatement871 =null;
		ParserRuleReturnScope regularBody872 =null;


		try {
			// grammar/HiveParser.g:2297:5: ( fromStatement[topLevel] | regularBody[topLevel] )
			int alt247=2;
			int LA247_0 = input.LA(1);
			if ( (LA247_0==KW_FROM) ) {
				alt247=1;
			}
			else if ( (LA247_0==KW_INSERT||LA247_0==KW_MAP||LA247_0==KW_REDUCE||LA247_0==KW_SELECT) ) {
				alt247=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 247, 0, input);
				throw nvae;
			}

			switch (alt247) {
				case 1 :
					// grammar/HiveParser.g:2298:5: fromStatement[topLevel]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fromStatement_in_queryStatementExpressionBody14537);
					fromStatement871=fromStatement(topLevel);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fromStatement871.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2299:7: regularBody[topLevel]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_regularBody_in_queryStatementExpressionBody14546);
					regularBody872=regularBody(topLevel);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, regularBody872.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "queryStatementExpressionBody"


	public static class withClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "withClause"
	// grammar/HiveParser.g:2302:1: withClause : KW_WITH cteStatement ( COMMA cteStatement )* -> ^( TOK_CTE ( cteStatement )+ ) ;
	public final HiveParser.withClause_return withClause() throws RecognitionException {
		HiveParser.withClause_return retval = new HiveParser.withClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_WITH873=null;
		Token COMMA875=null;
		ParserRuleReturnScope cteStatement874 =null;
		ParserRuleReturnScope cteStatement876 =null;

		CommonTree KW_WITH873_tree=null;
		CommonTree COMMA875_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleSubtreeStream stream_cteStatement=new RewriteRuleSubtreeStream(adaptor,"rule cteStatement");

		try {
			// grammar/HiveParser.g:2303:3: ( KW_WITH cteStatement ( COMMA cteStatement )* -> ^( TOK_CTE ( cteStatement )+ ) )
			// grammar/HiveParser.g:2304:3: KW_WITH cteStatement ( COMMA cteStatement )*
			{
			KW_WITH873=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withClause14564); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH873);

			pushFollow(FOLLOW_cteStatement_in_withClause14566);
			cteStatement874=cteStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_cteStatement.add(cteStatement874.getTree());
			// grammar/HiveParser.g:2304:24: ( COMMA cteStatement )*
			loop248:
			while (true) {
				int alt248=2;
				int LA248_0 = input.LA(1);
				if ( (LA248_0==COMMA) ) {
					alt248=1;
				}

				switch (alt248) {
				case 1 :
					// grammar/HiveParser.g:2304:25: COMMA cteStatement
					{
					COMMA875=(Token)match(input,COMMA,FOLLOW_COMMA_in_withClause14569); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA875);

					pushFollow(FOLLOW_cteStatement_in_withClause14571);
					cteStatement876=cteStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_cteStatement.add(cteStatement876.getTree());
					}
					break;

				default :
					break loop248;
				}
			}

			// AST REWRITE
			// elements: cteStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2304:46: -> ^( TOK_CTE ( cteStatement )+ )
			{
				// grammar/HiveParser.g:2304:49: ^( TOK_CTE ( cteStatement )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CTE, "TOK_CTE"), root_1);
				if ( !(stream_cteStatement.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_cteStatement.hasNext() ) {
					adaptor.addChild(root_1, stream_cteStatement.nextTree());
				}
				stream_cteStatement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "withClause"


	public static class cteStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "cteStatement"
	// grammar/HiveParser.g:2307:1: cteStatement : identifier KW_AS LPAREN queryStatementExpression[false] RPAREN -> ^( TOK_SUBQUERY queryStatementExpression identifier ) ;
	public final HiveParser.cteStatement_return cteStatement() throws RecognitionException {
		HiveParser.cteStatement_return retval = new HiveParser.cteStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_AS878=null;
		Token LPAREN879=null;
		Token RPAREN881=null;
		ParserRuleReturnScope identifier877 =null;
		ParserRuleReturnScope queryStatementExpression880 =null;

		CommonTree KW_AS878_tree=null;
		CommonTree LPAREN879_tree=null;
		CommonTree RPAREN881_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");

		try {
			// grammar/HiveParser.g:2308:4: ( identifier KW_AS LPAREN queryStatementExpression[false] RPAREN -> ^( TOK_SUBQUERY queryStatementExpression identifier ) )
			// grammar/HiveParser.g:2309:4: identifier KW_AS LPAREN queryStatementExpression[false] RPAREN
			{
			pushFollow(FOLLOW_identifier_in_cteStatement14597);
			identifier877=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier877.getTree());
			KW_AS878=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_cteStatement14599); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS878);

			LPAREN879=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cteStatement14601); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN879);

			pushFollow(FOLLOW_queryStatementExpression_in_cteStatement14603);
			queryStatementExpression880=queryStatementExpression(false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_queryStatementExpression.add(queryStatementExpression880.getTree());
			RPAREN881=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cteStatement14606); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN881);

			// AST REWRITE
			// elements: queryStatementExpression, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2310:4: -> ^( TOK_SUBQUERY queryStatementExpression identifier )
			{
				// grammar/HiveParser.g:2310:7: ^( TOK_SUBQUERY queryStatementExpression identifier )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_1);
				adaptor.addChild(root_1, stream_queryStatementExpression.nextTree());
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cteStatement"


	public static class fromStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fromStatement"
	// grammar/HiveParser.g:2313:1: fromStatement[boolean topLevel] : ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )* -> {u != null && topLevel}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ->;
	public final HiveParser.fromStatement_return fromStatement(boolean topLevel) throws RecognitionException {
		HiveParser.fromStatement_return retval = new HiveParser.fromStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope u =null;
		ParserRuleReturnScope r =null;
		ParserRuleReturnScope singleFromStatement882 =null;

		RewriteRuleSubtreeStream stream_setOperator=new RewriteRuleSubtreeStream(adaptor,"rule setOperator");
		RewriteRuleSubtreeStream stream_singleFromStatement=new RewriteRuleSubtreeStream(adaptor,"rule singleFromStatement");

		try {
			// grammar/HiveParser.g:2314:3: ( ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )* -> {u != null && topLevel}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ->)
			// grammar/HiveParser.g:2314:3: ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )*
			{
			// grammar/HiveParser.g:2314:3: ( singleFromStatement -> singleFromStatement )
			// grammar/HiveParser.g:2314:4: singleFromStatement
			{
			pushFollow(FOLLOW_singleFromStatement_in_fromStatement14630);
			singleFromStatement882=singleFromStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_singleFromStatement.add(singleFromStatement882.getTree());
			// AST REWRITE
			// elements: singleFromStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2314:25: -> singleFromStatement
			{
				adaptor.addChild(root_0, stream_singleFromStatement.nextTree());
			}


			retval.tree = root_0;
			}

			}

			// grammar/HiveParser.g:2315:2: (u= setOperator r= singleFromStatement -> ^( $u $r) )*
			loop249:
			while (true) {
				int alt249=2;
				int LA249_0 = input.LA(1);
				if ( (LA249_0==KW_UNION) ) {
					alt249=1;
				}

				switch (alt249) {
				case 1 :
					// grammar/HiveParser.g:2315:3: u= setOperator r= singleFromStatement
					{
					pushFollow(FOLLOW_setOperator_in_fromStatement14642);
					u=setOperator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_setOperator.add(u.getTree());
					pushFollow(FOLLOW_singleFromStatement_in_fromStatement14646);
					r=singleFromStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_singleFromStatement.add(r.getTree());
					// AST REWRITE
					// elements: u, r
					// token labels: 
					// rule labels: r, u, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_r=new RewriteRuleSubtreeStream(adaptor,"rule r",r!=null?r.getTree():null);
					RewriteRuleSubtreeStream stream_u=new RewriteRuleSubtreeStream(adaptor,"rule u",u!=null?u.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2316:4: -> ^( $u $r)
					{
						// grammar/HiveParser.g:2316:7: ^( $u $r)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_u.nextNode(), root_1);
						adaptor.addChild(root_1, retval.tree);
						adaptor.addChild(root_1, stream_r.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

				default :
					break loop249;
				}
			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2318:3: -> {u != null && topLevel}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
			if (u != null && topLevel) {
				// grammar/HiveParser.g:2318:31: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				// grammar/HiveParser.g:2319:9: ^( TOK_FROM ^( TOK_SUBQUERY ) )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
				// grammar/HiveParser.g:2320:11: ^( TOK_SUBQUERY )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
				adaptor.addChild(root_3, retval.tree);
				adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				// grammar/HiveParser.g:2325:9: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// grammar/HiveParser.g:2326:12: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// grammar/HiveParser.g:2326:30: ^( TOK_DIR TOK_TMP_FILE )
				{
				CommonTree root_4 = (CommonTree)adaptor.nil();
				root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				// grammar/HiveParser.g:2327:12: ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_3);
				// grammar/HiveParser.g:2327:25: ^( TOK_SELEXPR TOK_ALLCOLREF )
				{
				CommonTree root_4 = (CommonTree)adaptor.nil();
				root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
				adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2330:5: ->
			{
				adaptor.addChild(root_0, retval.tree);
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fromStatement"


	public static class singleFromStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "singleFromStatement"
	// grammar/HiveParser.g:2334:1: singleFromStatement : fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) ;
	public final HiveParser.singleFromStatement_return singleFromStatement() throws RecognitionException {
		HiveParser.singleFromStatement_return retval = new HiveParser.singleFromStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		List<Object> list_b=null;
		ParserRuleReturnScope fromClause883 =null;
		RuleReturnScope b = null;
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
		RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");

		try {
			// grammar/HiveParser.g:2335:5: ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) )
			// grammar/HiveParser.g:2336:5: fromClause (b+= body )+
			{
			pushFollow(FOLLOW_fromClause_in_singleFromStatement14853);
			fromClause883=fromClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_fromClause.add(fromClause883.getTree());
			// grammar/HiveParser.g:2337:5: (b+= body )+
			int cnt250=0;
			loop250:
			while (true) {
				int alt250=2;
				int LA250_0 = input.LA(1);
				if ( (LA250_0==KW_INSERT||LA250_0==KW_MAP||LA250_0==KW_REDUCE||LA250_0==KW_SELECT) ) {
					alt250=1;
				}

				switch (alt250) {
				case 1 :
					// grammar/HiveParser.g:2337:7: b+= body
					{
					pushFollow(FOLLOW_body_in_singleFromStatement14863);
					b=body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_body.add(b.getTree());
					if (list_b==null) list_b=new ArrayList<Object>();
					list_b.add(b.getTree());
					}
					break;

				default :
					if ( cnt250 >= 1 ) break loop250;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(250, input);
					throw eee;
				}
				cnt250++;
			}

			// AST REWRITE
			// elements: fromClause, body
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2337:18: -> ^( TOK_QUERY fromClause ( body )+ )
			{
				// grammar/HiveParser.g:2337:21: ^( TOK_QUERY fromClause ( body )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				adaptor.addChild(root_1, stream_fromClause.nextTree());
				if ( !(stream_body.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_body.hasNext() ) {
					adaptor.addChild(root_1, stream_body.nextTree());
				}
				stream_body.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "singleFromStatement"


	public static class regularBody_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "regularBody"
	// grammar/HiveParser.g:2347:1: regularBody[boolean topLevel] : (i= insertClause (s= selectStatement[topLevel] ->| valuesClause -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ) | selectStatement[topLevel] );
	public final HiveParser.regularBody_return regularBody(boolean topLevel) throws RecognitionException {
		HiveParser.regularBody_return retval = new HiveParser.regularBody_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope i =null;
		ParserRuleReturnScope s =null;
		ParserRuleReturnScope valuesClause884 =null;
		ParserRuleReturnScope selectStatement885 =null;

		RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
		RewriteRuleSubtreeStream stream_valuesClause=new RewriteRuleSubtreeStream(adaptor,"rule valuesClause");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");

		try {
			// grammar/HiveParser.g:2348:4: (i= insertClause (s= selectStatement[topLevel] ->| valuesClause -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ) | selectStatement[topLevel] )
			int alt252=2;
			int LA252_0 = input.LA(1);
			if ( (LA252_0==KW_INSERT) ) {
				alt252=1;
			}
			else if ( (LA252_0==KW_MAP||LA252_0==KW_REDUCE||LA252_0==KW_SELECT) ) {
				alt252=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 252, 0, input);
				throw nvae;
			}

			switch (alt252) {
				case 1 :
					// grammar/HiveParser.g:2349:4: i= insertClause (s= selectStatement[topLevel] ->| valuesClause -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) )
					{
					pushFollow(FOLLOW_insertClause_in_regularBody14901);
					i=insertClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_insertClause.add(i.getTree());
					// grammar/HiveParser.g:2350:4: (s= selectStatement[topLevel] ->| valuesClause -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) )
					int alt251=2;
					int LA251_0 = input.LA(1);
					if ( (LA251_0==KW_MAP||LA251_0==KW_REDUCE||LA251_0==KW_SELECT) ) {
						alt251=1;
					}
					else if ( (LA251_0==KW_VALUES) ) {
						alt251=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 251, 0, input);
						throw nvae;
					}

					switch (alt251) {
						case 1 :
							// grammar/HiveParser.g:2351:4: s= selectStatement[topLevel]
							{
							pushFollow(FOLLOW_selectStatement_in_regularBody14913);
							s=selectStatement(topLevel);
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_selectStatement.add(s.getTree());
							if ( state.backtracking==0 ) {(s!=null?((CommonTree)s.getTree()):null).getFirstChildWithType(TOK_INSERT).replaceChildren(0, 0, (i!=null?((CommonTree)i.getTree()):null));}
							// AST REWRITE
							// elements: 
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 2352:82: ->
							{
								adaptor.addChild(root_0, (s!=null?((CommonTree)s.getTree()):null));
							}


							retval.tree = root_0;
							}

							}
							break;
						case 2 :
							// grammar/HiveParser.g:2354:6: valuesClause
							{
							pushFollow(FOLLOW_valuesClause_in_regularBody14939);
							valuesClause884=valuesClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_valuesClause.add(valuesClause884.getTree());
							// AST REWRITE
							// elements: valuesClause
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (CommonTree)adaptor.nil();
							// 2355:7: -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
							{
								// grammar/HiveParser.g:2355:10: ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
								{
								CommonTree root_1 = (CommonTree)adaptor.nil();
								root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
								// grammar/HiveParser.g:2356:13: ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) )
								{
								CommonTree root_2 = (CommonTree)adaptor.nil();
								root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
								// grammar/HiveParser.g:2357:15: ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause )
								{
								CommonTree root_3 = (CommonTree)adaptor.nil();
								root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_VIRTUAL_TABLE, "TOK_VIRTUAL_TABLE"), root_3);
								// grammar/HiveParser.g:2357:35: ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) )
								{
								CommonTree root_4 = (CommonTree)adaptor.nil();
								root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_VIRTUAL_TABREF, "TOK_VIRTUAL_TABREF"), root_4);
								// grammar/HiveParser.g:2357:56: ^( TOK_ANONYMOUS )
								{
								CommonTree root_5 = (CommonTree)adaptor.nil();
								root_5 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ANONYMOUS, "TOK_ANONYMOUS"), root_5);
								adaptor.addChild(root_4, root_5);
								}

								adaptor.addChild(root_3, root_4);
								}

								adaptor.addChild(root_3, stream_valuesClause.nextTree());
								adaptor.addChild(root_2, root_3);
								}

								adaptor.addChild(root_1, root_2);
								}

								// grammar/HiveParser.g:2359:13: ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) )
								{
								CommonTree root_2 = (CommonTree)adaptor.nil();
								root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
								adaptor.addChild(root_2, (i!=null?((CommonTree)i.getTree()):null));
								// grammar/HiveParser.g:2359:36: ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) )
								{
								CommonTree root_3 = (CommonTree)adaptor.nil();
								root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_3);
								// grammar/HiveParser.g:2359:49: ^( TOK_SELEXPR TOK_ALLCOLREF )
								{
								CommonTree root_4 = (CommonTree)adaptor.nil();
								root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
								adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"));
								adaptor.addChild(root_3, root_4);
								}

								adaptor.addChild(root_2, root_3);
								}

								adaptor.addChild(root_1, root_2);
								}

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2363:4: selectStatement[topLevel]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_selectStatement_in_regularBody15063);
					selectStatement885=selectStatement(topLevel);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, selectStatement885.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "regularBody"


	public static class selectStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectStatement"
	// grammar/HiveParser.g:2366:1: selectStatement[boolean topLevel] : (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) ) ) (set= setOpSelectStatement[$selectStatement.tree, topLevel] )? -> {set == null}? -> {o==null && c==null && d==null && sort==null && l==null}? ->;
	public final HiveParser.selectStatement_return selectStatement(boolean topLevel) throws RecognitionException {
		HiveParser.selectStatement_return retval = new HiveParser.selectStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope s =null;
		ParserRuleReturnScope f =null;
		ParserRuleReturnScope w =null;
		ParserRuleReturnScope g =null;
		ParserRuleReturnScope h =null;
		ParserRuleReturnScope o =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope d =null;
		ParserRuleReturnScope sort =null;
		ParserRuleReturnScope win =null;
		ParserRuleReturnScope l =null;
		ParserRuleReturnScope set =null;

		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
		RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
		RewriteRuleSubtreeStream stream_setOpSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule setOpSelectStatement");
		RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
		RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
		RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
		RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");

		try {
			// grammar/HiveParser.g:2367:4: ( (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) ) ) (set= setOpSelectStatement[$selectStatement.tree, topLevel] )? -> {set == null}? -> {o==null && c==null && d==null && sort==null && l==null}? ->)
			// grammar/HiveParser.g:2368:4: (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) ) ) (set= setOpSelectStatement[$selectStatement.tree, topLevel] )?
			{
			// grammar/HiveParser.g:2368:4: (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) ) )
			// grammar/HiveParser.g:2369:4: s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )?
			{
			pushFollow(FOLLOW_selectClause_in_selectStatement15090);
			s=selectClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_selectClause.add(s.getTree());
			// grammar/HiveParser.g:2370:5: (f= fromClause )?
			int alt253=2;
			int LA253_0 = input.LA(1);
			if ( (LA253_0==KW_FROM) ) {
				alt253=1;
			}
			switch (alt253) {
				case 1 :
					// grammar/HiveParser.g:2370:5: f= fromClause
					{
					pushFollow(FOLLOW_fromClause_in_selectStatement15097);
					f=fromClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fromClause.add(f.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2371:5: (w= whereClause )?
			int alt254=2;
			int LA254_0 = input.LA(1);
			if ( (LA254_0==KW_WHERE) ) {
				alt254=1;
			}
			switch (alt254) {
				case 1 :
					// grammar/HiveParser.g:2371:5: w= whereClause
					{
					pushFollow(FOLLOW_whereClause_in_selectStatement15105);
					w=whereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2372:5: (g= groupByClause )?
			int alt255=2;
			int LA255_0 = input.LA(1);
			if ( (LA255_0==KW_GROUP) ) {
				alt255=1;
			}
			switch (alt255) {
				case 1 :
					// grammar/HiveParser.g:2372:5: g= groupByClause
					{
					pushFollow(FOLLOW_groupByClause_in_selectStatement15113);
					g=groupByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_groupByClause.add(g.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2373:5: (h= havingClause )?
			int alt256=2;
			int LA256_0 = input.LA(1);
			if ( (LA256_0==KW_HAVING) ) {
				alt256=1;
			}
			switch (alt256) {
				case 1 :
					// grammar/HiveParser.g:2373:5: h= havingClause
					{
					pushFollow(FOLLOW_havingClause_in_selectStatement15121);
					h=havingClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_havingClause.add(h.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2374:5: (o= orderByClause )?
			int alt257=2;
			int LA257_0 = input.LA(1);
			if ( (LA257_0==KW_ORDER) ) {
				alt257=1;
			}
			switch (alt257) {
				case 1 :
					// grammar/HiveParser.g:2374:5: o= orderByClause
					{
					pushFollow(FOLLOW_orderByClause_in_selectStatement15129);
					o=orderByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orderByClause.add(o.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2375:5: (c= clusterByClause )?
			int alt258=2;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==KW_CLUSTER) ) {
				alt258=1;
			}
			switch (alt258) {
				case 1 :
					// grammar/HiveParser.g:2375:5: c= clusterByClause
					{
					pushFollow(FOLLOW_clusterByClause_in_selectStatement15137);
					c=clusterByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clusterByClause.add(c.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2376:5: (d= distributeByClause )?
			int alt259=2;
			int LA259_0 = input.LA(1);
			if ( (LA259_0==KW_DISTRIBUTE) ) {
				alt259=1;
			}
			switch (alt259) {
				case 1 :
					// grammar/HiveParser.g:2376:5: d= distributeByClause
					{
					pushFollow(FOLLOW_distributeByClause_in_selectStatement15145);
					d=distributeByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_distributeByClause.add(d.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2377:8: (sort= sortByClause )?
			int alt260=2;
			int LA260_0 = input.LA(1);
			if ( (LA260_0==KW_SORT) ) {
				alt260=1;
			}
			switch (alt260) {
				case 1 :
					// grammar/HiveParser.g:2377:8: sort= sortByClause
					{
					pushFollow(FOLLOW_sortByClause_in_selectStatement15153);
					sort=sortByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_sortByClause.add(sort.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2378:7: (win= window_clause )?
			int alt261=2;
			int LA261_0 = input.LA(1);
			if ( (LA261_0==KW_WINDOW) ) {
				alt261=1;
			}
			switch (alt261) {
				case 1 :
					// grammar/HiveParser.g:2378:7: win= window_clause
					{
					pushFollow(FOLLOW_window_clause_in_selectStatement15161);
					win=window_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_window_clause.add(win.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2379:5: (l= limitClause )?
			int alt262=2;
			int LA262_0 = input.LA(1);
			if ( (LA262_0==KW_LIMIT) ) {
				alt262=1;
			}
			switch (alt262) {
				case 1 :
					// grammar/HiveParser.g:2379:5: l= limitClause
					{
					pushFollow(FOLLOW_limitClause_in_selectStatement15169);
					l=limitClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_limitClause.add(l.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: d, f, h, c, g, o, sort, l, w, s, win
			// token labels: 
			// rule labels: c, s, d, f, g, w, h, sort, l, win, retval, o
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.getTree():null);
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.getTree():null);
			RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.getTree():null);
			RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.getTree():null);
			RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.getTree():null);
			RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.getTree():null);
			RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"rule h",h!=null?h.getTree():null);
			RewriteRuleSubtreeStream stream_sort=new RewriteRuleSubtreeStream(adaptor,"rule sort",sort!=null?sort.getTree():null);
			RewriteRuleSubtreeStream stream_l=new RewriteRuleSubtreeStream(adaptor,"rule l",l!=null?l.getTree():null);
			RewriteRuleSubtreeStream stream_win=new RewriteRuleSubtreeStream(adaptor,"rule win",win!=null?win.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2380:4: -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) )
			{
				// grammar/HiveParser.g:2380:7: ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				// grammar/HiveParser.g:2380:20: ( $f)?
				if ( stream_f.hasNext() ) {
					adaptor.addChild(root_1, stream_f.nextTree());
				}
				stream_f.reset();

				// grammar/HiveParser.g:2380:23: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// grammar/HiveParser.g:2380:36: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// grammar/HiveParser.g:2380:54: ^( TOK_DIR TOK_TMP_FILE )
				{
				CommonTree root_4 = (CommonTree)adaptor.nil();
				root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_2, stream_s.nextTree());
				// grammar/HiveParser.g:2381:26: ( $w)?
				if ( stream_w.hasNext() ) {
					adaptor.addChild(root_2, stream_w.nextTree());
				}
				stream_w.reset();

				// grammar/HiveParser.g:2381:30: ( $g)?
				if ( stream_g.hasNext() ) {
					adaptor.addChild(root_2, stream_g.nextTree());
				}
				stream_g.reset();

				// grammar/HiveParser.g:2381:34: ( $h)?
				if ( stream_h.hasNext() ) {
					adaptor.addChild(root_2, stream_h.nextTree());
				}
				stream_h.reset();

				// grammar/HiveParser.g:2381:38: ( $o)?
				if ( stream_o.hasNext() ) {
					adaptor.addChild(root_2, stream_o.nextTree());
				}
				stream_o.reset();

				// grammar/HiveParser.g:2381:42: ( $c)?
				if ( stream_c.hasNext() ) {
					adaptor.addChild(root_2, stream_c.nextTree());
				}
				stream_c.reset();

				// grammar/HiveParser.g:2382:23: ( $d)?
				if ( stream_d.hasNext() ) {
					adaptor.addChild(root_2, stream_d.nextTree());
				}
				stream_d.reset();

				// grammar/HiveParser.g:2382:27: ( $sort)?
				if ( stream_sort.hasNext() ) {
					adaptor.addChild(root_2, stream_sort.nextTree());
				}
				stream_sort.reset();

				// grammar/HiveParser.g:2382:34: ( $win)?
				if ( stream_win.hasNext() ) {
					adaptor.addChild(root_2, stream_win.nextTree());
				}
				stream_win.reset();

				// grammar/HiveParser.g:2382:40: ( $l)?
				if ( stream_l.hasNext() ) {
					adaptor.addChild(root_2, stream_l.nextTree());
				}
				stream_l.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			// grammar/HiveParser.g:2384:4: (set= setOpSelectStatement[$selectStatement.tree, topLevel] )?
			int alt263=2;
			int LA263_0 = input.LA(1);
			if ( (LA263_0==KW_UNION) ) {
				alt263=1;
			}
			switch (alt263) {
				case 1 :
					// grammar/HiveParser.g:2384:5: set= setOpSelectStatement[$selectStatement.tree, topLevel]
					{
					pushFollow(FOLLOW_setOpSelectStatement_in_selectStatement15291);
					set=setOpSelectStatement(retval.tree, topLevel);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_setOpSelectStatement.add(set.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2385:4: -> {set == null}?
			if (set == null) {
				adaptor.addChild(root_0, retval.tree);
			}

			else // 2387:4: -> {o==null && c==null && d==null && sort==null && l==null}?
			if (o==null && c==null && d==null && sort==null && l==null) {
				adaptor.addChild(root_0, (set!=null?((CommonTree)set.getTree()):null));
			}

			else // 2389:4: ->
			{
				adaptor.addChild(root_0, throwSetOpException());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectStatement"


	public static class setOpSelectStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "setOpSelectStatement"
	// grammar/HiveParser.g:2392:1: setOpSelectStatement[CommonTree t, boolean topLevel] : (u= setOperator b= simpleSelectStatement -> {$setOpSelectStatement.tree != null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && u.tree.getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( TOK_UNIONALL $b) -> {$setOpSelectStatement.tree == null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> ^( TOK_UNIONALL $b) )+ (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )? -> {o==null && c==null && d==null && sort==null && win==null && l==null && !topLevel}? -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) ) ;
	public final HiveParser.setOpSelectStatement_return setOpSelectStatement(CommonTree t, boolean topLevel) throws RecognitionException {
		HiveParser.setOpSelectStatement_return retval = new HiveParser.setOpSelectStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope u =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope o =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope d =null;
		ParserRuleReturnScope sort =null;
		ParserRuleReturnScope win =null;
		ParserRuleReturnScope l =null;

		RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
		RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
		RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
		RewriteRuleSubtreeStream stream_setOperator=new RewriteRuleSubtreeStream(adaptor,"rule setOperator");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
		RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
		RewriteRuleSubtreeStream stream_simpleSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule simpleSelectStatement");
		RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");

		try {
			// grammar/HiveParser.g:2393:4: ( (u= setOperator b= simpleSelectStatement -> {$setOpSelectStatement.tree != null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && u.tree.getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( TOK_UNIONALL $b) -> {$setOpSelectStatement.tree == null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> ^( TOK_UNIONALL $b) )+ (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )? -> {o==null && c==null && d==null && sort==null && win==null && l==null && !topLevel}? -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) ) )
			// grammar/HiveParser.g:2394:4: (u= setOperator b= simpleSelectStatement -> {$setOpSelectStatement.tree != null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && u.tree.getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( TOK_UNIONALL $b) -> {$setOpSelectStatement.tree == null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> ^( TOK_UNIONALL $b) )+ (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )?
			{
			// grammar/HiveParser.g:2394:4: (u= setOperator b= simpleSelectStatement -> {$setOpSelectStatement.tree != null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && u.tree.getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( TOK_UNIONALL $b) -> {$setOpSelectStatement.tree == null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> ^( TOK_UNIONALL $b) )+
			int cnt264=0;
			loop264:
			while (true) {
				int alt264=2;
				int LA264_0 = input.LA(1);
				if ( (LA264_0==KW_UNION) ) {
					alt264=1;
				}

				switch (alt264) {
				case 1 :
					// grammar/HiveParser.g:2394:5: u= setOperator b= simpleSelectStatement
					{
					pushFollow(FOLLOW_setOperator_in_setOpSelectStatement15353);
					u=setOperator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_setOperator.add(u.getTree());
					pushFollow(FOLLOW_simpleSelectStatement_in_setOpSelectStatement15357);
					b=simpleSelectStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_simpleSelectStatement.add(b.getTree());
					// AST REWRITE
					// elements: b, b, b, b
					// token labels: 
					// rule labels: b, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2395:4: -> {$setOpSelectStatement.tree != null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
					if (retval.tree != null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT) {
						// grammar/HiveParser.g:2396:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
						// grammar/HiveParser.g:2397:11: ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
						// grammar/HiveParser.g:2398:13: ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) )
						{
						CommonTree root_3 = (CommonTree)adaptor.nil();
						root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
						// grammar/HiveParser.g:2399:15: ^( TOK_UNIONALL $b)
						{
						CommonTree root_4 = (CommonTree)adaptor.nil();
						root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL"), root_4);
						adaptor.addChild(root_4, retval.tree);
						adaptor.addChild(root_4, stream_b.nextTree());
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						// grammar/HiveParser.g:2403:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
						// grammar/HiveParser.g:2404:14: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
						{
						CommonTree root_3 = (CommonTree)adaptor.nil();
						root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
						// grammar/HiveParser.g:2404:32: ^( TOK_DIR TOK_TMP_FILE )
						{
						CommonTree root_4 = (CommonTree)adaptor.nil();
						root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
						adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						// grammar/HiveParser.g:2405:14: ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) )
						{
						CommonTree root_3 = (CommonTree)adaptor.nil();
						root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELECTDI, "TOK_SELECTDI"), root_3);
						// grammar/HiveParser.g:2405:29: ^( TOK_SELEXPR TOK_ALLCOLREF )
						{
						CommonTree root_4 = (CommonTree)adaptor.nil();
						root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
						adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}

					else // 2408:4: -> {$setOpSelectStatement.tree != null && u.tree.getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( TOK_UNIONALL $b)
					if (retval.tree != null && ((CommonTree)u.getTree()).getType()!=HiveParser.TOK_UNIONDISTINCT) {
						// grammar/HiveParser.g:2409:7: ^( TOK_UNIONALL $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL"), root_1);
						adaptor.addChild(root_1, retval.tree);
						adaptor.addChild(root_1, stream_b.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}

					else // 2410:4: -> {$setOpSelectStatement.tree == null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
					if (retval.tree == null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT) {
						// grammar/HiveParser.g:2411:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
						// grammar/HiveParser.g:2412:11: ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
						// grammar/HiveParser.g:2413:13: ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) )
						{
						CommonTree root_3 = (CommonTree)adaptor.nil();
						root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
						// grammar/HiveParser.g:2414:15: ^( TOK_UNIONALL $b)
						{
						CommonTree root_4 = (CommonTree)adaptor.nil();
						root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL"), root_4);
						adaptor.addChild(root_4, t);
						adaptor.addChild(root_4, stream_b.nextTree());
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						// grammar/HiveParser.g:2418:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
						// grammar/HiveParser.g:2419:13: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
						{
						CommonTree root_3 = (CommonTree)adaptor.nil();
						root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
						// grammar/HiveParser.g:2419:31: ^( TOK_DIR TOK_TMP_FILE )
						{
						CommonTree root_4 = (CommonTree)adaptor.nil();
						root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
						adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						// grammar/HiveParser.g:2420:13: ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) )
						{
						CommonTree root_3 = (CommonTree)adaptor.nil();
						root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELECTDI, "TOK_SELECTDI"), root_3);
						// grammar/HiveParser.g:2420:28: ^( TOK_SELEXPR TOK_ALLCOLREF )
						{
						CommonTree root_4 = (CommonTree)adaptor.nil();
						root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
						adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}

					else // 2423:4: -> ^( TOK_UNIONALL $b)
					{
						// grammar/HiveParser.g:2423:7: ^( TOK_UNIONALL $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL"), root_1);
						adaptor.addChild(root_1, t);
						adaptor.addChild(root_1, stream_b.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

				default :
					if ( cnt264 >= 1 ) break loop264;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(264, input);
					throw eee;
				}
				cnt264++;
			}

			// grammar/HiveParser.g:2425:5: (o= orderByClause )?
			int alt265=2;
			int LA265_0 = input.LA(1);
			if ( (LA265_0==KW_ORDER) ) {
				alt265=1;
			}
			switch (alt265) {
				case 1 :
					// grammar/HiveParser.g:2425:5: o= orderByClause
					{
					pushFollow(FOLLOW_orderByClause_in_setOpSelectStatement15784);
					o=orderByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orderByClause.add(o.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2426:5: (c= clusterByClause )?
			int alt266=2;
			int LA266_0 = input.LA(1);
			if ( (LA266_0==KW_CLUSTER) ) {
				alt266=1;
			}
			switch (alt266) {
				case 1 :
					// grammar/HiveParser.g:2426:5: c= clusterByClause
					{
					pushFollow(FOLLOW_clusterByClause_in_setOpSelectStatement15792);
					c=clusterByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clusterByClause.add(c.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2427:5: (d= distributeByClause )?
			int alt267=2;
			int LA267_0 = input.LA(1);
			if ( (LA267_0==KW_DISTRIBUTE) ) {
				alt267=1;
			}
			switch (alt267) {
				case 1 :
					// grammar/HiveParser.g:2427:5: d= distributeByClause
					{
					pushFollow(FOLLOW_distributeByClause_in_setOpSelectStatement15800);
					d=distributeByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_distributeByClause.add(d.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2428:8: (sort= sortByClause )?
			int alt268=2;
			int LA268_0 = input.LA(1);
			if ( (LA268_0==KW_SORT) ) {
				alt268=1;
			}
			switch (alt268) {
				case 1 :
					// grammar/HiveParser.g:2428:8: sort= sortByClause
					{
					pushFollow(FOLLOW_sortByClause_in_setOpSelectStatement15808);
					sort=sortByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_sortByClause.add(sort.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2429:7: (win= window_clause )?
			int alt269=2;
			int LA269_0 = input.LA(1);
			if ( (LA269_0==KW_WINDOW) ) {
				alt269=1;
			}
			switch (alt269) {
				case 1 :
					// grammar/HiveParser.g:2429:7: win= window_clause
					{
					pushFollow(FOLLOW_window_clause_in_setOpSelectStatement15816);
					win=window_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_window_clause.add(win.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2430:5: (l= limitClause )?
			int alt270=2;
			int LA270_0 = input.LA(1);
			if ( (LA270_0==KW_LIMIT) ) {
				alt270=1;
			}
			switch (alt270) {
				case 1 :
					// grammar/HiveParser.g:2430:5: l= limitClause
					{
					pushFollow(FOLLOW_limitClause_in_setOpSelectStatement15824);
					l=limitClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_limitClause.add(l.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: o, sort, c, d, win, l
			// token labels: 
			// rule labels: c, d, sort, l, win, retval, o
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.getTree():null);
			RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.getTree():null);
			RewriteRuleSubtreeStream stream_sort=new RewriteRuleSubtreeStream(adaptor,"rule sort",sort!=null?sort.getTree():null);
			RewriteRuleSubtreeStream stream_l=new RewriteRuleSubtreeStream(adaptor,"rule l",l!=null?l.getTree():null);
			RewriteRuleSubtreeStream stream_win=new RewriteRuleSubtreeStream(adaptor,"rule win",win!=null?win.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2431:4: -> {o==null && c==null && d==null && sort==null && win==null && l==null && !topLevel}?
			if (o==null && c==null && d==null && sort==null && win==null && l==null && !topLevel) {
				adaptor.addChild(root_0, retval.tree);
			}

			else // 2433:4: -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) )
			{
				// grammar/HiveParser.g:2433:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				// grammar/HiveParser.g:2434:11: ^( TOK_FROM ^( TOK_SUBQUERY ) )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
				// grammar/HiveParser.g:2435:13: ^( TOK_SUBQUERY )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
				adaptor.addChild(root_3, retval.tree);
				adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				// grammar/HiveParser.g:2440:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// grammar/HiveParser.g:2441:14: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// grammar/HiveParser.g:2441:32: ^( TOK_DIR TOK_TMP_FILE )
				{
				CommonTree root_4 = (CommonTree)adaptor.nil();
				root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				// grammar/HiveParser.g:2442:14: ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_3);
				// grammar/HiveParser.g:2442:27: ^( TOK_SELEXPR TOK_ALLCOLREF )
				{
				CommonTree root_4 = (CommonTree)adaptor.nil();
				root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
				adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				// grammar/HiveParser.g:2443:15: ( $o)?
				if ( stream_o.hasNext() ) {
					adaptor.addChild(root_2, stream_o.nextTree());
				}
				stream_o.reset();

				// grammar/HiveParser.g:2443:19: ( $c)?
				if ( stream_c.hasNext() ) {
					adaptor.addChild(root_2, stream_c.nextTree());
				}
				stream_c.reset();

				// grammar/HiveParser.g:2443:23: ( $d)?
				if ( stream_d.hasNext() ) {
					adaptor.addChild(root_2, stream_d.nextTree());
				}
				stream_d.reset();

				// grammar/HiveParser.g:2443:27: ( $sort)?
				if ( stream_sort.hasNext() ) {
					adaptor.addChild(root_2, stream_sort.nextTree());
				}
				stream_sort.reset();

				// grammar/HiveParser.g:2443:34: ( $win)?
				if ( stream_win.hasNext() ) {
					adaptor.addChild(root_2, stream_win.nextTree());
				}
				stream_win.reset();

				// grammar/HiveParser.g:2443:40: ( $l)?
				if ( stream_l.hasNext() ) {
					adaptor.addChild(root_2, stream_l.nextTree());
				}
				stream_l.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setOpSelectStatement"


	public static class simpleSelectStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "simpleSelectStatement"
	// grammar/HiveParser.g:2448:1: simpleSelectStatement : selectClause ( fromClause )? ( whereClause )? ( groupByClause )? ( havingClause )? ( ( window_clause )=> window_clause )? -> ^( TOK_QUERY ( fromClause )? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ) ) ;
	public final HiveParser.simpleSelectStatement_return simpleSelectStatement() throws RecognitionException {
		HiveParser.simpleSelectStatement_return retval = new HiveParser.simpleSelectStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope selectClause886 =null;
		ParserRuleReturnScope fromClause887 =null;
		ParserRuleReturnScope whereClause888 =null;
		ParserRuleReturnScope groupByClause889 =null;
		ParserRuleReturnScope havingClause890 =null;
		ParserRuleReturnScope window_clause891 =null;

		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
		RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
		RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");

		try {
			// grammar/HiveParser.g:2449:4: ( selectClause ( fromClause )? ( whereClause )? ( groupByClause )? ( havingClause )? ( ( window_clause )=> window_clause )? -> ^( TOK_QUERY ( fromClause )? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ) ) )
			// grammar/HiveParser.g:2450:4: selectClause ( fromClause )? ( whereClause )? ( groupByClause )? ( havingClause )? ( ( window_clause )=> window_clause )?
			{
			pushFollow(FOLLOW_selectClause_in_simpleSelectStatement16070);
			selectClause886=selectClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_selectClause.add(selectClause886.getTree());
			// grammar/HiveParser.g:2451:4: ( fromClause )?
			int alt271=2;
			int LA271_0 = input.LA(1);
			if ( (LA271_0==KW_FROM) ) {
				alt271=1;
			}
			switch (alt271) {
				case 1 :
					// grammar/HiveParser.g:2451:4: fromClause
					{
					pushFollow(FOLLOW_fromClause_in_simpleSelectStatement16075);
					fromClause887=fromClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fromClause.add(fromClause887.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2452:4: ( whereClause )?
			int alt272=2;
			int LA272_0 = input.LA(1);
			if ( (LA272_0==KW_WHERE) ) {
				alt272=1;
			}
			switch (alt272) {
				case 1 :
					// grammar/HiveParser.g:2452:4: whereClause
					{
					pushFollow(FOLLOW_whereClause_in_simpleSelectStatement16081);
					whereClause888=whereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_whereClause.add(whereClause888.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2453:4: ( groupByClause )?
			int alt273=2;
			int LA273_0 = input.LA(1);
			if ( (LA273_0==KW_GROUP) ) {
				alt273=1;
			}
			switch (alt273) {
				case 1 :
					// grammar/HiveParser.g:2453:4: groupByClause
					{
					pushFollow(FOLLOW_groupByClause_in_simpleSelectStatement16087);
					groupByClause889=groupByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_groupByClause.add(groupByClause889.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2454:4: ( havingClause )?
			int alt274=2;
			int LA274_0 = input.LA(1);
			if ( (LA274_0==KW_HAVING) ) {
				alt274=1;
			}
			switch (alt274) {
				case 1 :
					// grammar/HiveParser.g:2454:4: havingClause
					{
					pushFollow(FOLLOW_havingClause_in_simpleSelectStatement16093);
					havingClause890=havingClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_havingClause.add(havingClause890.getTree());
					}
					break;

			}

			// grammar/HiveParser.g:2455:4: ( ( window_clause )=> window_clause )?
			int alt275=2;
			int LA275_0 = input.LA(1);
			if ( (LA275_0==KW_WINDOW) ) {
				switch ( input.LA(2) ) {
					case Identifier:
						{
						int LA275_10 = input.LA(3);
						if ( (LA275_10==KW_AS) ) {
							int LA275_13 = input.LA(4);
							if ( (synpred22_HiveParser()) ) {
								alt275=1;
							}
						}
						}
						break;
					case KW_ABORT:
					case KW_ADD:
					case KW_ADMIN:
					case KW_AFTER:
					case KW_ANALYZE:
					case KW_ARCHIVE:
					case KW_ASC:
					case KW_AUTOCOMMIT:
					case KW_BEFORE:
					case KW_BUCKET:
					case KW_BUCKETS:
					case KW_CASCADE:
					case KW_CHANGE:
					case KW_CLUSTER:
					case KW_CLUSTERED:
					case KW_CLUSTERSTATUS:
					case KW_COLLECTION:
					case KW_COLUMNS:
					case KW_COMMENT:
					case KW_COMPACT:
					case KW_COMPACTIONS:
					case KW_COMPUTE:
					case KW_CONCATENATE:
					case KW_CONTINUE:
					case KW_DATA:
					case KW_DATABASES:
					case KW_DATETIME:
					case KW_DAY:
					case KW_DBPROPERTIES:
					case KW_DEFERRED:
					case KW_DEFINED:
					case KW_DELIMITED:
					case KW_DEPENDENCY:
					case KW_DESC:
					case KW_DIRECTORIES:
					case KW_DIRECTORY:
					case KW_DISABLE:
					case KW_DISTRIBUTE:
					case KW_ELEM_TYPE:
					case KW_ENABLE:
					case KW_ESCAPED:
					case KW_EXCLUSIVE:
					case KW_EXPLAIN:
					case KW_EXPORT:
					case KW_FIELDS:
					case KW_FILE:
					case KW_FILEFORMAT:
					case KW_FIRST:
					case KW_FORMAT:
					case KW_FORMATTED:
					case KW_FUNCTIONS:
					case KW_HOUR:
					case KW_IDXPROPERTIES:
					case KW_INDEX:
					case KW_INDEXES:
					case KW_INPATH:
					case KW_INPUTDRIVER:
					case KW_INPUTFORMAT:
					case KW_ISOLATION:
					case KW_ITEMS:
					case KW_JAR:
					case KW_KEY:
					case KW_KEYS:
					case KW_KEY_TYPE:
					case KW_LAST:
					case KW_LEVEL:
					case KW_LIMIT:
					case KW_LINES:
					case KW_LOAD:
					case KW_LOCATION:
					case KW_LOCK:
					case KW_LOCKS:
					case KW_LOGICAL:
					case KW_LONG:
					case KW_MAPJOIN:
					case KW_MATERIALIZED:
					case KW_METADATA:
					case KW_MINUS:
					case KW_MINUTE:
					case KW_MONTH:
					case KW_MSCK:
					case KW_NORELY:
					case KW_NOSCAN:
					case KW_NOVALIDATE:
					case KW_NULLS:
					case KW_OFFSET:
					case KW_OPTION:
					case KW_OUTPUTDRIVER:
					case KW_OUTPUTFORMAT:
					case KW_OVERWRITE:
					case KW_OWNER:
					case KW_PARTITIONED:
					case KW_PARTITIONS:
					case KW_PLUS:
					case KW_PRETTY:
					case KW_PRINCIPALS:
					case KW_PURGE:
					case KW_READ:
					case KW_REBUILD:
					case KW_RECORDREADER:
					case KW_RECORDWRITER:
					case KW_RELOAD:
					case KW_RELY:
					case KW_RENAME:
					case KW_REPAIR:
					case KW_REPLACE:
					case KW_REPLICATION:
					case KW_RESTRICT:
					case KW_REWRITE:
					case KW_ROLE:
					case KW_ROLES:
					case KW_SCHEMA:
					case KW_SCHEMAS:
					case KW_SECOND:
					case KW_SEMI:
					case KW_SERDE:
					case KW_SERDEPROPERTIES:
					case KW_SERVER:
					case KW_SETS:
					case KW_SHARED:
					case KW_SHOW:
					case KW_SHOW_DATABASE:
					case KW_SKEWED:
					case KW_SNAPSHOT:
					case KW_SORT:
					case KW_SORTED:
					case KW_SSL:
					case KW_STATISTICS:
					case KW_STORED:
					case KW_STREAMTABLE:
					case KW_STRING:
					case KW_STRUCT:
					case KW_TABLES:
					case KW_TBLPROPERTIES:
					case KW_TEMPORARY:
					case KW_TERMINATED:
					case KW_TINYINT:
					case KW_TOUCH:
					case KW_TRANSACTION:
					case KW_TRANSACTIONS:
					case KW_UNARCHIVE:
					case KW_UNDO:
					case KW_UNIONTYPE:
					case KW_UNLOCK:
					case KW_UNSET:
					case KW_UNSIGNED:
					case KW_URI:
					case KW_USE:
					case KW_UTC:
					case KW_UTCTIMESTAMP:
					case KW_VALIDATE:
					case KW_VALUE_TYPE:
					case KW_VIEW:
					case KW_WHILE:
					case KW_WORK:
					case KW_WRITE:
					case KW_YEAR:
					case KW_HOLD_DDLTIME:
					case KW_IGNORE:
					case KW_NO_DROP:
					case KW_OFFLINE:
					case KW_PROTECTION:
					case KW_READONLY:
						{
						int LA275_11 = input.LA(3);
						if ( (LA275_11==KW_AS) ) {
							int LA275_14 = input.LA(4);
							if ( (synpred22_HiveParser()) ) {
								alt275=1;
							}
						}
						}
						break;
					case KW_ALL:
					case KW_ALTER:
					case KW_ARRAY:
					case KW_AS:
					case KW_AUTHORIZATION:
					case KW_BETWEEN:
					case KW_BIGINT:
					case KW_BINARY:
					case KW_BOOLEAN:
					case KW_BOTH:
					case KW_BY:
					case KW_CONSTRAINT:
					case KW_CREATE:
					case KW_CUBE:
					case KW_CURRENT_DATE:
					case KW_CURRENT_TIMESTAMP:
					case KW_CURSOR:
					case KW_DATE:
					case KW_DECIMAL:
					case KW_DELETE:
					case KW_DESCRIBE:
					case KW_DOUBLE:
					case KW_DROP:
					case KW_EXISTS:
					case KW_EXTERNAL:
					case KW_FALSE:
					case KW_FETCH:
					case KW_FLOAT:
					case KW_FOR:
					case KW_FOREIGN:
					case KW_FULL:
					case KW_GRANT:
					case KW_GROUP:
					case KW_GROUPING:
					case KW_IMPORT:
					case KW_IN:
					case KW_INNER:
					case KW_INSERT:
					case KW_INT:
					case KW_INTERSECT:
					case KW_INTO:
					case KW_IS:
					case KW_LATERAL:
					case KW_LEFT:
					case KW_LIKE:
					case KW_LOCAL:
					case KW_NONE:
					case KW_NULL:
					case KW_OF:
					case KW_ORDER:
					case KW_OUT:
					case KW_OUTER:
					case KW_PARTITION:
					case KW_PERCENT:
					case KW_PRIMARY:
					case KW_PROCEDURE:
					case KW_RANGE:
					case KW_READS:
					case KW_REFERENCES:
					case KW_REGEXP:
					case KW_REVOKE:
					case KW_RIGHT:
					case KW_RLIKE:
					case KW_ROLLUP:
					case KW_ROW:
					case KW_ROWS:
					case KW_SET:
					case KW_SMALLINT:
					case KW_TABLE:
					case KW_TIMESTAMP:
					case KW_TO:
					case KW_TRIGGER:
					case KW_TRUE:
					case KW_TRUNCATE:
					case KW_UNION:
					case KW_UPDATE:
					case KW_USER:
					case KW_USING:
					case KW_VALUES:
					case KW_WITH:
						{
						int LA275_12 = input.LA(3);
						if ( (LA275_12==KW_AS) ) {
							int LA275_15 = input.LA(4);
							if ( (synpred22_HiveParser()) ) {
								alt275=1;
							}
						}
						}
						break;
				}
			}
			switch (alt275) {
				case 1 :
					// grammar/HiveParser.g:2455:5: ( window_clause )=> window_clause
					{
					pushFollow(FOLLOW_window_clause_in_simpleSelectStatement16106);
					window_clause891=window_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_window_clause.add(window_clause891.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: selectClause, window_clause, havingClause, fromClause, whereClause, groupByClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2456:4: -> ^( TOK_QUERY ( fromClause )? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ) )
			{
				// grammar/HiveParser.g:2456:7: ^( TOK_QUERY ( fromClause )? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				// grammar/HiveParser.g:2456:19: ( fromClause )?
				if ( stream_fromClause.hasNext() ) {
					adaptor.addChild(root_1, stream_fromClause.nextTree());
				}
				stream_fromClause.reset();

				// grammar/HiveParser.g:2456:31: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// grammar/HiveParser.g:2456:44: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// grammar/HiveParser.g:2456:62: ^( TOK_DIR TOK_TMP_FILE )
				{
				CommonTree root_4 = (CommonTree)adaptor.nil();
				root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_2, stream_selectClause.nextTree());
				// grammar/HiveParser.g:2457:35: ( whereClause )?
				if ( stream_whereClause.hasNext() ) {
					adaptor.addChild(root_2, stream_whereClause.nextTree());
				}
				stream_whereClause.reset();

				// grammar/HiveParser.g:2457:48: ( groupByClause )?
				if ( stream_groupByClause.hasNext() ) {
					adaptor.addChild(root_2, stream_groupByClause.nextTree());
				}
				stream_groupByClause.reset();

				// grammar/HiveParser.g:2457:63: ( havingClause )?
				if ( stream_havingClause.hasNext() ) {
					adaptor.addChild(root_2, stream_havingClause.nextTree());
				}
				stream_havingClause.reset();

				// grammar/HiveParser.g:2457:77: ( window_clause )?
				if ( stream_window_clause.hasNext() ) {
					adaptor.addChild(root_2, stream_window_clause.nextTree());
				}
				stream_window_clause.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "simpleSelectStatement"


	public static class selectStatementWithCTE_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectStatementWithCTE"
	// grammar/HiveParser.g:2460:1: selectStatementWithCTE : (w= withClause )? selectStatement[true] -> selectStatement ;
	public final HiveParser.selectStatementWithCTE_return selectStatementWithCTE() throws RecognitionException {
		HiveParser.selectStatementWithCTE_return retval = new HiveParser.selectStatementWithCTE_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope w =null;
		ParserRuleReturnScope selectStatement892 =null;

		RewriteRuleSubtreeStream stream_withClause=new RewriteRuleSubtreeStream(adaptor,"rule withClause");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");

		try {
			// grammar/HiveParser.g:2461:5: ( (w= withClause )? selectStatement[true] -> selectStatement )
			// grammar/HiveParser.g:2462:5: (w= withClause )? selectStatement[true]
			{
			// grammar/HiveParser.g:2462:5: (w= withClause )?
			int alt276=2;
			int LA276_0 = input.LA(1);
			if ( (LA276_0==KW_WITH) ) {
				alt276=1;
			}
			switch (alt276) {
				case 1 :
					// grammar/HiveParser.g:2462:6: w= withClause
					{
					pushFollow(FOLLOW_withClause_in_selectStatementWithCTE16192);
					w=withClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_withClause.add(w.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_selectStatement_in_selectStatementWithCTE16200);
			selectStatement892=selectStatement(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_selectStatement.add(selectStatement892.getTree());
			if ( state.backtracking==0 ) {
			      if ((w!=null?((CommonTree)w.getTree()):null) != null) {
			      (selectStatement892!=null?((CommonTree)selectStatement892.getTree()):null).insertChild(0, (w!=null?((CommonTree)w.getTree()):null));
			      }
			    }
			// AST REWRITE
			// elements: selectStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2468:5: -> selectStatement
			{
				adaptor.addChild(root_0, stream_selectStatement.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectStatementWithCTE"


	public static class body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "body"
	// grammar/HiveParser.g:2471:1: body : ( insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) | selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) );
	public final HiveParser.body_return body() throws RecognitionException {
		HiveParser.body_return retval = new HiveParser.body_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope insertClause893 =null;
		ParserRuleReturnScope selectClause894 =null;
		ParserRuleReturnScope lateralView895 =null;
		ParserRuleReturnScope whereClause896 =null;
		ParserRuleReturnScope groupByClause897 =null;
		ParserRuleReturnScope havingClause898 =null;
		ParserRuleReturnScope orderByClause899 =null;
		ParserRuleReturnScope clusterByClause900 =null;
		ParserRuleReturnScope distributeByClause901 =null;
		ParserRuleReturnScope sortByClause902 =null;
		ParserRuleReturnScope window_clause903 =null;
		ParserRuleReturnScope limitClause904 =null;
		ParserRuleReturnScope selectClause905 =null;
		ParserRuleReturnScope lateralView906 =null;
		ParserRuleReturnScope whereClause907 =null;
		ParserRuleReturnScope groupByClause908 =null;
		ParserRuleReturnScope havingClause909 =null;
		ParserRuleReturnScope orderByClause910 =null;
		ParserRuleReturnScope clusterByClause911 =null;
		ParserRuleReturnScope distributeByClause912 =null;
		ParserRuleReturnScope sortByClause913 =null;
		ParserRuleReturnScope window_clause914 =null;
		ParserRuleReturnScope limitClause915 =null;

		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
		RewriteRuleSubtreeStream stream_lateralView=new RewriteRuleSubtreeStream(adaptor,"rule lateralView");
		RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
		RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
		RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
		RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
		RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
		RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");

		try {
			// grammar/HiveParser.g:2472:4: ( insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) | selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) )
			int alt297=2;
			int LA297_0 = input.LA(1);
			if ( (LA297_0==KW_INSERT) ) {
				alt297=1;
			}
			else if ( (LA297_0==KW_MAP||LA297_0==KW_REDUCE||LA297_0==KW_SELECT) ) {
				alt297=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 297, 0, input);
				throw nvae;
			}

			switch (alt297) {
				case 1 :
					// grammar/HiveParser.g:2473:4: insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )?
					{
					pushFollow(FOLLOW_insertClause_in_body16231);
					insertClause893=insertClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_insertClause.add(insertClause893.getTree());
					pushFollow(FOLLOW_selectClause_in_body16236);
					selectClause894=selectClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_selectClause.add(selectClause894.getTree());
					// grammar/HiveParser.g:2475:4: ( lateralView )?
					int alt277=2;
					int LA277_0 = input.LA(1);
					if ( (LA277_0==KW_LATERAL) ) {
						alt277=1;
					}
					switch (alt277) {
						case 1 :
							// grammar/HiveParser.g:2475:4: lateralView
							{
							pushFollow(FOLLOW_lateralView_in_body16241);
							lateralView895=lateralView();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_lateralView.add(lateralView895.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2476:4: ( whereClause )?
					int alt278=2;
					int LA278_0 = input.LA(1);
					if ( (LA278_0==KW_WHERE) ) {
						alt278=1;
					}
					switch (alt278) {
						case 1 :
							// grammar/HiveParser.g:2476:4: whereClause
							{
							pushFollow(FOLLOW_whereClause_in_body16247);
							whereClause896=whereClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_whereClause.add(whereClause896.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2477:4: ( groupByClause )?
					int alt279=2;
					int LA279_0 = input.LA(1);
					if ( (LA279_0==KW_GROUP) ) {
						alt279=1;
					}
					switch (alt279) {
						case 1 :
							// grammar/HiveParser.g:2477:4: groupByClause
							{
							pushFollow(FOLLOW_groupByClause_in_body16253);
							groupByClause897=groupByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_groupByClause.add(groupByClause897.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2478:4: ( havingClause )?
					int alt280=2;
					int LA280_0 = input.LA(1);
					if ( (LA280_0==KW_HAVING) ) {
						alt280=1;
					}
					switch (alt280) {
						case 1 :
							// grammar/HiveParser.g:2478:4: havingClause
							{
							pushFollow(FOLLOW_havingClause_in_body16259);
							havingClause898=havingClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_havingClause.add(havingClause898.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2479:4: ( orderByClause )?
					int alt281=2;
					int LA281_0 = input.LA(1);
					if ( (LA281_0==KW_ORDER) ) {
						alt281=1;
					}
					switch (alt281) {
						case 1 :
							// grammar/HiveParser.g:2479:4: orderByClause
							{
							pushFollow(FOLLOW_orderByClause_in_body16265);
							orderByClause899=orderByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause899.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2480:4: ( clusterByClause )?
					int alt282=2;
					int LA282_0 = input.LA(1);
					if ( (LA282_0==KW_CLUSTER) ) {
						alt282=1;
					}
					switch (alt282) {
						case 1 :
							// grammar/HiveParser.g:2480:4: clusterByClause
							{
							pushFollow(FOLLOW_clusterByClause_in_body16271);
							clusterByClause900=clusterByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_clusterByClause.add(clusterByClause900.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2481:4: ( distributeByClause )?
					int alt283=2;
					int LA283_0 = input.LA(1);
					if ( (LA283_0==KW_DISTRIBUTE) ) {
						alt283=1;
					}
					switch (alt283) {
						case 1 :
							// grammar/HiveParser.g:2481:4: distributeByClause
							{
							pushFollow(FOLLOW_distributeByClause_in_body16277);
							distributeByClause901=distributeByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_distributeByClause.add(distributeByClause901.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2482:4: ( sortByClause )?
					int alt284=2;
					int LA284_0 = input.LA(1);
					if ( (LA284_0==KW_SORT) ) {
						alt284=1;
					}
					switch (alt284) {
						case 1 :
							// grammar/HiveParser.g:2482:4: sortByClause
							{
							pushFollow(FOLLOW_sortByClause_in_body16283);
							sortByClause902=sortByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_sortByClause.add(sortByClause902.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2483:4: ( window_clause )?
					int alt285=2;
					int LA285_0 = input.LA(1);
					if ( (LA285_0==KW_WINDOW) ) {
						alt285=1;
					}
					switch (alt285) {
						case 1 :
							// grammar/HiveParser.g:2483:4: window_clause
							{
							pushFollow(FOLLOW_window_clause_in_body16289);
							window_clause903=window_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_window_clause.add(window_clause903.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2484:4: ( limitClause )?
					int alt286=2;
					int LA286_0 = input.LA(1);
					if ( (LA286_0==KW_LIMIT) ) {
						alt286=1;
					}
					switch (alt286) {
						case 1 :
							// grammar/HiveParser.g:2484:4: limitClause
							{
							pushFollow(FOLLOW_limitClause_in_body16295);
							limitClause904=limitClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_limitClause.add(limitClause904.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: whereClause, selectClause, sortByClause, groupByClause, window_clause, orderByClause, clusterByClause, limitClause, insertClause, havingClause, distributeByClause, lateralView
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2484:17: -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
					{
						// grammar/HiveParser.g:2484:20: ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);
						adaptor.addChild(root_1, stream_insertClause.nextTree());
						adaptor.addChild(root_1, stream_selectClause.nextTree());
						// grammar/HiveParser.g:2485:35: ( lateralView )?
						if ( stream_lateralView.hasNext() ) {
							adaptor.addChild(root_1, stream_lateralView.nextTree());
						}
						stream_lateralView.reset();

						// grammar/HiveParser.g:2485:48: ( whereClause )?
						if ( stream_whereClause.hasNext() ) {
							adaptor.addChild(root_1, stream_whereClause.nextTree());
						}
						stream_whereClause.reset();

						// grammar/HiveParser.g:2485:61: ( groupByClause )?
						if ( stream_groupByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_groupByClause.nextTree());
						}
						stream_groupByClause.reset();

						// grammar/HiveParser.g:2485:76: ( havingClause )?
						if ( stream_havingClause.hasNext() ) {
							adaptor.addChild(root_1, stream_havingClause.nextTree());
						}
						stream_havingClause.reset();

						// grammar/HiveParser.g:2485:90: ( orderByClause )?
						if ( stream_orderByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_orderByClause.nextTree());
						}
						stream_orderByClause.reset();

						// grammar/HiveParser.g:2485:105: ( clusterByClause )?
						if ( stream_clusterByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_clusterByClause.nextTree());
						}
						stream_clusterByClause.reset();

						// grammar/HiveParser.g:2486:22: ( distributeByClause )?
						if ( stream_distributeByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_distributeByClause.nextTree());
						}
						stream_distributeByClause.reset();

						// grammar/HiveParser.g:2486:42: ( sortByClause )?
						if ( stream_sortByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_sortByClause.nextTree());
						}
						stream_sortByClause.reset();

						// grammar/HiveParser.g:2486:56: ( window_clause )?
						if ( stream_window_clause.hasNext() ) {
							adaptor.addChild(root_1, stream_window_clause.nextTree());
						}
						stream_window_clause.reset();

						// grammar/HiveParser.g:2486:71: ( limitClause )?
						if ( stream_limitClause.hasNext() ) {
							adaptor.addChild(root_1, stream_limitClause.nextTree());
						}
						stream_limitClause.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2488:4: selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )?
					{
					pushFollow(FOLLOW_selectClause_in_body16388);
					selectClause905=selectClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_selectClause.add(selectClause905.getTree());
					// grammar/HiveParser.g:2489:4: ( lateralView )?
					int alt287=2;
					int LA287_0 = input.LA(1);
					if ( (LA287_0==KW_LATERAL) ) {
						alt287=1;
					}
					switch (alt287) {
						case 1 :
							// grammar/HiveParser.g:2489:4: lateralView
							{
							pushFollow(FOLLOW_lateralView_in_body16393);
							lateralView906=lateralView();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_lateralView.add(lateralView906.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2490:4: ( whereClause )?
					int alt288=2;
					int LA288_0 = input.LA(1);
					if ( (LA288_0==KW_WHERE) ) {
						alt288=1;
					}
					switch (alt288) {
						case 1 :
							// grammar/HiveParser.g:2490:4: whereClause
							{
							pushFollow(FOLLOW_whereClause_in_body16399);
							whereClause907=whereClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_whereClause.add(whereClause907.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2491:4: ( groupByClause )?
					int alt289=2;
					int LA289_0 = input.LA(1);
					if ( (LA289_0==KW_GROUP) ) {
						alt289=1;
					}
					switch (alt289) {
						case 1 :
							// grammar/HiveParser.g:2491:4: groupByClause
							{
							pushFollow(FOLLOW_groupByClause_in_body16405);
							groupByClause908=groupByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_groupByClause.add(groupByClause908.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2492:4: ( havingClause )?
					int alt290=2;
					int LA290_0 = input.LA(1);
					if ( (LA290_0==KW_HAVING) ) {
						alt290=1;
					}
					switch (alt290) {
						case 1 :
							// grammar/HiveParser.g:2492:4: havingClause
							{
							pushFollow(FOLLOW_havingClause_in_body16411);
							havingClause909=havingClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_havingClause.add(havingClause909.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2493:4: ( orderByClause )?
					int alt291=2;
					int LA291_0 = input.LA(1);
					if ( (LA291_0==KW_ORDER) ) {
						alt291=1;
					}
					switch (alt291) {
						case 1 :
							// grammar/HiveParser.g:2493:4: orderByClause
							{
							pushFollow(FOLLOW_orderByClause_in_body16417);
							orderByClause910=orderByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause910.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2494:4: ( clusterByClause )?
					int alt292=2;
					int LA292_0 = input.LA(1);
					if ( (LA292_0==KW_CLUSTER) ) {
						alt292=1;
					}
					switch (alt292) {
						case 1 :
							// grammar/HiveParser.g:2494:4: clusterByClause
							{
							pushFollow(FOLLOW_clusterByClause_in_body16423);
							clusterByClause911=clusterByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_clusterByClause.add(clusterByClause911.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2495:4: ( distributeByClause )?
					int alt293=2;
					int LA293_0 = input.LA(1);
					if ( (LA293_0==KW_DISTRIBUTE) ) {
						alt293=1;
					}
					switch (alt293) {
						case 1 :
							// grammar/HiveParser.g:2495:4: distributeByClause
							{
							pushFollow(FOLLOW_distributeByClause_in_body16429);
							distributeByClause912=distributeByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_distributeByClause.add(distributeByClause912.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2496:4: ( sortByClause )?
					int alt294=2;
					int LA294_0 = input.LA(1);
					if ( (LA294_0==KW_SORT) ) {
						alt294=1;
					}
					switch (alt294) {
						case 1 :
							// grammar/HiveParser.g:2496:4: sortByClause
							{
							pushFollow(FOLLOW_sortByClause_in_body16435);
							sortByClause913=sortByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_sortByClause.add(sortByClause913.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2497:4: ( window_clause )?
					int alt295=2;
					int LA295_0 = input.LA(1);
					if ( (LA295_0==KW_WINDOW) ) {
						alt295=1;
					}
					switch (alt295) {
						case 1 :
							// grammar/HiveParser.g:2497:4: window_clause
							{
							pushFollow(FOLLOW_window_clause_in_body16441);
							window_clause914=window_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_window_clause.add(window_clause914.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2498:4: ( limitClause )?
					int alt296=2;
					int LA296_0 = input.LA(1);
					if ( (LA296_0==KW_LIMIT) ) {
						alt296=1;
					}
					switch (alt296) {
						case 1 :
							// grammar/HiveParser.g:2498:4: limitClause
							{
							pushFollow(FOLLOW_limitClause_in_body16447);
							limitClause915=limitClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_limitClause.add(limitClause915.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: selectClause, limitClause, clusterByClause, groupByClause, sortByClause, havingClause, distributeByClause, lateralView, whereClause, orderByClause, window_clause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2498:17: -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
					{
						// grammar/HiveParser.g:2498:20: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);
						// grammar/HiveParser.g:2498:33: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_2);
						// grammar/HiveParser.g:2498:51: ^( TOK_DIR TOK_TMP_FILE )
						{
						CommonTree root_3 = (CommonTree)adaptor.nil();
						root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_3);
						adaptor.addChild(root_3, (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_1, stream_selectClause.nextTree());
						// grammar/HiveParser.g:2499:35: ( lateralView )?
						if ( stream_lateralView.hasNext() ) {
							adaptor.addChild(root_1, stream_lateralView.nextTree());
						}
						stream_lateralView.reset();

						// grammar/HiveParser.g:2499:48: ( whereClause )?
						if ( stream_whereClause.hasNext() ) {
							adaptor.addChild(root_1, stream_whereClause.nextTree());
						}
						stream_whereClause.reset();

						// grammar/HiveParser.g:2499:61: ( groupByClause )?
						if ( stream_groupByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_groupByClause.nextTree());
						}
						stream_groupByClause.reset();

						// grammar/HiveParser.g:2499:76: ( havingClause )?
						if ( stream_havingClause.hasNext() ) {
							adaptor.addChild(root_1, stream_havingClause.nextTree());
						}
						stream_havingClause.reset();

						// grammar/HiveParser.g:2499:90: ( orderByClause )?
						if ( stream_orderByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_orderByClause.nextTree());
						}
						stream_orderByClause.reset();

						// grammar/HiveParser.g:2499:105: ( clusterByClause )?
						if ( stream_clusterByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_clusterByClause.nextTree());
						}
						stream_clusterByClause.reset();

						// grammar/HiveParser.g:2500:22: ( distributeByClause )?
						if ( stream_distributeByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_distributeByClause.nextTree());
						}
						stream_distributeByClause.reset();

						// grammar/HiveParser.g:2500:42: ( sortByClause )?
						if ( stream_sortByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_sortByClause.nextTree());
						}
						stream_sortByClause.reset();

						// grammar/HiveParser.g:2500:56: ( window_clause )?
						if ( stream_window_clause.hasNext() ) {
							adaptor.addChild(root_1, stream_window_clause.nextTree());
						}
						stream_window_clause.reset();

						// grammar/HiveParser.g:2500:71: ( limitClause )?
						if ( stream_limitClause.hasNext() ) {
							adaptor.addChild(root_1, stream_limitClause.nextTree());
						}
						stream_limitClause.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "body"


	public static class insertClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "insertClause"
	// grammar/HiveParser.g:2503:1: insertClause : ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )? -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? ) );
	public final HiveParser.insertClause_return insertClause() throws RecognitionException {
		HiveParser.insertClause_return retval = new HiveParser.insertClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_INSERT916=null;
		Token KW_OVERWRITE917=null;
		Token KW_INSERT920=null;
		Token KW_INTO921=null;
		Token KW_TABLE922=null;
		Token LPAREN924=null;
		Token RPAREN925=null;
		ParserRuleReturnScope targetCols =null;
		ParserRuleReturnScope destination918 =null;
		ParserRuleReturnScope ifNotExists919 =null;
		ParserRuleReturnScope tableOrPartition923 =null;

		CommonTree KW_INSERT916_tree=null;
		CommonTree KW_OVERWRITE917_tree=null;
		CommonTree KW_INSERT920_tree=null;
		CommonTree KW_INTO921_tree=null;
		CommonTree KW_TABLE922_tree=null;
		CommonTree LPAREN924_tree=null;
		CommonTree RPAREN925_tree=null;
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
		RewriteRuleSubtreeStream stream_destination=new RewriteRuleSubtreeStream(adaptor,"rule destination");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg("insert clause", state); 
		try {
			// grammar/HiveParser.g:2506:4: ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )? -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? ) )
			int alt301=2;
			int LA301_0 = input.LA(1);
			if ( (LA301_0==KW_INSERT) ) {
				int LA301_1 = input.LA(2);
				if ( (LA301_1==KW_OVERWRITE) ) {
					alt301=1;
				}
				else if ( (LA301_1==KW_INTO) ) {
					alt301=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 301, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 301, 0, input);
				throw nvae;
			}

			switch (alt301) {
				case 1 :
					// grammar/HiveParser.g:2507:6: KW_INSERT KW_OVERWRITE destination ( ifNotExists )?
					{
					KW_INSERT916=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause16568); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT916);

					KW_OVERWRITE917=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_insertClause16570); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OVERWRITE.add(KW_OVERWRITE917);

					pushFollow(FOLLOW_destination_in_insertClause16572);
					destination918=destination();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_destination.add(destination918.getTree());
					// grammar/HiveParser.g:2507:41: ( ifNotExists )?
					int alt298=2;
					int LA298_0 = input.LA(1);
					if ( (LA298_0==KW_IF) ) {
						alt298=1;
					}
					switch (alt298) {
						case 1 :
							// grammar/HiveParser.g:2507:41: ifNotExists
							{
							pushFollow(FOLLOW_ifNotExists_in_insertClause16574);
							ifNotExists919=ifNotExists();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists919.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: destination, ifNotExists
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2507:54: -> ^( TOK_DESTINATION destination ( ifNotExists )? )
					{
						// grammar/HiveParser.g:2507:57: ^( TOK_DESTINATION destination ( ifNotExists )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_1);
						adaptor.addChild(root_1, stream_destination.nextTree());
						// grammar/HiveParser.g:2507:87: ( ifNotExists )?
						if ( stream_ifNotExists.hasNext() ) {
							adaptor.addChild(root_1, stream_ifNotExists.nextTree());
						}
						stream_ifNotExists.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2508:6: KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )?
					{
					KW_INSERT920=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause16593); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT920);

					KW_INTO921=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_insertClause16595); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO921);

					// grammar/HiveParser.g:2508:24: ( KW_TABLE )?
					int alt299=2;
					int LA299_0 = input.LA(1);
					if ( (LA299_0==KW_TABLE) ) {
						switch ( input.LA(2) ) {
							case Identifier:
							case KW_ABORT:
							case KW_ADD:
							case KW_ADMIN:
							case KW_AFTER:
							case KW_ALL:
							case KW_ALTER:
							case KW_ANALYZE:
							case KW_ARCHIVE:
							case KW_ARRAY:
							case KW_AS:
							case KW_ASC:
							case KW_AUTHORIZATION:
							case KW_AUTOCOMMIT:
							case KW_BEFORE:
							case KW_BETWEEN:
							case KW_BIGINT:
							case KW_BINARY:
							case KW_BOOLEAN:
							case KW_BOTH:
							case KW_BUCKET:
							case KW_BUCKETS:
							case KW_BY:
							case KW_CASCADE:
							case KW_CHANGE:
							case KW_CLUSTER:
							case KW_CLUSTERED:
							case KW_CLUSTERSTATUS:
							case KW_COLLECTION:
							case KW_COLUMNS:
							case KW_COMMENT:
							case KW_COMPACT:
							case KW_COMPACTIONS:
							case KW_COMPUTE:
							case KW_CONCATENATE:
							case KW_CONSTRAINT:
							case KW_CONTINUE:
							case KW_CREATE:
							case KW_CUBE:
							case KW_CURRENT_DATE:
							case KW_CURRENT_TIMESTAMP:
							case KW_CURSOR:
							case KW_DATA:
							case KW_DATABASES:
							case KW_DATE:
							case KW_DATETIME:
							case KW_DAY:
							case KW_DBPROPERTIES:
							case KW_DECIMAL:
							case KW_DEFERRED:
							case KW_DEFINED:
							case KW_DELETE:
							case KW_DELIMITED:
							case KW_DEPENDENCY:
							case KW_DESC:
							case KW_DESCRIBE:
							case KW_DIRECTORIES:
							case KW_DIRECTORY:
							case KW_DISABLE:
							case KW_DISTRIBUTE:
							case KW_DOUBLE:
							case KW_DROP:
							case KW_ELEM_TYPE:
							case KW_ENABLE:
							case KW_ESCAPED:
							case KW_EXCLUSIVE:
							case KW_EXISTS:
							case KW_EXPLAIN:
							case KW_EXPORT:
							case KW_EXTERNAL:
							case KW_FALSE:
							case KW_FETCH:
							case KW_FIELDS:
							case KW_FILE:
							case KW_FILEFORMAT:
							case KW_FIRST:
							case KW_FLOAT:
							case KW_FOR:
							case KW_FOREIGN:
							case KW_FORMAT:
							case KW_FORMATTED:
							case KW_FULL:
							case KW_FUNCTIONS:
							case KW_GRANT:
							case KW_GROUP:
							case KW_GROUPING:
							case KW_HOUR:
							case KW_IDXPROPERTIES:
							case KW_IMPORT:
							case KW_IN:
							case KW_INDEX:
							case KW_INDEXES:
							case KW_INNER:
							case KW_INPATH:
							case KW_INPUTDRIVER:
							case KW_INPUTFORMAT:
							case KW_INSERT:
							case KW_INT:
							case KW_INTERSECT:
							case KW_INTO:
							case KW_IS:
							case KW_ISOLATION:
							case KW_ITEMS:
							case KW_JAR:
							case KW_KEY:
							case KW_KEYS:
							case KW_KEY_TYPE:
							case KW_LAST:
							case KW_LATERAL:
							case KW_LEFT:
							case KW_LEVEL:
							case KW_LIKE:
							case KW_LIMIT:
							case KW_LINES:
							case KW_LOAD:
							case KW_LOCAL:
							case KW_LOCATION:
							case KW_LOCK:
							case KW_LOCKS:
							case KW_LOGICAL:
							case KW_LONG:
							case KW_MAPJOIN:
							case KW_MATERIALIZED:
							case KW_METADATA:
							case KW_MINUS:
							case KW_MINUTE:
							case KW_MONTH:
							case KW_MSCK:
							case KW_NONE:
							case KW_NORELY:
							case KW_NOSCAN:
							case KW_NOVALIDATE:
							case KW_NULL:
							case KW_NULLS:
							case KW_OF:
							case KW_OFFSET:
							case KW_OPTION:
							case KW_ORDER:
							case KW_OUT:
							case KW_OUTER:
							case KW_OUTPUTDRIVER:
							case KW_OUTPUTFORMAT:
							case KW_OVERWRITE:
							case KW_OWNER:
							case KW_PARTITIONED:
							case KW_PARTITIONS:
							case KW_PERCENT:
							case KW_PLUS:
							case KW_PRETTY:
							case KW_PRIMARY:
							case KW_PRINCIPALS:
							case KW_PROCEDURE:
							case KW_PURGE:
							case KW_RANGE:
							case KW_READ:
							case KW_READS:
							case KW_REBUILD:
							case KW_RECORDREADER:
							case KW_RECORDWRITER:
							case KW_REFERENCES:
							case KW_REGEXP:
							case KW_RELOAD:
							case KW_RELY:
							case KW_RENAME:
							case KW_REPAIR:
							case KW_REPLACE:
							case KW_REPLICATION:
							case KW_RESTRICT:
							case KW_REVOKE:
							case KW_REWRITE:
							case KW_RIGHT:
							case KW_RLIKE:
							case KW_ROLE:
							case KW_ROLES:
							case KW_ROLLUP:
							case KW_ROW:
							case KW_ROWS:
							case KW_SCHEMA:
							case KW_SCHEMAS:
							case KW_SECOND:
							case KW_SEMI:
							case KW_SERDE:
							case KW_SERDEPROPERTIES:
							case KW_SERVER:
							case KW_SET:
							case KW_SETS:
							case KW_SHARED:
							case KW_SHOW:
							case KW_SHOW_DATABASE:
							case KW_SKEWED:
							case KW_SMALLINT:
							case KW_SNAPSHOT:
							case KW_SORT:
							case KW_SORTED:
							case KW_SSL:
							case KW_STATISTICS:
							case KW_STORED:
							case KW_STREAMTABLE:
							case KW_STRING:
							case KW_STRUCT:
							case KW_TABLE:
							case KW_TABLES:
							case KW_TBLPROPERTIES:
							case KW_TEMPORARY:
							case KW_TERMINATED:
							case KW_TIMESTAMP:
							case KW_TINYINT:
							case KW_TO:
							case KW_TOUCH:
							case KW_TRANSACTION:
							case KW_TRANSACTIONS:
							case KW_TRIGGER:
							case KW_TRUE:
							case KW_TRUNCATE:
							case KW_UNARCHIVE:
							case KW_UNDO:
							case KW_UNION:
							case KW_UNIONTYPE:
							case KW_UNLOCK:
							case KW_UNSET:
							case KW_UNSIGNED:
							case KW_UPDATE:
							case KW_URI:
							case KW_USE:
							case KW_USER:
							case KW_USING:
							case KW_UTC:
							case KW_UTCTIMESTAMP:
							case KW_VALIDATE:
							case KW_VALUE_TYPE:
							case KW_VIEW:
							case KW_WHILE:
							case KW_WITH:
							case KW_WORK:
							case KW_WRITE:
							case KW_YEAR:
							case KW_HOLD_DDLTIME:
							case KW_IGNORE:
							case KW_NO_DROP:
							case KW_OFFLINE:
							case KW_PROTECTION:
							case KW_READONLY:
								{
								alt299=1;
								}
								break;
							case KW_PARTITION:
								{
								int LA299_7 = input.LA(3);
								if ( (LA299_7==LPAREN) ) {
									int LA299_16 = input.LA(4);
									if ( (!(((useSQL11ReservedKeywordsForIdentifier())))) ) {
										alt299=1;
									}
								}
								else if ( (LA299_7==DOT||LA299_7==KW_MAP||LA299_7==KW_PARTITION||LA299_7==KW_REDUCE||LA299_7==KW_SELECT||LA299_7==KW_VALUES) ) {
									alt299=1;
								}
								}
								break;
							case KW_VALUES:
								{
								int LA299_9 = input.LA(3);
								if ( (LA299_9==DOT||LA299_9==KW_MAP||LA299_9==KW_PARTITION||LA299_9==KW_REDUCE||LA299_9==KW_SELECT||LA299_9==KW_VALUES) ) {
									alt299=1;
								}
								else if ( (LA299_9==LPAREN) ) {
									int LA299_27 = input.LA(4);
									if ( (!(((useSQL11ReservedKeywordsForIdentifier())))) ) {
										alt299=1;
									}
								}
								}
								break;
						}
					}
					switch (alt299) {
						case 1 :
							// grammar/HiveParser.g:2508:24: KW_TABLE
							{
							KW_TABLE922=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_insertClause16597); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE922);

							}
							break;

					}

					pushFollow(FOLLOW_tableOrPartition_in_insertClause16600);
					tableOrPartition923=tableOrPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableOrPartition.add(tableOrPartition923.getTree());
					// grammar/HiveParser.g:2508:51: ( LPAREN targetCols= columnNameList RPAREN )?
					int alt300=2;
					int LA300_0 = input.LA(1);
					if ( (LA300_0==LPAREN) ) {
						alt300=1;
					}
					switch (alt300) {
						case 1 :
							// grammar/HiveParser.g:2508:52: LPAREN targetCols= columnNameList RPAREN
							{
							LPAREN924=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertClause16603); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN924);

							pushFollow(FOLLOW_columnNameList_in_insertClause16607);
							targetCols=columnNameList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnNameList.add(targetCols.getTree());
							RPAREN925=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertClause16609); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN925);

							}
							break;

					}

					// AST REWRITE
					// elements: targetCols, tableOrPartition
					// token labels: 
					// rule labels: targetCols, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_targetCols=new RewriteRuleSubtreeStream(adaptor,"rule targetCols",targetCols!=null?targetCols.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2509:8: -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? )
					{
						// grammar/HiveParser.g:2509:11: ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT_INTO, "TOK_INSERT_INTO"), root_1);
						adaptor.addChild(root_1, stream_tableOrPartition.nextTree());
						// grammar/HiveParser.g:2509:47: ( $targetCols)?
						if ( stream_targetCols.hasNext() ) {
							adaptor.addChild(root_1, stream_targetCols.nextTree());
						}
						stream_targetCols.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insertClause"


	public static class destination_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "destination"
	// grammar/HiveParser.g:2512:1: destination : ( (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )? -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? ) | KW_TABLE tableOrPartition -> tableOrPartition );
	public final HiveParser.destination_return destination() throws RecognitionException {
		HiveParser.destination_return retval = new HiveParser.destination_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token local=null;
		Token KW_DIRECTORY926=null;
		Token StringLiteral927=null;
		Token KW_TABLE930=null;
		ParserRuleReturnScope tableRowFormat928 =null;
		ParserRuleReturnScope tableFileFormat929 =null;
		ParserRuleReturnScope tableOrPartition931 =null;

		CommonTree local_tree=null;
		CommonTree KW_DIRECTORY926_tree=null;
		CommonTree StringLiteral927_tree=null;
		CommonTree KW_TABLE930_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_DIRECTORY=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORY");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 pushMsg("destination specification", state); 
		try {
			// grammar/HiveParser.g:2515:4: ( (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )? -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? ) | KW_TABLE tableOrPartition -> tableOrPartition )
			int alt305=2;
			int LA305_0 = input.LA(1);
			if ( (LA305_0==KW_DIRECTORY||LA305_0==KW_LOCAL) ) {
				alt305=1;
			}
			else if ( (LA305_0==KW_TABLE) ) {
				alt305=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 305, 0, input);
				throw nvae;
			}

			switch (alt305) {
				case 1 :
					// grammar/HiveParser.g:2516:6: (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )?
					{
					// grammar/HiveParser.g:2516:6: (local= KW_LOCAL )?
					int alt302=2;
					int LA302_0 = input.LA(1);
					if ( (LA302_0==KW_LOCAL) ) {
						alt302=1;
					}
					switch (alt302) {
						case 1 :
							// grammar/HiveParser.g:2516:7: local= KW_LOCAL
							{
							local=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_destination16665); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LOCAL.add(local);

							}
							break;

					}

					KW_DIRECTORY926=(Token)match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination16669); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DIRECTORY.add(KW_DIRECTORY926);

					StringLiteral927=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_destination16671); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral927);

					// grammar/HiveParser.g:2516:53: ( tableRowFormat )?
					int alt303=2;
					int LA303_0 = input.LA(1);
					if ( (LA303_0==KW_ROW) ) {
						alt303=1;
					}
					switch (alt303) {
						case 1 :
							// grammar/HiveParser.g:2516:53: tableRowFormat
							{
							pushFollow(FOLLOW_tableRowFormat_in_destination16673);
							tableRowFormat928=tableRowFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat928.getTree());
							}
							break;

					}

					// grammar/HiveParser.g:2516:69: ( tableFileFormat )?
					int alt304=2;
					int LA304_0 = input.LA(1);
					if ( (LA304_0==KW_STORED) ) {
						alt304=1;
					}
					switch (alt304) {
						case 1 :
							// grammar/HiveParser.g:2516:69: tableFileFormat
							{
							pushFollow(FOLLOW_tableFileFormat_in_destination16676);
							tableFileFormat929=tableFileFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat929.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: tableFileFormat, local, tableRowFormat, StringLiteral
					// token labels: local
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_local=new RewriteRuleTokenStream(adaptor,"token local",local);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2517:8: -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? )
					{
						// grammar/HiveParser.g:2517:11: ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						// grammar/HiveParser.g:2517:36: ( $local)?
						if ( stream_local.hasNext() ) {
							adaptor.addChild(root_1, stream_local.nextNode());
						}
						stream_local.reset();

						// grammar/HiveParser.g:2517:43: ( tableRowFormat )?
						if ( stream_tableRowFormat.hasNext() ) {
							adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
						}
						stream_tableRowFormat.reset();

						// grammar/HiveParser.g:2517:59: ( tableFileFormat )?
						if ( stream_tableFileFormat.hasNext() ) {
							adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
						}
						stream_tableFileFormat.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2518:6: KW_TABLE tableOrPartition
					{
					KW_TABLE930=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_destination16709); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE930);

					pushFollow(FOLLOW_tableOrPartition_in_destination16711);
					tableOrPartition931=tableOrPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableOrPartition.add(tableOrPartition931.getTree());
					// AST REWRITE
					// elements: tableOrPartition
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2518:32: -> tableOrPartition
					{
						adaptor.addChild(root_0, stream_tableOrPartition.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "destination"


	public static class limitClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "limitClause"
	// grammar/HiveParser.g:2521:1: limitClause : ( KW_LIMIT ( (offset= Number COMMA )? num= Number ) -> ^( TOK_LIMIT ( $offset)? $num) | KW_LIMIT num= Number KW_OFFSET offset= Number -> ^( TOK_LIMIT ( $offset)? $num) );
	public final HiveParser.limitClause_return limitClause() throws RecognitionException {
		HiveParser.limitClause_return retval = new HiveParser.limitClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token offset=null;
		Token num=null;
		Token KW_LIMIT932=null;
		Token COMMA933=null;
		Token KW_LIMIT934=null;
		Token KW_OFFSET935=null;

		CommonTree offset_tree=null;
		CommonTree num_tree=null;
		CommonTree KW_LIMIT932_tree=null;
		CommonTree COMMA933_tree=null;
		CommonTree KW_LIMIT934_tree=null;
		CommonTree KW_OFFSET935_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_LIMIT=new RewriteRuleTokenStream(adaptor,"token KW_LIMIT");
		RewriteRuleTokenStream stream_KW_OFFSET=new RewriteRuleTokenStream(adaptor,"token KW_OFFSET");

		 pushMsg("limit clause", state); 
		try {
			// grammar/HiveParser.g:2524:4: ( KW_LIMIT ( (offset= Number COMMA )? num= Number ) -> ^( TOK_LIMIT ( $offset)? $num) | KW_LIMIT num= Number KW_OFFSET offset= Number -> ^( TOK_LIMIT ( $offset)? $num) )
			int alt307=2;
			int LA307_0 = input.LA(1);
			if ( (LA307_0==KW_LIMIT) ) {
				int LA307_1 = input.LA(2);
				if ( (LA307_1==Number) ) {
					int LA307_2 = input.LA(3);
					if ( (LA307_2==KW_OFFSET) ) {
						alt307=2;
					}
					else if ( (LA307_2==EOF||LA307_2==COMMA||LA307_2==KW_INSERT||LA307_2==KW_MAP||LA307_2==KW_REDUCE||LA307_2==KW_SELECT||LA307_2==KW_UNION||LA307_2==RPAREN) ) {
						alt307=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 307, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 307, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 307, 0, input);
				throw nvae;
			}

			switch (alt307) {
				case 1 :
					// grammar/HiveParser.g:2525:4: KW_LIMIT ( (offset= Number COMMA )? num= Number )
					{
					KW_LIMIT932=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause16743); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LIMIT.add(KW_LIMIT932);

					// grammar/HiveParser.g:2525:13: ( (offset= Number COMMA )? num= Number )
					// grammar/HiveParser.g:2525:14: (offset= Number COMMA )? num= Number
					{
					// grammar/HiveParser.g:2525:14: (offset= Number COMMA )?
					int alt306=2;
					int LA306_0 = input.LA(1);
					if ( (LA306_0==Number) ) {
						int LA306_1 = input.LA(2);
						if ( (LA306_1==COMMA) ) {
							alt306=1;
						}
					}
					switch (alt306) {
						case 1 :
							// grammar/HiveParser.g:2525:15: offset= Number COMMA
							{
							offset=(Token)match(input,Number,FOLLOW_Number_in_limitClause16749); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_Number.add(offset);

							COMMA933=(Token)match(input,COMMA,FOLLOW_COMMA_in_limitClause16751); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA933);

							}
							break;

					}

					num=(Token)match(input,Number,FOLLOW_Number_in_limitClause16757); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(num);

					}

					// AST REWRITE
					// elements: offset, num
					// token labels: offset, num
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_offset=new RewriteRuleTokenStream(adaptor,"token offset",offset);
					RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2525:49: -> ^( TOK_LIMIT ( $offset)? $num)
					{
						// grammar/HiveParser.g:2525:52: ^( TOK_LIMIT ( $offset)? $num)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LIMIT, "TOK_LIMIT"), root_1);
						// grammar/HiveParser.g:2525:64: ( $offset)?
						if ( stream_offset.hasNext() ) {
							adaptor.addChild(root_1, stream_offset.nextNode());
						}
						stream_offset.reset();

						adaptor.addChild(root_1, stream_num.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2526:6: KW_LIMIT num= Number KW_OFFSET offset= Number
					{
					KW_LIMIT934=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause16780); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LIMIT.add(KW_LIMIT934);

					num=(Token)match(input,Number,FOLLOW_Number_in_limitClause16784); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(num);

					KW_OFFSET935=(Token)match(input,KW_OFFSET,FOLLOW_KW_OFFSET_in_limitClause16786); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OFFSET.add(KW_OFFSET935);

					offset=(Token)match(input,Number,FOLLOW_Number_in_limitClause16790); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(offset);

					// AST REWRITE
					// elements: num, offset
					// token labels: offset, num
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_offset=new RewriteRuleTokenStream(adaptor,"token offset",offset);
					RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2526:50: -> ^( TOK_LIMIT ( $offset)? $num)
					{
						// grammar/HiveParser.g:2526:53: ^( TOK_LIMIT ( $offset)? $num)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LIMIT, "TOK_LIMIT"), root_1);
						// grammar/HiveParser.g:2526:65: ( $offset)?
						if ( stream_offset.hasNext() ) {
							adaptor.addChild(root_1, stream_offset.nextNode());
						}
						stream_offset.reset();

						adaptor.addChild(root_1, stream_num.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "limitClause"


	public static class deleteStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "deleteStatement"
	// grammar/HiveParser.g:2530:1: deleteStatement : KW_DELETE KW_FROM tableName ( whereClause )? -> ^( TOK_DELETE_FROM tableName ( whereClause )? ) ;
	public final HiveParser.deleteStatement_return deleteStatement() throws RecognitionException {
		HiveParser.deleteStatement_return retval = new HiveParser.deleteStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DELETE936=null;
		Token KW_FROM937=null;
		ParserRuleReturnScope tableName938 =null;
		ParserRuleReturnScope whereClause939 =null;

		CommonTree KW_DELETE936_tree=null;
		CommonTree KW_FROM937_tree=null;
		RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("delete statement", state); 
		try {
			// grammar/HiveParser.g:2533:4: ( KW_DELETE KW_FROM tableName ( whereClause )? -> ^( TOK_DELETE_FROM tableName ( whereClause )? ) )
			// grammar/HiveParser.g:2534:4: KW_DELETE KW_FROM tableName ( whereClause )?
			{
			KW_DELETE936=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_deleteStatement16834); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DELETE.add(KW_DELETE936);

			KW_FROM937=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_deleteStatement16836); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM937);

			pushFollow(FOLLOW_tableName_in_deleteStatement16838);
			tableName938=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName938.getTree());
			// grammar/HiveParser.g:2534:32: ( whereClause )?
			int alt308=2;
			int LA308_0 = input.LA(1);
			if ( (LA308_0==KW_WHERE) ) {
				alt308=1;
			}
			switch (alt308) {
				case 1 :
					// grammar/HiveParser.g:2534:33: whereClause
					{
					pushFollow(FOLLOW_whereClause_in_deleteStatement16841);
					whereClause939=whereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_whereClause.add(whereClause939.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: whereClause, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2534:47: -> ^( TOK_DELETE_FROM tableName ( whereClause )? )
			{
				// grammar/HiveParser.g:2534:50: ^( TOK_DELETE_FROM tableName ( whereClause )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DELETE_FROM, "TOK_DELETE_FROM"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// grammar/HiveParser.g:2534:78: ( whereClause )?
				if ( stream_whereClause.hasNext() ) {
					adaptor.addChild(root_1, stream_whereClause.nextTree());
				}
				stream_whereClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "deleteStatement"


	public static class columnAssignmentClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnAssignmentClause"
	// grammar/HiveParser.g:2538:1: columnAssignmentClause : tableOrColumn EQUAL ^ precedencePlusExpression ;
	public final HiveParser.columnAssignmentClause_return columnAssignmentClause() throws RecognitionException {
		HiveParser.columnAssignmentClause_return retval = new HiveParser.columnAssignmentClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token EQUAL941=null;
		ParserRuleReturnScope tableOrColumn940 =null;
		ParserRuleReturnScope precedencePlusExpression942 =null;

		CommonTree EQUAL941_tree=null;

		try {
			// grammar/HiveParser.g:2539:4: ( tableOrColumn EQUAL ^ precedencePlusExpression )
			// grammar/HiveParser.g:2540:4: tableOrColumn EQUAL ^ precedencePlusExpression
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_tableOrColumn_in_columnAssignmentClause16874);
			tableOrColumn940=tableOrColumn();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, tableOrColumn940.getTree());

			EQUAL941=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_columnAssignmentClause16876); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EQUAL941_tree = (CommonTree)adaptor.create(EQUAL941);
			root_0 = (CommonTree)adaptor.becomeRoot(EQUAL941_tree, root_0);
			}

			pushFollow(FOLLOW_precedencePlusExpression_in_columnAssignmentClause16879);
			precedencePlusExpression942=precedencePlusExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, precedencePlusExpression942.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnAssignmentClause"


	public static class setColumnsClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "setColumnsClause"
	// grammar/HiveParser.g:2544:1: setColumnsClause : KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )* -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* ) ;
	public final HiveParser.setColumnsClause_return setColumnsClause() throws RecognitionException {
		HiveParser.setColumnsClause_return retval = new HiveParser.setColumnsClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET943=null;
		Token COMMA945=null;
		ParserRuleReturnScope columnAssignmentClause944 =null;
		ParserRuleReturnScope columnAssignmentClause946 =null;

		CommonTree KW_SET943_tree=null;
		CommonTree COMMA945_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_columnAssignmentClause=new RewriteRuleSubtreeStream(adaptor,"rule columnAssignmentClause");

		try {
			// grammar/HiveParser.g:2545:4: ( KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )* -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* ) )
			// grammar/HiveParser.g:2546:4: KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )*
			{
			KW_SET943=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setColumnsClause16899); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET943);

			pushFollow(FOLLOW_columnAssignmentClause_in_setColumnsClause16901);
			columnAssignmentClause944=columnAssignmentClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnAssignmentClause.add(columnAssignmentClause944.getTree());
			// grammar/HiveParser.g:2546:34: ( COMMA columnAssignmentClause )*
			loop309:
			while (true) {
				int alt309=2;
				int LA309_0 = input.LA(1);
				if ( (LA309_0==COMMA) ) {
					alt309=1;
				}

				switch (alt309) {
				case 1 :
					// grammar/HiveParser.g:2546:35: COMMA columnAssignmentClause
					{
					COMMA945=(Token)match(input,COMMA,FOLLOW_COMMA_in_setColumnsClause16904); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA945);

					pushFollow(FOLLOW_columnAssignmentClause_in_setColumnsClause16906);
					columnAssignmentClause946=columnAssignmentClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnAssignmentClause.add(columnAssignmentClause946.getTree());
					}
					break;

				default :
					break loop309;
				}
			}

			// AST REWRITE
			// elements: columnAssignmentClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2546:66: -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* )
			{
				// grammar/HiveParser.g:2546:69: ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SET_COLUMNS_CLAUSE, "TOK_SET_COLUMNS_CLAUSE"), root_1);
				// grammar/HiveParser.g:2546:94: ( columnAssignmentClause )*
				while ( stream_columnAssignmentClause.hasNext() ) {
					adaptor.addChild(root_1, stream_columnAssignmentClause.nextTree());
				}
				stream_columnAssignmentClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setColumnsClause"


	public static class updateStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "updateStatement"
	// grammar/HiveParser.g:2553:1: updateStatement : KW_UPDATE tableName setColumnsClause ( whereClause )? -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? ) ;
	public final HiveParser.updateStatement_return updateStatement() throws RecognitionException {
		HiveParser.updateStatement_return retval = new HiveParser.updateStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UPDATE947=null;
		ParserRuleReturnScope tableName948 =null;
		ParserRuleReturnScope setColumnsClause949 =null;
		ParserRuleReturnScope whereClause950 =null;

		CommonTree KW_UPDATE947_tree=null;
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleSubtreeStream stream_setColumnsClause=new RewriteRuleSubtreeStream(adaptor,"rule setColumnsClause");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("update statement", state); 
		try {
			// grammar/HiveParser.g:2556:4: ( KW_UPDATE tableName setColumnsClause ( whereClause )? -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? ) )
			// grammar/HiveParser.g:2557:4: KW_UPDATE tableName setColumnsClause ( whereClause )?
			{
			KW_UPDATE947=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_updateStatement16948); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE947);

			pushFollow(FOLLOW_tableName_in_updateStatement16950);
			tableName948=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName948.getTree());
			pushFollow(FOLLOW_setColumnsClause_in_updateStatement16952);
			setColumnsClause949=setColumnsClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_setColumnsClause.add(setColumnsClause949.getTree());
			// grammar/HiveParser.g:2557:41: ( whereClause )?
			int alt310=2;
			int LA310_0 = input.LA(1);
			if ( (LA310_0==KW_WHERE) ) {
				alt310=1;
			}
			switch (alt310) {
				case 1 :
					// grammar/HiveParser.g:2557:41: whereClause
					{
					pushFollow(FOLLOW_whereClause_in_updateStatement16954);
					whereClause950=whereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_whereClause.add(whereClause950.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: setColumnsClause, tableName, whereClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2557:54: -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? )
			{
				// grammar/HiveParser.g:2557:57: ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UPDATE_TABLE, "TOK_UPDATE_TABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_1, stream_setColumnsClause.nextTree());
				// grammar/HiveParser.g:2557:103: ( whereClause )?
				if ( stream_whereClause.hasNext() ) {
					adaptor.addChild(root_1, stream_whereClause.nextTree());
				}
				stream_whereClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "updateStatement"


	public static class sqlTransactionStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "sqlTransactionStatement"
	// grammar/HiveParser.g:2564:1: sqlTransactionStatement : ( startTransactionStatement | commitStatement | rollbackStatement | setAutoCommitStatement );
	public final HiveParser.sqlTransactionStatement_return sqlTransactionStatement() throws RecognitionException {
		HiveParser.sqlTransactionStatement_return retval = new HiveParser.sqlTransactionStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope startTransactionStatement951 =null;
		ParserRuleReturnScope commitStatement952 =null;
		ParserRuleReturnScope rollbackStatement953 =null;
		ParserRuleReturnScope setAutoCommitStatement954 =null;


		 pushMsg("transaction statement", state); 
		try {
			// grammar/HiveParser.g:2567:3: ( startTransactionStatement | commitStatement | rollbackStatement | setAutoCommitStatement )
			int alt311=4;
			switch ( input.LA(1) ) {
			case KW_START:
				{
				alt311=1;
				}
				break;
			case KW_COMMIT:
				{
				alt311=2;
				}
				break;
			case KW_ROLLBACK:
				{
				alt311=3;
				}
				break;
			case KW_SET:
				{
				alt311=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 311, 0, input);
				throw nvae;
			}
			switch (alt311) {
				case 1 :
					// grammar/HiveParser.g:2568:3: startTransactionStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_startTransactionStatement_in_sqlTransactionStatement16996);
					startTransactionStatement951=startTransactionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, startTransactionStatement951.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2569:4: commitStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_commitStatement_in_sqlTransactionStatement17001);
					commitStatement952=commitStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, commitStatement952.getTree());

					}
					break;
				case 3 :
					// grammar/HiveParser.g:2570:4: rollbackStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_rollbackStatement_in_sqlTransactionStatement17006);
					rollbackStatement953=rollbackStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, rollbackStatement953.getTree());

					}
					break;
				case 4 :
					// grammar/HiveParser.g:2571:4: setAutoCommitStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_setAutoCommitStatement_in_sqlTransactionStatement17011);
					setAutoCommitStatement954=setAutoCommitStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setAutoCommitStatement954.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlTransactionStatement"


	public static class startTransactionStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "startTransactionStatement"
	// grammar/HiveParser.g:2574:1: startTransactionStatement : KW_START KW_TRANSACTION ( transactionMode ( COMMA transactionMode )* )? -> ^( TOK_START_TRANSACTION ( transactionMode )* ) ;
	public final HiveParser.startTransactionStatement_return startTransactionStatement() throws RecognitionException {
		HiveParser.startTransactionStatement_return retval = new HiveParser.startTransactionStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_START955=null;
		Token KW_TRANSACTION956=null;
		Token COMMA958=null;
		ParserRuleReturnScope transactionMode957 =null;
		ParserRuleReturnScope transactionMode959 =null;

		CommonTree KW_START955_tree=null;
		CommonTree KW_TRANSACTION956_tree=null;
		CommonTree COMMA958_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_START=new RewriteRuleTokenStream(adaptor,"token KW_START");
		RewriteRuleTokenStream stream_KW_TRANSACTION=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTION");
		RewriteRuleSubtreeStream stream_transactionMode=new RewriteRuleSubtreeStream(adaptor,"rule transactionMode");

		try {
			// grammar/HiveParser.g:2575:3: ( KW_START KW_TRANSACTION ( transactionMode ( COMMA transactionMode )* )? -> ^( TOK_START_TRANSACTION ( transactionMode )* ) )
			// grammar/HiveParser.g:2576:3: KW_START KW_TRANSACTION ( transactionMode ( COMMA transactionMode )* )?
			{
			KW_START955=(Token)match(input,KW_START,FOLLOW_KW_START_in_startTransactionStatement17025); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_START.add(KW_START955);

			KW_TRANSACTION956=(Token)match(input,KW_TRANSACTION,FOLLOW_KW_TRANSACTION_in_startTransactionStatement17027); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TRANSACTION.add(KW_TRANSACTION956);

			// grammar/HiveParser.g:2576:27: ( transactionMode ( COMMA transactionMode )* )?
			int alt313=2;
			int LA313_0 = input.LA(1);
			if ( (LA313_0==KW_ISOLATION||LA313_0==KW_READ) ) {
				alt313=1;
			}
			switch (alt313) {
				case 1 :
					// grammar/HiveParser.g:2576:29: transactionMode ( COMMA transactionMode )*
					{
					pushFollow(FOLLOW_transactionMode_in_startTransactionStatement17031);
					transactionMode957=transactionMode();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_transactionMode.add(transactionMode957.getTree());
					// grammar/HiveParser.g:2576:46: ( COMMA transactionMode )*
					loop312:
					while (true) {
						int alt312=2;
						int LA312_0 = input.LA(1);
						if ( (LA312_0==COMMA) ) {
							alt312=1;
						}

						switch (alt312) {
						case 1 :
							// grammar/HiveParser.g:2576:48: COMMA transactionMode
							{
							COMMA958=(Token)match(input,COMMA,FOLLOW_COMMA_in_startTransactionStatement17036); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA958);

							pushFollow(FOLLOW_transactionMode_in_startTransactionStatement17038);
							transactionMode959=transactionMode();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_transactionMode.add(transactionMode959.getTree());
							}
							break;

						default :
							break loop312;
						}
					}

					}
					break;

			}

			// AST REWRITE
			// elements: transactionMode
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2576:77: -> ^( TOK_START_TRANSACTION ( transactionMode )* )
			{
				// grammar/HiveParser.g:2576:80: ^( TOK_START_TRANSACTION ( transactionMode )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_START_TRANSACTION, "TOK_START_TRANSACTION"), root_1);
				// grammar/HiveParser.g:2576:104: ( transactionMode )*
				while ( stream_transactionMode.hasNext() ) {
					adaptor.addChild(root_1, stream_transactionMode.nextTree());
				}
				stream_transactionMode.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "startTransactionStatement"


	public static class transactionMode_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "transactionMode"
	// grammar/HiveParser.g:2579:1: transactionMode : ( isolationLevel | transactionAccessMode -> ^( TOK_TXN_ACCESS_MODE transactionAccessMode ) );
	public final HiveParser.transactionMode_return transactionMode() throws RecognitionException {
		HiveParser.transactionMode_return retval = new HiveParser.transactionMode_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope isolationLevel960 =null;
		ParserRuleReturnScope transactionAccessMode961 =null;

		RewriteRuleSubtreeStream stream_transactionAccessMode=new RewriteRuleSubtreeStream(adaptor,"rule transactionAccessMode");

		try {
			// grammar/HiveParser.g:2580:3: ( isolationLevel | transactionAccessMode -> ^( TOK_TXN_ACCESS_MODE transactionAccessMode ) )
			int alt314=2;
			int LA314_0 = input.LA(1);
			if ( (LA314_0==KW_ISOLATION) ) {
				alt314=1;
			}
			else if ( (LA314_0==KW_READ) ) {
				alt314=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 314, 0, input);
				throw nvae;
			}

			switch (alt314) {
				case 1 :
					// grammar/HiveParser.g:2581:3: isolationLevel
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_isolationLevel_in_transactionMode17069);
					isolationLevel960=isolationLevel();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, isolationLevel960.getTree());

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2582:5: transactionAccessMode
					{
					pushFollow(FOLLOW_transactionAccessMode_in_transactionMode17075);
					transactionAccessMode961=transactionAccessMode();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_transactionAccessMode.add(transactionAccessMode961.getTree());
					// AST REWRITE
					// elements: transactionAccessMode
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2582:27: -> ^( TOK_TXN_ACCESS_MODE transactionAccessMode )
					{
						// grammar/HiveParser.g:2582:30: ^( TOK_TXN_ACCESS_MODE transactionAccessMode )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TXN_ACCESS_MODE, "TOK_TXN_ACCESS_MODE"), root_1);
						adaptor.addChild(root_1, stream_transactionAccessMode.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transactionMode"


	public static class transactionAccessMode_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "transactionAccessMode"
	// grammar/HiveParser.g:2585:1: transactionAccessMode : ( KW_READ KW_ONLY -> TOK_TXN_READ_ONLY | KW_READ KW_WRITE -> TOK_TXN_READ_WRITE );
	public final HiveParser.transactionAccessMode_return transactionAccessMode() throws RecognitionException {
		HiveParser.transactionAccessMode_return retval = new HiveParser.transactionAccessMode_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_READ962=null;
		Token KW_ONLY963=null;
		Token KW_READ964=null;
		Token KW_WRITE965=null;

		CommonTree KW_READ962_tree=null;
		CommonTree KW_ONLY963_tree=null;
		CommonTree KW_READ964_tree=null;
		CommonTree KW_WRITE965_tree=null;
		RewriteRuleTokenStream stream_KW_READ=new RewriteRuleTokenStream(adaptor,"token KW_READ");
		RewriteRuleTokenStream stream_KW_ONLY=new RewriteRuleTokenStream(adaptor,"token KW_ONLY");
		RewriteRuleTokenStream stream_KW_WRITE=new RewriteRuleTokenStream(adaptor,"token KW_WRITE");

		try {
			// grammar/HiveParser.g:2586:3: ( KW_READ KW_ONLY -> TOK_TXN_READ_ONLY | KW_READ KW_WRITE -> TOK_TXN_READ_WRITE )
			int alt315=2;
			int LA315_0 = input.LA(1);
			if ( (LA315_0==KW_READ) ) {
				int LA315_1 = input.LA(2);
				if ( (LA315_1==KW_ONLY) ) {
					alt315=1;
				}
				else if ( (LA315_1==KW_WRITE) ) {
					alt315=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 315, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 315, 0, input);
				throw nvae;
			}

			switch (alt315) {
				case 1 :
					// grammar/HiveParser.g:2587:3: KW_READ KW_ONLY
					{
					KW_READ962=(Token)match(input,KW_READ,FOLLOW_KW_READ_in_transactionAccessMode17098); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_READ.add(KW_READ962);

					KW_ONLY963=(Token)match(input,KW_ONLY,FOLLOW_KW_ONLY_in_transactionAccessMode17100); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ONLY.add(KW_ONLY963);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2587:19: -> TOK_TXN_READ_ONLY
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TXN_READ_ONLY, "TOK_TXN_READ_ONLY"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// grammar/HiveParser.g:2588:5: KW_READ KW_WRITE
					{
					KW_READ964=(Token)match(input,KW_READ,FOLLOW_KW_READ_in_transactionAccessMode17110); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_READ.add(KW_READ964);

					KW_WRITE965=(Token)match(input,KW_WRITE,FOLLOW_KW_WRITE_in_transactionAccessMode17112); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WRITE.add(KW_WRITE965);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2588:22: -> TOK_TXN_READ_WRITE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TXN_READ_WRITE, "TOK_TXN_READ_WRITE"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transactionAccessMode"


	public static class isolationLevel_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "isolationLevel"
	// grammar/HiveParser.g:2591:1: isolationLevel : KW_ISOLATION KW_LEVEL levelOfIsolation -> ^( TOK_ISOLATION_LEVEL levelOfIsolation ) ;
	public final HiveParser.isolationLevel_return isolationLevel() throws RecognitionException {
		HiveParser.isolationLevel_return retval = new HiveParser.isolationLevel_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ISOLATION966=null;
		Token KW_LEVEL967=null;
		ParserRuleReturnScope levelOfIsolation968 =null;

		CommonTree KW_ISOLATION966_tree=null;
		CommonTree KW_LEVEL967_tree=null;
		RewriteRuleTokenStream stream_KW_LEVEL=new RewriteRuleTokenStream(adaptor,"token KW_LEVEL");
		RewriteRuleTokenStream stream_KW_ISOLATION=new RewriteRuleTokenStream(adaptor,"token KW_ISOLATION");
		RewriteRuleSubtreeStream stream_levelOfIsolation=new RewriteRuleSubtreeStream(adaptor,"rule levelOfIsolation");

		try {
			// grammar/HiveParser.g:2592:3: ( KW_ISOLATION KW_LEVEL levelOfIsolation -> ^( TOK_ISOLATION_LEVEL levelOfIsolation ) )
			// grammar/HiveParser.g:2593:3: KW_ISOLATION KW_LEVEL levelOfIsolation
			{
			KW_ISOLATION966=(Token)match(input,KW_ISOLATION,FOLLOW_KW_ISOLATION_in_isolationLevel17131); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ISOLATION.add(KW_ISOLATION966);

			KW_LEVEL967=(Token)match(input,KW_LEVEL,FOLLOW_KW_LEVEL_in_isolationLevel17133); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LEVEL.add(KW_LEVEL967);

			pushFollow(FOLLOW_levelOfIsolation_in_isolationLevel17135);
			levelOfIsolation968=levelOfIsolation();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_levelOfIsolation.add(levelOfIsolation968.getTree());
			// AST REWRITE
			// elements: levelOfIsolation
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2593:42: -> ^( TOK_ISOLATION_LEVEL levelOfIsolation )
			{
				// grammar/HiveParser.g:2593:45: ^( TOK_ISOLATION_LEVEL levelOfIsolation )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ISOLATION_LEVEL, "TOK_ISOLATION_LEVEL"), root_1);
				adaptor.addChild(root_1, stream_levelOfIsolation.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "isolationLevel"


	public static class levelOfIsolation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "levelOfIsolation"
	// grammar/HiveParser.g:2597:1: levelOfIsolation : KW_SNAPSHOT -> TOK_ISOLATION_SNAPSHOT ;
	public final HiveParser.levelOfIsolation_return levelOfIsolation() throws RecognitionException {
		HiveParser.levelOfIsolation_return retval = new HiveParser.levelOfIsolation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SNAPSHOT969=null;

		CommonTree KW_SNAPSHOT969_tree=null;
		RewriteRuleTokenStream stream_KW_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token KW_SNAPSHOT");

		try {
			// grammar/HiveParser.g:2598:3: ( KW_SNAPSHOT -> TOK_ISOLATION_SNAPSHOT )
			// grammar/HiveParser.g:2599:3: KW_SNAPSHOT
			{
			KW_SNAPSHOT969=(Token)match(input,KW_SNAPSHOT,FOLLOW_KW_SNAPSHOT_in_levelOfIsolation17160); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SNAPSHOT.add(KW_SNAPSHOT969);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2599:15: -> TOK_ISOLATION_SNAPSHOT
			{
				adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_ISOLATION_SNAPSHOT, "TOK_ISOLATION_SNAPSHOT"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "levelOfIsolation"


	public static class commitStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "commitStatement"
	// grammar/HiveParser.g:2602:1: commitStatement : KW_COMMIT ( KW_WORK )? -> TOK_COMMIT ;
	public final HiveParser.commitStatement_return commitStatement() throws RecognitionException {
		HiveParser.commitStatement_return retval = new HiveParser.commitStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_COMMIT970=null;
		Token KW_WORK971=null;

		CommonTree KW_COMMIT970_tree=null;
		CommonTree KW_WORK971_tree=null;
		RewriteRuleTokenStream stream_KW_WORK=new RewriteRuleTokenStream(adaptor,"token KW_WORK");
		RewriteRuleTokenStream stream_KW_COMMIT=new RewriteRuleTokenStream(adaptor,"token KW_COMMIT");

		try {
			// grammar/HiveParser.g:2603:3: ( KW_COMMIT ( KW_WORK )? -> TOK_COMMIT )
			// grammar/HiveParser.g:2604:3: KW_COMMIT ( KW_WORK )?
			{
			KW_COMMIT970=(Token)match(input,KW_COMMIT,FOLLOW_KW_COMMIT_in_commitStatement17179); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMMIT.add(KW_COMMIT970);

			// grammar/HiveParser.g:2604:13: ( KW_WORK )?
			int alt316=2;
			int LA316_0 = input.LA(1);
			if ( (LA316_0==KW_WORK) ) {
				alt316=1;
			}
			switch (alt316) {
				case 1 :
					// grammar/HiveParser.g:2604:15: KW_WORK
					{
					KW_WORK971=(Token)match(input,KW_WORK,FOLLOW_KW_WORK_in_commitStatement17183); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WORK.add(KW_WORK971);

					}
					break;

			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2604:26: -> TOK_COMMIT
			{
				adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_COMMIT, "TOK_COMMIT"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commitStatement"


	public static class rollbackStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "rollbackStatement"
	// grammar/HiveParser.g:2607:1: rollbackStatement : KW_ROLLBACK ( KW_WORK )? -> TOK_ROLLBACK ;
	public final HiveParser.rollbackStatement_return rollbackStatement() throws RecognitionException {
		HiveParser.rollbackStatement_return retval = new HiveParser.rollbackStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ROLLBACK972=null;
		Token KW_WORK973=null;

		CommonTree KW_ROLLBACK972_tree=null;
		CommonTree KW_WORK973_tree=null;
		RewriteRuleTokenStream stream_KW_ROLLBACK=new RewriteRuleTokenStream(adaptor,"token KW_ROLLBACK");
		RewriteRuleTokenStream stream_KW_WORK=new RewriteRuleTokenStream(adaptor,"token KW_WORK");

		try {
			// grammar/HiveParser.g:2608:3: ( KW_ROLLBACK ( KW_WORK )? -> TOK_ROLLBACK )
			// grammar/HiveParser.g:2609:3: KW_ROLLBACK ( KW_WORK )?
			{
			KW_ROLLBACK972=(Token)match(input,KW_ROLLBACK,FOLLOW_KW_ROLLBACK_in_rollbackStatement17205); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLLBACK.add(KW_ROLLBACK972);

			// grammar/HiveParser.g:2609:15: ( KW_WORK )?
			int alt317=2;
			int LA317_0 = input.LA(1);
			if ( (LA317_0==KW_WORK) ) {
				alt317=1;
			}
			switch (alt317) {
				case 1 :
					// grammar/HiveParser.g:2609:17: KW_WORK
					{
					KW_WORK973=(Token)match(input,KW_WORK,FOLLOW_KW_WORK_in_rollbackStatement17209); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WORK.add(KW_WORK973);

					}
					break;

			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2609:28: -> TOK_ROLLBACK
			{
				adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_ROLLBACK, "TOK_ROLLBACK"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollbackStatement"


	public static class setAutoCommitStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "setAutoCommitStatement"
	// grammar/HiveParser.g:2611:1: setAutoCommitStatement : KW_SET KW_AUTOCOMMIT booleanValueTok -> ^( TOK_SET_AUTOCOMMIT booleanValueTok ) ;
	public final HiveParser.setAutoCommitStatement_return setAutoCommitStatement() throws RecognitionException {
		HiveParser.setAutoCommitStatement_return retval = new HiveParser.setAutoCommitStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET974=null;
		Token KW_AUTOCOMMIT975=null;
		ParserRuleReturnScope booleanValueTok976 =null;

		CommonTree KW_SET974_tree=null;
		CommonTree KW_AUTOCOMMIT975_tree=null;
		RewriteRuleTokenStream stream_KW_AUTOCOMMIT=new RewriteRuleTokenStream(adaptor,"token KW_AUTOCOMMIT");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_booleanValueTok=new RewriteRuleSubtreeStream(adaptor,"rule booleanValueTok");

		try {
			// grammar/HiveParser.g:2612:3: ( KW_SET KW_AUTOCOMMIT booleanValueTok -> ^( TOK_SET_AUTOCOMMIT booleanValueTok ) )
			// grammar/HiveParser.g:2613:3: KW_SET KW_AUTOCOMMIT booleanValueTok
			{
			KW_SET974=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setAutoCommitStatement17230); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET974);

			KW_AUTOCOMMIT975=(Token)match(input,KW_AUTOCOMMIT,FOLLOW_KW_AUTOCOMMIT_in_setAutoCommitStatement17232); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AUTOCOMMIT.add(KW_AUTOCOMMIT975);

			pushFollow(FOLLOW_booleanValueTok_in_setAutoCommitStatement17234);
			booleanValueTok976=booleanValueTok();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_booleanValueTok.add(booleanValueTok976.getTree());
			// AST REWRITE
			// elements: booleanValueTok
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2613:40: -> ^( TOK_SET_AUTOCOMMIT booleanValueTok )
			{
				// grammar/HiveParser.g:2613:43: ^( TOK_SET_AUTOCOMMIT booleanValueTok )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SET_AUTOCOMMIT, "TOK_SET_AUTOCOMMIT"), root_1);
				adaptor.addChild(root_1, stream_booleanValueTok.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setAutoCommitStatement"


	public static class abortTransactionStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "abortTransactionStatement"
	// grammar/HiveParser.g:2619:1: abortTransactionStatement : KW_ABORT KW_TRANSACTIONS ( Number )+ -> ^( TOK_ABORT_TRANSACTIONS ( Number )+ ) ;
	public final HiveParser.abortTransactionStatement_return abortTransactionStatement() throws RecognitionException {
		HiveParser.abortTransactionStatement_return retval = new HiveParser.abortTransactionStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ABORT977=null;
		Token KW_TRANSACTIONS978=null;
		Token Number979=null;

		CommonTree KW_ABORT977_tree=null;
		CommonTree KW_TRANSACTIONS978_tree=null;
		CommonTree Number979_tree=null;
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_TRANSACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTIONS");
		RewriteRuleTokenStream stream_KW_ABORT=new RewriteRuleTokenStream(adaptor,"token KW_ABORT");

		 pushMsg("abort transactions statement", state); 
		try {
			// grammar/HiveParser.g:2622:3: ( KW_ABORT KW_TRANSACTIONS ( Number )+ -> ^( TOK_ABORT_TRANSACTIONS ( Number )+ ) )
			// grammar/HiveParser.g:2623:3: KW_ABORT KW_TRANSACTIONS ( Number )+
			{
			KW_ABORT977=(Token)match(input,KW_ABORT,FOLLOW_KW_ABORT_in_abortTransactionStatement17269); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ABORT.add(KW_ABORT977);

			KW_TRANSACTIONS978=(Token)match(input,KW_TRANSACTIONS,FOLLOW_KW_TRANSACTIONS_in_abortTransactionStatement17271); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TRANSACTIONS.add(KW_TRANSACTIONS978);

			// grammar/HiveParser.g:2623:28: ( Number )+
			int cnt318=0;
			loop318:
			while (true) {
				int alt318=2;
				int LA318_0 = input.LA(1);
				if ( (LA318_0==Number) ) {
					alt318=1;
				}

				switch (alt318) {
				case 1 :
					// grammar/HiveParser.g:2623:30: Number
					{
					Number979=(Token)match(input,Number,FOLLOW_Number_in_abortTransactionStatement17275); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(Number979);

					}
					break;

				default :
					if ( cnt318 >= 1 ) break loop318;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(318, input);
					throw eee;
				}
				cnt318++;
			}

			// AST REWRITE
			// elements: Number
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2623:40: -> ^( TOK_ABORT_TRANSACTIONS ( Number )+ )
			{
				// grammar/HiveParser.g:2623:43: ^( TOK_ABORT_TRANSACTIONS ( Number )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ABORT_TRANSACTIONS, "TOK_ABORT_TRANSACTIONS"), root_1);
				if ( !(stream_Number.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_Number.hasNext() ) {
					adaptor.addChild(root_1, stream_Number.nextNode());
				}
				stream_Number.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "abortTransactionStatement"

	// $ANTLR start synpred1_HiveParser
	public final void synpred1_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:801:7: ( grantPrivileges )
		// grammar/HiveParser.g:801:8: grantPrivileges
		{
		pushFollow(FOLLOW_grantPrivileges_in_synpred1_HiveParser1911);
		grantPrivileges();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred1_HiveParser

	// $ANTLR start synpred2_HiveParser
	public final void synpred2_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:802:7: ( revokePrivileges )
		// grammar/HiveParser.g:802:8: revokePrivileges
		{
		pushFollow(FOLLOW_revokePrivileges_in_synpred2_HiveParser1925);
		revokePrivileges();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred2_HiveParser

	// $ANTLR start synpred3_HiveParser
	public final void synpred3_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1039:7: ( alterStatementSuffixRename[true] )
		// grammar/HiveParser.g:1039:8: alterStatementSuffixRename[true]
		{
		pushFollow(FOLLOW_alterStatementSuffixRename_in_synpred3_HiveParser3881);
		alterStatementSuffixRename(true);
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred3_HiveParser

	// $ANTLR start synpred4_HiveParser
	public final void synpred4_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1385:4: ( KW_ELEM_TYPE )
		// grammar/HiveParser.g:1385:5: KW_ELEM_TYPE
		{
		match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_synpred4_HiveParser6473); if (state.failed) return;

		}

	}
	// $ANTLR end synpred4_HiveParser

	// $ANTLR start synpred5_HiveParser
	public final void synpred5_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1387:4: ( KW_KEY_TYPE )
		// grammar/HiveParser.g:1387:5: KW_KEY_TYPE
		{
		match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_synpred5_HiveParser6490); if (state.failed) return;

		}

	}
	// $ANTLR end synpred5_HiveParser

	// $ANTLR start synpred6_HiveParser
	public final void synpred6_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1389:4: ( KW_VALUE_TYPE )
		// grammar/HiveParser.g:1389:5: KW_VALUE_TYPE
		{
		match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_synpred6_HiveParser6507); if (state.failed) return;

		}

	}
	// $ANTLR end synpred6_HiveParser

	// $ANTLR start synpred7_HiveParser
	public final void synpred7_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1413:5: ( KW_DATABASE | KW_SCHEMA )
		// grammar/HiveParser.g:
		{
		if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred7_HiveParser

	// $ANTLR start synpred8_HiveParser
	public final void synpred8_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1415:5: ( KW_FUNCTION )
		// grammar/HiveParser.g:1415:6: KW_FUNCTION
		{
		match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_synpred8_HiveParser6715); if (state.failed) return;

		}

	}
	// $ANTLR end synpred8_HiveParser

	// $ANTLR start synpred9_HiveParser
	public final void synpred9_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1417:5: ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )
		// grammar/HiveParser.g:
		{
		if ( input.LA(1)==KW_EXTENDED||input.LA(1)==KW_FORMATTED||input.LA(1)==KW_PRETTY ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred9_HiveParser

	// $ANTLR start synpred10_HiveParser
	public final void synpred10_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1428:7: ( KW_COMPUTE )
		// grammar/HiveParser.g:1428:8: KW_COMPUTE
		{
		match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_synpred10_HiveParser6874); if (state.failed) return;

		}

	}
	// $ANTLR end synpred10_HiveParser

	// $ANTLR start synpred11_HiveParser
	public final void synpred11_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1432:7: ( KW_CACHE )
		// grammar/HiveParser.g:1432:8: KW_CACHE
		{
		match(input,KW_CACHE,FOLLOW_KW_CACHE_in_synpred11_HiveParser7014); if (state.failed) return;

		}

	}
	// $ANTLR end synpred11_HiveParser

	// $ANTLR start synpred12_HiveParser
	public final void synpred12_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1446:9: ( KW_DATABASE | KW_SCHEMA )
		// grammar/HiveParser.g:
		{
		if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred12_HiveParser

	// $ANTLR start synpred13_HiveParser
	public final void synpred13_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1455:7: ( KW_DATABASE | KW_SCHEMA )
		// grammar/HiveParser.g:
		{
		if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred13_HiveParser

	// $ANTLR start synpred14_HiveParser
	public final void synpred14_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1568:5: ( KW_ALL )
		// grammar/HiveParser.g:1568:6: KW_ALL
		{
		match(input,KW_ALL,FOLLOW_KW_ALL_in_synpred14_HiveParser8399); if (state.failed) return;

		}

	}
	// $ANTLR end synpred14_HiveParser

	// $ANTLR start synpred15_HiveParser
	public final void synpred15_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1570:5: ( KW_NONE )
		// grammar/HiveParser.g:1570:6: KW_NONE
		{
		match(input,KW_NONE,FOLLOW_KW_NONE_in_synpred15_HiveParser8430); if (state.failed) return;

		}

	}
	// $ANTLR end synpred15_HiveParser

	// $ANTLR start synpred16_HiveParser
	public final void synpred16_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1594:7: ( KW_ALL )
		// grammar/HiveParser.g:1594:8: KW_ALL
		{
		match(input,KW_ALL,FOLLOW_KW_ALL_in_synpred16_HiveParser8604); if (state.failed) return;

		}

	}
	// $ANTLR end synpred16_HiveParser

	// $ANTLR start synpred17_HiveParser
	public final void synpred17_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1833:117: ( storedAsDirs )
		// grammar/HiveParser.g:1833:118: storedAsDirs
		{
		pushFollow(FOLLOW_storedAsDirs_in_synpred17_HiveParser10587);
		storedAsDirs();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred17_HiveParser

	// $ANTLR start synpred18_HiveParser
	public final void synpred18_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:1964:7: ( KW_STORED KW_AS KW_INPUTFORMAT )
		// grammar/HiveParser.g:1964:8: KW_STORED KW_AS KW_INPUTFORMAT
		{
		match(input,KW_STORED,FOLLOW_KW_STORED_in_synpred18_HiveParser11568); if (state.failed) return;

		match(input,KW_AS,FOLLOW_KW_AS_in_synpred18_HiveParser11570); if (state.failed) return;

		match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_synpred18_HiveParser11572); if (state.failed) return;

		}

	}
	// $ANTLR end synpred18_HiveParser

	// $ANTLR start synpred19_HiveParser
	public final void synpred19_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:2014:25: ( KW_ELEM_TYPE )
		// grammar/HiveParser.g:2014:26: KW_ELEM_TYPE
		{
		match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_synpred19_HiveParser12009); if (state.failed) return;

		}

	}
	// $ANTLR end synpred19_HiveParser

	// $ANTLR start synpred20_HiveParser
	public final void synpred20_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:2014:58: ( KW_KEY_TYPE )
		// grammar/HiveParser.g:2014:59: KW_KEY_TYPE
		{
		match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_synpred20_HiveParser12019); if (state.failed) return;

		}

	}
	// $ANTLR end synpred20_HiveParser

	// $ANTLR start synpred21_HiveParser
	public final void synpred21_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:2014:89: ( KW_VALUE_TYPE )
		// grammar/HiveParser.g:2014:90: KW_VALUE_TYPE
		{
		match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_synpred21_HiveParser12029); if (state.failed) return;

		}

	}
	// $ANTLR end synpred21_HiveParser

	// $ANTLR start synpred22_HiveParser
	public final void synpred22_HiveParser_fragment() throws RecognitionException {
		// grammar/HiveParser.g:2455:5: ( window_clause )
		// grammar/HiveParser.g:2455:6: window_clause
		{
		pushFollow(FOLLOW_window_clause_in_synpred22_HiveParser16101);
		window_clause();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred22_HiveParser

	// Delegated rules
	public HiveParser_IdentifiersParser.precedencePlusOperator_return precedencePlusOperator() throws RecognitionException { return gIdentifiersParser.precedencePlusOperator(); }

	public HiveParser_IdentifiersParser.precedenceStarOperator_return precedenceStarOperator() throws RecognitionException { return gIdentifiersParser.precedenceStarOperator(); }

	public HiveParser_IdentifiersParser.precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseOrOperator(); }

	public HiveParser_IdentifiersParser.expressions_return expressions() throws RecognitionException { return gIdentifiersParser.expressions(); }

	public HiveParser_FromClauseParser.valueRowConstructor_return valueRowConstructor() throws RecognitionException { return gFromClauseParser.valueRowConstructor(); }

	public HiveParser_IdentifiersParser.nonReserved_return nonReserved() throws RecognitionException { return gIdentifiersParser.nonReserved(); }

	public HiveParser_SelectClauseParser.window_frame_boundary_return window_frame_boundary() throws RecognitionException { return gSelectClauseParser.window_frame_boundary(); }

	public HiveParser_FromClauseParser.tableBucketSample_return tableBucketSample() throws RecognitionException { return gFromClauseParser.tableBucketSample(); }

	public HiveParser_IdentifiersParser.havingClause_return havingClause() throws RecognitionException { return gIdentifiersParser.havingClause(); }

	public HiveParser_FromClauseParser.whereClause_return whereClause() throws RecognitionException { return gFromClauseParser.whereClause(); }

	public HiveParser_IdentifiersParser.havingCondition_return havingCondition() throws RecognitionException { return gIdentifiersParser.havingCondition(); }

	public HiveParser_FromClauseParser.valuesTableConstructor_return valuesTableConstructor() throws RecognitionException { return gFromClauseParser.valuesTableConstructor(); }

	public HiveParser_IdentifiersParser.expressionsNotInParenthese_return expressionsNotInParenthese() throws RecognitionException { return gIdentifiersParser.expressionsNotInParenthese(); }

	public HiveParser_IdentifiersParser.precedenceOrOperator_return precedenceOrOperator() throws RecognitionException { return gIdentifiersParser.precedenceOrOperator(); }

	public HiveParser_IdentifiersParser.principalIdentifier_return principalIdentifier() throws RecognitionException { return gIdentifiersParser.principalIdentifier(); }

	public HiveParser_SelectClauseParser.hintItem_return hintItem() throws RecognitionException { return gSelectClauseParser.hintItem(); }

	public HiveParser_FromClauseParser.uniqueJoinSource_return uniqueJoinSource() throws RecognitionException { return gFromClauseParser.uniqueJoinSource(); }

	public HiveParser_IdentifiersParser.partitionSpec_return partitionSpec() throws RecognitionException { return gIdentifiersParser.partitionSpec(); }

	public HiveParser_IdentifiersParser.castExpression_return castExpression() throws RecognitionException { return gIdentifiersParser.castExpression(); }

	public HiveParser_IdentifiersParser.charSetStringLiteral_return charSetStringLiteral() throws RecognitionException { return gIdentifiersParser.charSetStringLiteral(); }

	public HiveParser_IdentifiersParser.precedenceBitwiseOrExpression_return precedenceBitwiseOrExpression() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseOrExpression(); }

	public HiveParser_IdentifiersParser.stringLiteralSequence_return stringLiteralSequence() throws RecognitionException { return gIdentifiersParser.stringLiteralSequence(); }

	public HiveParser_IdentifiersParser.groupByClause_return groupByClause() throws RecognitionException { return gIdentifiersParser.groupByClause(); }

	public HiveParser_IdentifiersParser.precedenceStarExpression_return precedenceStarExpression() throws RecognitionException { return gIdentifiersParser.precedenceStarExpression(); }

	public HiveParser_IdentifiersParser.precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseXorExpression(); }

	public HiveParser_IdentifiersParser.precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseXorOperator(); }

	public HiveParser_FromClauseParser.fromClause_return fromClause() throws RecognitionException { return gFromClauseParser.fromClause(); }

	public HiveParser_SelectClauseParser.window_defn_return window_defn() throws RecognitionException { return gSelectClauseParser.window_defn(); }

	public HiveParser_IdentifiersParser.precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression() throws RecognitionException { return gIdentifiersParser.precedenceUnarySuffixExpression(); }

	public HiveParser_IdentifiersParser.precedenceFieldExpression_return precedenceFieldExpression() throws RecognitionException { return gIdentifiersParser.precedenceFieldExpression(); }

	public HiveParser_FromClauseParser.uniqueJoinExpr_return uniqueJoinExpr() throws RecognitionException { return gFromClauseParser.uniqueJoinExpr(); }

	public HiveParser_IdentifiersParser.precedenceNotExpression_return precedenceNotExpression() throws RecognitionException { return gIdentifiersParser.precedenceNotExpression(); }

	public HiveParser_IdentifiersParser.partitionByClause_return partitionByClause() throws RecognitionException { return gIdentifiersParser.partitionByClause(); }

	public HiveParser_SelectClauseParser.selectItem_return selectItem() throws RecognitionException { return gSelectClauseParser.selectItem(); }

	public HiveParser_IdentifiersParser.intervalLiteral_return intervalLiteral() throws RecognitionException { return gIdentifiersParser.intervalLiteral(); }

	public HiveParser_IdentifiersParser.dropPartitionOperator_return dropPartitionOperator() throws RecognitionException { return gIdentifiersParser.dropPartitionOperator(); }

	public HiveParser_SelectClauseParser.hintName_return hintName() throws RecognitionException { return gSelectClauseParser.hintName(); }

	public HiveParser_IdentifiersParser.sql11ReservedKeywordsUsedAsCastFunctionName_return sql11ReservedKeywordsUsedAsCastFunctionName() throws RecognitionException { return gIdentifiersParser.sql11ReservedKeywordsUsedAsCastFunctionName(); }

	public HiveParser_FromClauseParser.tableSample_return tableSample() throws RecognitionException { return gFromClauseParser.tableSample(); }

	public HiveParser_IdentifiersParser.intervalQualifiers_return intervalQualifiers() throws RecognitionException { return gIdentifiersParser.intervalQualifiers(); }

	public HiveParser_IdentifiersParser.whenExpression_return whenExpression() throws RecognitionException { return gIdentifiersParser.whenExpression(); }

	public HiveParser_IdentifiersParser.precedencePlusExpression_return precedencePlusExpression() throws RecognitionException { return gIdentifiersParser.precedencePlusExpression(); }

	public HiveParser_IdentifiersParser.sysFuncNames_return sysFuncNames() throws RecognitionException { return gIdentifiersParser.sysFuncNames(); }

	public HiveParser_FromClauseParser.tableSource_return tableSource() throws RecognitionException { return gFromClauseParser.tableSource(); }

	public HiveParser_FromClauseParser.expressionList_return expressionList() throws RecognitionException { return gFromClauseParser.expressionList(); }

	public HiveParser_SelectClauseParser.hintList_return hintList() throws RecognitionException { return gSelectClauseParser.hintList(); }

	public HiveParser_FromClauseParser.tableName_return tableName() throws RecognitionException { return gFromClauseParser.tableName(); }

	public HiveParser_FromClauseParser.uniqueJoinToken_return uniqueJoinToken() throws RecognitionException { return gFromClauseParser.uniqueJoinToken(); }

	public HiveParser_FromClauseParser.virtualTableSource_return virtualTableSource() throws RecognitionException { return gFromClauseParser.virtualTableSource(); }

	public HiveParser_IdentifiersParser.precedenceEqualExpressionSingle_return precedenceEqualExpressionSingle() throws RecognitionException { return gIdentifiersParser.precedenceEqualExpressionSingle(); }

	public HiveParser_FromClauseParser.viewName_return viewName() throws RecognitionException { return gFromClauseParser.viewName(); }

	public HiveParser_IdentifiersParser.function_return function() throws RecognitionException { return gIdentifiersParser.function(); }

	public HiveParser_IdentifiersParser.precedenceEqualOperator_return precedenceEqualOperator() throws RecognitionException { return gIdentifiersParser.precedenceEqualOperator(); }

	public HiveParser_FromClauseParser.tableAlias_return tableAlias() throws RecognitionException { return gFromClauseParser.tableAlias(); }

	public HiveParser_IdentifiersParser.atomExpression_return atomExpression() throws RecognitionException { return gIdentifiersParser.atomExpression(); }

	public HiveParser_IdentifiersParser.precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression() throws RecognitionException { return gIdentifiersParser.precedenceUnaryPrefixExpression(); }

	public HiveParser_SelectClauseParser.selectTrfmClause_return selectTrfmClause() throws RecognitionException { return gSelectClauseParser.selectTrfmClause(); }

	public HiveParser_FromClauseParser.partitionTableFunctionSource_return partitionTableFunctionSource() throws RecognitionException { return gFromClauseParser.partitionTableFunctionSource(); }

	public HiveParser_SelectClauseParser.selectList_return selectList() throws RecognitionException { return gSelectClauseParser.selectList(); }

	public HiveParser_SelectClauseParser.selectExpression_return selectExpression() throws RecognitionException { return gSelectClauseParser.selectExpression(); }

	public HiveParser_IdentifiersParser.functionName_return functionName() throws RecognitionException { return gIdentifiersParser.functionName(); }

	public HiveParser_IdentifiersParser.precedenceAmpersandOperator_return precedenceAmpersandOperator() throws RecognitionException { return gIdentifiersParser.precedenceAmpersandOperator(); }

	public HiveParser_IdentifiersParser.precedenceOrExpression_return precedenceOrExpression() throws RecognitionException { return gIdentifiersParser.precedenceOrExpression(); }

	public HiveParser_FromClauseParser.tableAllColumns_return tableAllColumns() throws RecognitionException { return gFromClauseParser.tableAllColumns(); }

	public HiveParser_FromClauseParser.fromSource_return fromSource() throws RecognitionException { return gFromClauseParser.fromSource(); }

	public HiveParser_IdentifiersParser.expressionsToStruct_return expressionsToStruct() throws RecognitionException { return gIdentifiersParser.expressionsToStruct(); }

	public HiveParser_IdentifiersParser.precedenceAndExpression_return precedenceAndExpression() throws RecognitionException { return gIdentifiersParser.precedenceAndExpression(); }

	public HiveParser_IdentifiersParser.dropPartitionVal_return dropPartitionVal() throws RecognitionException { return gIdentifiersParser.dropPartitionVal(); }

	public HiveParser_SelectClauseParser.hintClause_return hintClause() throws RecognitionException { return gSelectClauseParser.hintClause(); }

	public HiveParser_SelectClauseParser.window_range_expression_return window_range_expression() throws RecognitionException { return gSelectClauseParser.window_range_expression(); }

	public HiveParser_FromClauseParser.splitSample_return splitSample() throws RecognitionException { return gFromClauseParser.splitSample(); }

	public HiveParser_IdentifiersParser.dateLiteral_return dateLiteral() throws RecognitionException { return gIdentifiersParser.dateLiteral(); }

	public HiveParser_IdentifiersParser.precedenceNotOperator_return precedenceNotOperator() throws RecognitionException { return gIdentifiersParser.precedenceNotOperator(); }

	public HiveParser_IdentifiersParser.columnRefOrderInParenthese_return columnRefOrderInParenthese() throws RecognitionException { return gIdentifiersParser.columnRefOrderInParenthese(); }

	public HiveParser_SelectClauseParser.window_value_expression_return window_value_expression() throws RecognitionException { return gSelectClauseParser.window_value_expression(); }

	public HiveParser_SelectClauseParser.hintArgName_return hintArgName() throws RecognitionException { return gSelectClauseParser.hintArgName(); }

	public HiveParser_IdentifiersParser.timestampLiteral_return timestampLiteral() throws RecognitionException { return gIdentifiersParser.timestampLiteral(); }

	public HiveParser_SelectClauseParser.window_clause_return window_clause() throws RecognitionException { return gSelectClauseParser.window_clause(); }

	public HiveParser_IdentifiersParser.nullCondition_return nullCondition() throws RecognitionException { return gIdentifiersParser.nullCondition(); }

	public HiveParser_SelectClauseParser.selectClause_return selectClause() throws RecognitionException { return gSelectClauseParser.selectClause(); }

	public HiveParser_FromClauseParser.searchCondition_return searchCondition() throws RecognitionException { return gFromClauseParser.searchCondition(); }

	public HiveParser_FromClauseParser.partitionedTableFunction_return partitionedTableFunction() throws RecognitionException { return gFromClauseParser.partitionedTableFunction(); }

	public HiveParser_IdentifiersParser.caseExpression_return caseExpression() throws RecognitionException { return gIdentifiersParser.caseExpression(); }

	public HiveParser_IdentifiersParser.expressionsInParenthese_return expressionsInParenthese() throws RecognitionException { return gIdentifiersParser.expressionsInParenthese(); }

	public HiveParser_IdentifiersParser.dropPartitionSpec_return dropPartitionSpec() throws RecognitionException { return gIdentifiersParser.dropPartitionSpec(); }

	public HiveParser_IdentifiersParser.constant_return constant() throws RecognitionException { return gIdentifiersParser.constant(); }

	public HiveParser_IdentifiersParser.precedenceUnaryOperator_return precedenceUnaryOperator() throws RecognitionException { return gIdentifiersParser.precedenceUnaryOperator(); }

	public HiveParser_IdentifiersParser.booleanValue_return booleanValue() throws RecognitionException { return gIdentifiersParser.booleanValue(); }

	public HiveParser_IdentifiersParser.subQueryExpression_return subQueryExpression() throws RecognitionException { return gIdentifiersParser.subQueryExpression(); }

	public HiveParser_IdentifiersParser.columnRefOrderNotInParenthese_return columnRefOrderNotInParenthese() throws RecognitionException { return gIdentifiersParser.columnRefOrderNotInParenthese(); }

	public HiveParser_IdentifiersParser.orderByClause_return orderByClause() throws RecognitionException { return gIdentifiersParser.orderByClause(); }

	public HiveParser_FromClauseParser.joinSource_return joinSource() throws RecognitionException { return gFromClauseParser.joinSource(); }

	public HiveParser_IdentifiersParser.groupingSetExpressionMultiple_return groupingSetExpressionMultiple() throws RecognitionException { return gIdentifiersParser.groupingSetExpressionMultiple(); }

	public HiveParser_IdentifiersParser.partitionVal_return partitionVal() throws RecognitionException { return gIdentifiersParser.partitionVal(); }

	public HiveParser_FromClauseParser.joinToken_return joinToken() throws RecognitionException { return gFromClauseParser.joinToken(); }

	public HiveParser_SelectClauseParser.trfmClause_return trfmClause() throws RecognitionException { return gSelectClauseParser.trfmClause(); }

	public HiveParser_FromClauseParser.partitioningSpec_return partitioningSpec() throws RecognitionException { return gFromClauseParser.partitioningSpec(); }

	public HiveParser_IdentifiersParser.groupingExpressionSingle_return groupingExpressionSingle() throws RecognitionException { return gIdentifiersParser.groupingExpressionSingle(); }

	public HiveParser_FromClauseParser.fromSource0_return fromSource0() throws RecognitionException { return gFromClauseParser.fromSource0(); }

	public HiveParser_IdentifiersParser.sortByClause_return sortByClause() throws RecognitionException { return gIdentifiersParser.sortByClause(); }

	public HiveParser_IdentifiersParser.functionIdentifier_return functionIdentifier() throws RecognitionException { return gIdentifiersParser.functionIdentifier(); }

	public HiveParser_IdentifiersParser.distributeByClause_return distributeByClause() throws RecognitionException { return gIdentifiersParser.distributeByClause(); }

	public HiveParser_SelectClauseParser.hintArgs_return hintArgs() throws RecognitionException { return gSelectClauseParser.hintArgs(); }

	public HiveParser_IdentifiersParser.booleanValueTok_return booleanValueTok() throws RecognitionException { return gIdentifiersParser.booleanValueTok(); }

	public HiveParser_IdentifiersParser.tableOrPartition_return tableOrPartition() throws RecognitionException { return gIdentifiersParser.tableOrPartition(); }

	public HiveParser_IdentifiersParser.sql11ReservedKeywordsUsedAsIdentifier_return sql11ReservedKeywordsUsedAsIdentifier() throws RecognitionException { return gIdentifiersParser.sql11ReservedKeywordsUsedAsIdentifier(); }

	public HiveParser_SelectClauseParser.selectExpressionList_return selectExpressionList() throws RecognitionException { return gSelectClauseParser.selectExpressionList(); }

	public HiveParser_FromClauseParser.tableNameColList_return tableNameColList() throws RecognitionException { return gFromClauseParser.tableNameColList(); }

	public HiveParser_IdentifiersParser.precedenceEqualNegatableOperator_return precedenceEqualNegatableOperator() throws RecognitionException { return gIdentifiersParser.precedenceEqualNegatableOperator(); }

	public HiveParser_SelectClauseParser.window_specification_return window_specification() throws RecognitionException { return gSelectClauseParser.window_specification(); }

	public HiveParser_IdentifiersParser.precedenceAndOperator_return precedenceAndOperator() throws RecognitionException { return gIdentifiersParser.precedenceAndOperator(); }

	public HiveParser_FromClauseParser.aliasList_return aliasList() throws RecognitionException { return gFromClauseParser.aliasList(); }

	public HiveParser_IdentifiersParser.identifier_return identifier() throws RecognitionException { return gIdentifiersParser.identifier(); }

	public HiveParser_SelectClauseParser.window_frame_start_boundary_return window_frame_start_boundary() throws RecognitionException { return gSelectClauseParser.window_frame_start_boundary(); }

	public HiveParser_FromClauseParser.tableOrColumn_return tableOrColumn() throws RecognitionException { return gFromClauseParser.tableOrColumn(); }

	public HiveParser_SelectClauseParser.window_frame_return window_frame() throws RecognitionException { return gSelectClauseParser.window_frame(); }

	public HiveParser_FromClauseParser.lateralView_return lateralView() throws RecognitionException { return gFromClauseParser.lateralView(); }

	public HiveParser_IdentifiersParser.groupingSetExpression_return groupingSetExpression() throws RecognitionException { return gIdentifiersParser.groupingSetExpression(); }

	public HiveParser_IdentifiersParser.precedenceAmpersandExpression_return precedenceAmpersandExpression() throws RecognitionException { return gIdentifiersParser.precedenceAmpersandExpression(); }

	public HiveParser_IdentifiersParser.expression_return expression() throws RecognitionException { return gIdentifiersParser.expression(); }

	public HiveParser_FromClauseParser.valuesClause_return valuesClause() throws RecognitionException { return gFromClauseParser.valuesClause(); }

	public HiveParser_IdentifiersParser.clusterByClause_return clusterByClause() throws RecognitionException { return gIdentifiersParser.clusterByClause(); }

	public HiveParser_IdentifiersParser.precedenceEqualExpressionMutiple_return precedenceEqualExpressionMutiple() throws RecognitionException { return gIdentifiersParser.precedenceEqualExpressionMutiple(); }

	public HiveParser_IdentifiersParser.precedenceEqualExpression_return precedenceEqualExpression() throws RecognitionException { return gIdentifiersParser.precedenceEqualExpression(); }

	public HiveParser_IdentifiersParser.descFuncNames_return descFuncNames() throws RecognitionException { return gIdentifiersParser.descFuncNames(); }

	public HiveParser_FromClauseParser.subQuerySource_return subQuerySource() throws RecognitionException { return gFromClauseParser.subQuerySource(); }

	public final boolean synpred18_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred18_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred21_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred21_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred7_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred7_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred11_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred11_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred15_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred15_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred13_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred13_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred10_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred10_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred8_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred8_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred4_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred4_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred2_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred2_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred6_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred6_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred22_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred22_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred19_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred19_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred14_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred14_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred17_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred17_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred20_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred20_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred12_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred12_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred3_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred3_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred9_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred9_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred16_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred16_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred5_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred5_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred1_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA12 dfa12 = new DFA12(this);
	protected DFA112 dfa112 = new DFA112(this);
	protected DFA203 dfa203 = new DFA203(this);
	protected DFA237 dfa237 = new DFA237(this);
	static final String DFA12_eotS =
		"\u00b8\uffff";
	static final String DFA12_eofS =
		"\u00b8\uffff";
	static final String DFA12_minS =
		"\1\33\1\117\1\uffff\1\117\4\uffff\1\75\3\uffff\2\117\2\32\2\uffff\1\157"+
		"\14\uffff\1\176\37\uffff\7\12\1\uffff\3\12\4\uffff\10\12\1\uffff\3\12"+
		"\14\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\1\uffff\1\0\4\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0";
	static final String DFA12_maxS =
		"\1\u0126\1\u012f\1\uffff\1\u012f\4\uffff\1\u0116\3\uffff\2\u010a\2\u0216"+
		"\2\uffff\1\u010a\14\uffff\1\u00ab\37\uffff\7\u013b\1\uffff\3\u013b\4\uffff"+
		"\1\u00c0\7\u013b\1\uffff\3\u013b\14\uffff\1\0\1\uffff\1\0\1\uffff\1\0"+
		"\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1"+
		"\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\4\uffff"+
		"\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0";
	static final String DFA12_acceptS =
		"\2\uffff\1\2\1\uffff\1\6\1\7\1\10\2\uffff\1\12\1\22\1\24\4\uffff\1\43"+
		"\1\45\1\uffff\1\17\1\31\1\1\1\uffff\1\4\1\uffff\1\13\1\uffff\1\15\1\5"+
		"\1\14\1\20\1\uffff\1\32\1\3\1\uffff\1\21\1\11\12\uffff\1\35\1\36\1\37"+
		"\1\40\1\44\5\uffff\1\25\1\27\1\uffff\1\26\1\30\10\uffff\1\33\3\uffff\1"+
		"\41\13\uffff\1\34\3\uffff\1\42\4\uffff\1\16\3\uffff\1\23\1\uffff\1\33"+
		"\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff"+
		"\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33"+
		"\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff"+
		"\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\34\2\uffff\1\34\1\uffff\1\34"+
		"\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff"+
		"\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34"+
		"\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff"+
		"\1\34\1\uffff\1\34\1\uffff";
	static final String DFA12_specialS =
		"\16\uffff\1\0\1\1\57\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1"+
		"\12\1\13\4\uffff\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\uffff\1\24"+
		"\1\25\1\26\14\uffff\1\27\1\uffff\1\30\1\uffff\1\31\1\uffff\1\32\1\uffff"+
		"\1\33\1\uffff\1\34\1\uffff\1\35\1\uffff\1\36\1\uffff\1\37\1\uffff\1\40"+
		"\1\uffff\1\41\1\uffff\1\42\1\uffff\1\43\1\uffff\1\44\1\uffff\1\45\1\uffff"+
		"\1\46\1\uffff\1\47\1\uffff\1\50\1\uffff\1\51\1\uffff\1\52\4\uffff\1\53"+
		"\1\uffff\1\54\1\uffff\1\55\1\uffff\1\56\1\uffff\1\57\1\uffff\1\60\1\uffff"+
		"\1\61\1\uffff\1\62\1\uffff\1\63\1\uffff\1\64\1\uffff\1\65\1\uffff\1\66"+
		"\1\uffff\1\67\1\uffff\1\70\1\uffff\1\71\1\uffff\1\72\1\uffff\1\73\1\uffff"+
		"\1\74\1\uffff\1\75\1\uffff\1\76}>";
	static final String[] DFA12_transitionS = {
			"\1\21\4\uffff\1\5\1\13\45\uffff\1\1\23\uffff\2\6\6\uffff\1\3\34\uffff"+
			"\1\16\46\uffff\1\14\14\uffff\1\11\53\uffff\1\12\6\uffff\1\17\21\uffff"+
			"\1\20\2\uffff\1\10\35\uffff\1\4\6\uffff\1\15\4\uffff\1\2",
			"\1\25\37\uffff\1\27\16\uffff\1\33\12\uffff\1\23\67\uffff\1\31\51\uffff"+
			"\1\24\5\uffff\1\25\30\uffff\1\27\3\uffff\1\22\40\uffff\1\31",
			"",
			"\1\41\56\uffff\1\43\12\uffff\1\36\141\uffff\1\40\5\uffff\1\41\30\uffff"+
			"\1\34\3\uffff\1\37\40\uffff\1\35",
			"",
			"",
			"",
			"",
			"\1\44\3\uffff\1\44\2\uffff\1\44\2\uffff\1\44\2\uffff\1\63\5\uffff\1"+
			"\44\52\uffff\1\44\3\uffff\1\44\1\57\10\uffff\2\44\35\uffff\1\44\44\uffff"+
			"\1\44\6\uffff\1\61\26\uffff\1\60\1\62\5\uffff\1\44\27\uffff\2\44\1\uffff"+
			"\1\44\10\uffff\1\44",
			"",
			"",
			"",
			"\1\72\u00a1\uffff\1\72\30\uffff\1\71",
			"\1\75\u00a1\uffff\1\75\30\uffff\1\74",
			"\5\112\1\77\1\100\1\112\1\uffff\17\112\1\uffff\1\112\2\uffff\1\112\1"+
			"\uffff\4\112\1\uffff\2\112\1\uffff\4\112\1\uffff\2\112\1\102\1\uffff"+
			"\1\112\1\uffff\4\112\1\uffff\10\112\1\111\7\112\1\uffff\2\112\1\103\1"+
			"\112\1\uffff\1\112\1\uffff\1\112\1\uffff\4\112\1\uffff\10\112\1\uffff"+
			"\4\112\1\uffff\1\112\1\uffff\4\112\1\uffff\2\112\1\uffff\2\112\1\104"+
			"\5\112\1\110\2\112\1\uffff\5\112\1\uffff\6\112\1\uffff\7\112\1\105\3"+
			"\112\2\uffff\6\112\1\uffff\4\112\1\uffff\5\112\2\uffff\1\112\1\uffff"+
			"\5\112\1\uffff\2\112\1\uffff\5\112\2\uffff\13\112\1\uffff\17\112\1\uffff"+
			"\6\112\1\106\10\112\1\107\6\112\1\uffff\7\112\1\uffff\3\112\1\uffff\6"+
			"\112\1\uffff\4\112\1\uffff\3\112\1\uffff\3\112\1\101\11\112\1\uffff\1"+
			"\112\2\uffff\1\112\1\uffff\4\112\u0089\uffff\1\112\3\uffff\1\112\60\uffff"+
			"\1\112\3\uffff\1\112\27\uffff\1\112\3\uffff\1\112",
			"\5\132\1\117\1\120\1\132\1\uffff\17\132\1\uffff\1\132\2\uffff\1\132"+
			"\1\uffff\4\132\1\uffff\2\132\1\uffff\4\132\1\uffff\2\132\1\122\1\uffff"+
			"\1\132\1\uffff\4\132\1\uffff\10\132\1\131\7\132\1\uffff\2\132\1\123\1"+
			"\132\1\uffff\1\132\1\uffff\1\132\1\uffff\4\132\1\uffff\10\132\1\uffff"+
			"\4\132\1\uffff\1\132\1\uffff\1\132\1\116\2\132\1\uffff\2\132\1\uffff"+
			"\2\132\1\124\5\132\1\130\2\132\1\uffff\5\132\1\uffff\6\132\1\uffff\7"+
			"\132\1\125\3\132\2\uffff\6\132\1\uffff\4\132\1\uffff\5\132\2\uffff\1"+
			"\132\1\uffff\5\132\1\uffff\2\132\1\uffff\5\132\2\uffff\13\132\1\uffff"+
			"\17\132\1\uffff\6\132\1\126\10\132\1\127\6\132\1\uffff\7\132\1\uffff"+
			"\3\132\1\uffff\6\132\1\uffff\4\132\1\uffff\3\132\1\uffff\3\132\1\121"+
			"\11\132\1\uffff\1\132\2\uffff\1\132\1\uffff\4\132\u0089\uffff\1\132\3"+
			"\uffff\1\132\60\uffff\1\132\3\uffff\1\132\27\uffff\1\132\3\uffff\1\132",
			"",
			"",
			"\1\27\16\uffff\1\33\54\uffff\1\137\136\uffff\1\27",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\43\54\uffff\1\143",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\146\u00b3\uffff\1\147\124\uffff\1\150\47\uffff\1\145",
			"\1\152\u00b3\uffff\1\153\124\uffff\1\154\47\uffff\1\151",
			"\1\156\u00b3\uffff\1\157\124\uffff\1\160\47\uffff\1\155",
			"\1\162\u00b3\uffff\1\163\124\uffff\1\164\47\uffff\1\161",
			"\1\166\u00b3\uffff\1\167\124\uffff\1\170\47\uffff\1\165",
			"\1\172\u00b3\uffff\1\173\124\uffff\1\174\47\uffff\1\171",
			"\1\176\u00b3\uffff\1\177\124\uffff\1\u0080\47\uffff\1\175",
			"",
			"\1\u0082\u00b3\uffff\1\u0083\124\uffff\1\u0084\47\uffff\1\u0081",
			"\1\u0086\u00b3\uffff\1\u0087\124\uffff\1\u0088\47\uffff\1\u0085",
			"\1\u008a\u00b3\uffff\1\u008b\124\uffff\1\u008c\47\uffff\1\u0089",
			"",
			"",
			"",
			"",
			"\1\132\161\uffff\1\132\103\uffff\1\u008d",
			"\1\u0091\161\uffff\1\u0093\101\uffff\1\u0092\174\uffff\1\u0090",
			"\1\u0095\161\uffff\1\u0097\101\uffff\1\u0096\174\uffff\1\u0094",
			"\1\u0099\161\uffff\1\u009b\101\uffff\1\u009a\174\uffff\1\u0098",
			"\1\u009d\161\uffff\1\u009f\101\uffff\1\u009e\174\uffff\1\u009c",
			"\1\u00a1\161\uffff\1\u00a3\101\uffff\1\u00a2\174\uffff\1\u00a0",
			"\1\u00a5\161\uffff\1\u00a7\101\uffff\1\u00a6\174\uffff\1\u00a4",
			"\1\u00a9\161\uffff\1\u00ab\101\uffff\1\u00aa\174\uffff\1\u00a8",
			"",
			"\1\u00ad\161\uffff\1\u00af\101\uffff\1\u00ae\174\uffff\1\u00ac",
			"\1\u00b1\161\uffff\1\u00b3\101\uffff\1\u00b2\174\uffff\1\u00b0",
			"\1\u00b5\161\uffff\1\u00b7\101\uffff\1\u00b6\174\uffff\1\u00b4",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff"
	};

	static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
	static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
	static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
	static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
	static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
	static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
	static final short[][] DFA12_transition;

	static {
		int numStates = DFA12_transitionS.length;
		DFA12_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
		}
	}

	protected class DFA12 extends DFA {

		public DFA12(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 12;
			this.eot = DFA12_eot;
			this.eof = DFA12_eof;
			this.min = DFA12_min;
			this.max = DFA12_max;
			this.accept = DFA12_accept;
			this.special = DFA12_special;
			this.transition = DFA12_transition;
		}
		@Override
		public String getDescription() {
			return "772:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createMacroStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | reloadFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole | abortTransactionStatement );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA12_14 = input.LA(1);
						 
						int index12_14 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_14==KW_ALL) ) {s = 63;}
						else if ( (LA12_14==KW_ALTER) ) {s = 64;}
						else if ( (LA12_14==KW_UPDATE) ) {s = 65;}
						else if ( (LA12_14==KW_CREATE) ) {s = 66;}
						else if ( (LA12_14==KW_DROP) ) {s = 67;}
						else if ( (LA12_14==KW_INDEX) ) {s = 68;}
						else if ( (LA12_14==KW_LOCK) ) {s = 69;}
						else if ( (LA12_14==KW_SELECT) && (synpred1_HiveParser())) {s = 70;}
						else if ( (LA12_14==KW_SHOW_DATABASE) ) {s = 71;}
						else if ( (LA12_14==KW_INSERT) ) {s = 72;}
						else if ( (LA12_14==KW_DELETE) ) {s = 73;}
						else if ( ((LA12_14 >= Identifier && LA12_14 <= KW_AFTER)||LA12_14==KW_ANALYZE||(LA12_14 >= KW_ARCHIVE && LA12_14 <= KW_BY)||LA12_14==KW_CASCADE||LA12_14==KW_CHANGE||(LA12_14 >= KW_CLUSTER && LA12_14 <= KW_COLLECTION)||(LA12_14 >= KW_COLUMNS && LA12_14 <= KW_COMMENT)||(LA12_14 >= KW_COMPACT && LA12_14 <= KW_CONCATENATE)||(LA12_14 >= KW_CONSTRAINT && LA12_14 <= KW_CONTINUE)||LA12_14==KW_CUBE||(LA12_14 >= KW_CURRENT_DATE && LA12_14 <= KW_DATA)||(LA12_14 >= KW_DATABASES && LA12_14 <= KW_DEFINED)||(LA12_14 >= KW_DELIMITED && LA12_14 <= KW_DISABLE)||(LA12_14 >= KW_DISTRIBUTE && LA12_14 <= KW_DOUBLE)||LA12_14==KW_ELEM_TYPE||LA12_14==KW_ENABLE||LA12_14==KW_ESCAPED||(LA12_14 >= KW_EXCLUSIVE && LA12_14 <= KW_EXPORT)||(LA12_14 >= KW_EXTERNAL && LA12_14 <= KW_FLOAT)||(LA12_14 >= KW_FOR && LA12_14 <= KW_FORMATTED)||LA12_14==KW_FULL||(LA12_14 >= KW_FUNCTIONS && LA12_14 <= KW_GROUPING)||(LA12_14 >= KW_HOUR && LA12_14 <= KW_IDXPROPERTIES)||(LA12_14 >= KW_IMPORT && LA12_14 <= KW_IN)||(LA12_14 >= KW_INDEXES && LA12_14 <= KW_INPUTFORMAT)||(LA12_14 >= KW_INT && LA12_14 <= KW_INTERSECT)||(LA12_14 >= KW_INTO && LA12_14 <= KW_JAR)||(LA12_14 >= KW_KEY && LA12_14 <= KW_LEFT)||(LA12_14 >= KW_LEVEL && LA12_14 <= KW_LOCATION)||(LA12_14 >= KW_LOCKS && LA12_14 <= KW_LONG)||(LA12_14 >= KW_MAPJOIN && LA12_14 <= KW_MONTH)||(LA12_14 >= KW_MSCK && LA12_14 <= KW_NOSCAN)||(LA12_14 >= KW_NOVALIDATE && LA12_14 <= KW_OFFSET)||LA12_14==KW_OPTION||(LA12_14 >= KW_ORDER && LA12_14 <= KW_OUTPUTFORMAT)||(LA12_14 >= KW_OVERWRITE && LA12_14 <= KW_OWNER)||(LA12_14 >= KW_PARTITION && LA12_14 <= KW_PLUS)||(LA12_14 >= KW_PRETTY && LA12_14 <= KW_RECORDWRITER)||(LA12_14 >= KW_REFERENCES && LA12_14 <= KW_ROLES)||(LA12_14 >= KW_ROLLUP && LA12_14 <= KW_SECOND)||(LA12_14 >= KW_SEMI && LA12_14 <= KW_SHOW)||(LA12_14 >= KW_SKEWED && LA12_14 <= KW_SSL)||(LA12_14 >= KW_STATISTICS && LA12_14 <= KW_TABLES)||(LA12_14 >= KW_TBLPROPERTIES && LA12_14 <= KW_TERMINATED)||(LA12_14 >= KW_TIMESTAMP && LA12_14 <= KW_TRANSACTIONS)||(LA12_14 >= KW_TRIGGER && LA12_14 <= KW_UNARCHIVE)||(LA12_14 >= KW_UNDO && LA12_14 <= KW_UNIONTYPE)||(LA12_14 >= KW_UNLOCK && LA12_14 <= KW_UNSIGNED)||(LA12_14 >= KW_URI && LA12_14 <= KW_VALUE_TYPE)||LA12_14==KW_VIEW||LA12_14==KW_WHILE||(LA12_14 >= KW_WITH && LA12_14 <= KW_YEAR)||LA12_14==KW_HOLD_DDLTIME||LA12_14==KW_IGNORE||LA12_14==KW_NO_DROP||LA12_14==KW_OFFLINE||LA12_14==KW_PROTECTION||LA12_14==KW_READONLY) ) {s = 74;}
						 
						input.seek(index12_14);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA12_15 = input.LA(1);
						 
						int index12_15 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_15==KW_GRANT) ) {s = 78;}
						else if ( (LA12_15==KW_ALL) ) {s = 79;}
						else if ( (LA12_15==KW_ALTER) ) {s = 80;}
						else if ( (LA12_15==KW_UPDATE) ) {s = 81;}
						else if ( (LA12_15==KW_CREATE) ) {s = 82;}
						else if ( (LA12_15==KW_DROP) ) {s = 83;}
						else if ( (LA12_15==KW_INDEX) ) {s = 84;}
						else if ( (LA12_15==KW_LOCK) ) {s = 85;}
						else if ( (LA12_15==KW_SELECT) && (synpred2_HiveParser())) {s = 86;}
						else if ( (LA12_15==KW_SHOW_DATABASE) ) {s = 87;}
						else if ( (LA12_15==KW_INSERT) ) {s = 88;}
						else if ( (LA12_15==KW_DELETE) ) {s = 89;}
						else if ( ((LA12_15 >= Identifier && LA12_15 <= KW_AFTER)||LA12_15==KW_ANALYZE||(LA12_15 >= KW_ARCHIVE && LA12_15 <= KW_BY)||LA12_15==KW_CASCADE||LA12_15==KW_CHANGE||(LA12_15 >= KW_CLUSTER && LA12_15 <= KW_COLLECTION)||(LA12_15 >= KW_COLUMNS && LA12_15 <= KW_COMMENT)||(LA12_15 >= KW_COMPACT && LA12_15 <= KW_CONCATENATE)||(LA12_15 >= KW_CONSTRAINT && LA12_15 <= KW_CONTINUE)||LA12_15==KW_CUBE||(LA12_15 >= KW_CURRENT_DATE && LA12_15 <= KW_DATA)||(LA12_15 >= KW_DATABASES && LA12_15 <= KW_DEFINED)||(LA12_15 >= KW_DELIMITED && LA12_15 <= KW_DISABLE)||(LA12_15 >= KW_DISTRIBUTE && LA12_15 <= KW_DOUBLE)||LA12_15==KW_ELEM_TYPE||LA12_15==KW_ENABLE||LA12_15==KW_ESCAPED||(LA12_15 >= KW_EXCLUSIVE && LA12_15 <= KW_EXPORT)||(LA12_15 >= KW_EXTERNAL && LA12_15 <= KW_FLOAT)||(LA12_15 >= KW_FOR && LA12_15 <= KW_FORMATTED)||LA12_15==KW_FULL||LA12_15==KW_FUNCTIONS||(LA12_15 >= KW_GROUP && LA12_15 <= KW_GROUPING)||(LA12_15 >= KW_HOUR && LA12_15 <= KW_IDXPROPERTIES)||(LA12_15 >= KW_IMPORT && LA12_15 <= KW_IN)||(LA12_15 >= KW_INDEXES && LA12_15 <= KW_INPUTFORMAT)||(LA12_15 >= KW_INT && LA12_15 <= KW_INTERSECT)||(LA12_15 >= KW_INTO && LA12_15 <= KW_JAR)||(LA12_15 >= KW_KEY && LA12_15 <= KW_LEFT)||(LA12_15 >= KW_LEVEL && LA12_15 <= KW_LOCATION)||(LA12_15 >= KW_LOCKS && LA12_15 <= KW_LONG)||(LA12_15 >= KW_MAPJOIN && LA12_15 <= KW_MONTH)||(LA12_15 >= KW_MSCK && LA12_15 <= KW_NOSCAN)||(LA12_15 >= KW_NOVALIDATE && LA12_15 <= KW_OFFSET)||LA12_15==KW_OPTION||(LA12_15 >= KW_ORDER && LA12_15 <= KW_OUTPUTFORMAT)||(LA12_15 >= KW_OVERWRITE && LA12_15 <= KW_OWNER)||(LA12_15 >= KW_PARTITION && LA12_15 <= KW_PLUS)||(LA12_15 >= KW_PRETTY && LA12_15 <= KW_RECORDWRITER)||(LA12_15 >= KW_REFERENCES && LA12_15 <= KW_ROLES)||(LA12_15 >= KW_ROLLUP && LA12_15 <= KW_SECOND)||(LA12_15 >= KW_SEMI && LA12_15 <= KW_SHOW)||(LA12_15 >= KW_SKEWED && LA12_15 <= KW_SSL)||(LA12_15 >= KW_STATISTICS && LA12_15 <= KW_TABLES)||(LA12_15 >= KW_TBLPROPERTIES && LA12_15 <= KW_TERMINATED)||(LA12_15 >= KW_TIMESTAMP && LA12_15 <= KW_TRANSACTIONS)||(LA12_15 >= KW_TRIGGER && LA12_15 <= KW_UNARCHIVE)||(LA12_15 >= KW_UNDO && LA12_15 <= KW_UNIONTYPE)||(LA12_15 >= KW_UNLOCK && LA12_15 <= KW_UNSIGNED)||(LA12_15 >= KW_URI && LA12_15 <= KW_VALUE_TYPE)||LA12_15==KW_VIEW||LA12_15==KW_WHILE||(LA12_15 >= KW_WITH && LA12_15 <= KW_YEAR)||LA12_15==KW_HOLD_DDLTIME||LA12_15==KW_IGNORE||LA12_15==KW_NO_DROP||LA12_15==KW_OFFLINE||LA12_15==KW_PROTECTION||LA12_15==KW_READONLY) ) {s = 90;}
						 
						input.seek(index12_15);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA12_63 = input.LA(1);
						 
						int index12_63 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_63==LPAREN) && (synpred1_HiveParser())) {s = 101;}
						else if ( (LA12_63==COMMA) ) {s = 102;}
						else if ( (LA12_63==KW_ON) && (synpred1_HiveParser())) {s = 103;}
						else if ( (LA12_63==KW_TO) ) {s = 104;}
						 
						input.seek(index12_63);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA12_64 = input.LA(1);
						 
						int index12_64 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_64==LPAREN) && (synpred1_HiveParser())) {s = 105;}
						else if ( (LA12_64==COMMA) ) {s = 106;}
						else if ( (LA12_64==KW_ON) && (synpred1_HiveParser())) {s = 107;}
						else if ( (LA12_64==KW_TO) ) {s = 108;}
						 
						input.seek(index12_64);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA12_65 = input.LA(1);
						 
						int index12_65 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_65==LPAREN) && (synpred1_HiveParser())) {s = 109;}
						else if ( (LA12_65==COMMA) ) {s = 110;}
						else if ( (LA12_65==KW_ON) && (synpred1_HiveParser())) {s = 111;}
						else if ( (LA12_65==KW_TO) ) {s = 112;}
						 
						input.seek(index12_65);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA12_66 = input.LA(1);
						 
						int index12_66 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_66==LPAREN) && (synpred1_HiveParser())) {s = 113;}
						else if ( (LA12_66==COMMA) ) {s = 114;}
						else if ( (LA12_66==KW_ON) && (synpred1_HiveParser())) {s = 115;}
						else if ( (LA12_66==KW_TO) ) {s = 116;}
						 
						input.seek(index12_66);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA12_67 = input.LA(1);
						 
						int index12_67 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_67==LPAREN) && (synpred1_HiveParser())) {s = 117;}
						else if ( (LA12_67==COMMA) ) {s = 118;}
						else if ( (LA12_67==KW_ON) && (synpred1_HiveParser())) {s = 119;}
						else if ( (LA12_67==KW_TO) ) {s = 120;}
						 
						input.seek(index12_67);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA12_68 = input.LA(1);
						 
						int index12_68 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_68==LPAREN) && (synpred1_HiveParser())) {s = 121;}
						else if ( (LA12_68==COMMA) ) {s = 122;}
						else if ( (LA12_68==KW_ON) && (synpred1_HiveParser())) {s = 123;}
						else if ( (LA12_68==KW_TO) ) {s = 124;}
						 
						input.seek(index12_68);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA12_69 = input.LA(1);
						 
						int index12_69 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_69==LPAREN) && (synpred1_HiveParser())) {s = 125;}
						else if ( (LA12_69==COMMA) ) {s = 126;}
						else if ( (LA12_69==KW_ON) && (synpred1_HiveParser())) {s = 127;}
						else if ( (LA12_69==KW_TO) ) {s = 128;}
						 
						input.seek(index12_69);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA12_71 = input.LA(1);
						 
						int index12_71 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_71==LPAREN) && (synpred1_HiveParser())) {s = 129;}
						else if ( (LA12_71==COMMA) ) {s = 130;}
						else if ( (LA12_71==KW_ON) && (synpred1_HiveParser())) {s = 131;}
						else if ( (LA12_71==KW_TO) ) {s = 132;}
						 
						input.seek(index12_71);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA12_72 = input.LA(1);
						 
						int index12_72 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_72==LPAREN) && (synpred1_HiveParser())) {s = 133;}
						else if ( (LA12_72==COMMA) ) {s = 134;}
						else if ( (LA12_72==KW_ON) && (synpred1_HiveParser())) {s = 135;}
						else if ( (LA12_72==KW_TO) ) {s = 136;}
						 
						input.seek(index12_72);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA12_73 = input.LA(1);
						 
						int index12_73 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_73==LPAREN) && (synpred1_HiveParser())) {s = 137;}
						else if ( (LA12_73==COMMA) ) {s = 138;}
						else if ( (LA12_73==KW_ON) && (synpred1_HiveParser())) {s = 139;}
						else if ( (LA12_73==KW_TO) ) {s = 140;}
						 
						input.seek(index12_73);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA12_78 = input.LA(1);
						 
						int index12_78 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_78==KW_OPTION) && (synpred2_HiveParser())) {s = 141;}
						else if ( (LA12_78==COMMA||LA12_78==KW_FROM) ) {s = 90;}
						 
						input.seek(index12_78);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA12_79 = input.LA(1);
						 
						int index12_79 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_79==LPAREN) && (synpred2_HiveParser())) {s = 144;}
						else if ( (LA12_79==COMMA) ) {s = 145;}
						else if ( (LA12_79==KW_ON) && (synpred2_HiveParser())) {s = 146;}
						else if ( (LA12_79==KW_FROM) ) {s = 147;}
						 
						input.seek(index12_79);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA12_80 = input.LA(1);
						 
						int index12_80 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_80==LPAREN) && (synpred2_HiveParser())) {s = 148;}
						else if ( (LA12_80==COMMA) ) {s = 149;}
						else if ( (LA12_80==KW_ON) && (synpred2_HiveParser())) {s = 150;}
						else if ( (LA12_80==KW_FROM) ) {s = 151;}
						 
						input.seek(index12_80);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA12_81 = input.LA(1);
						 
						int index12_81 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_81==LPAREN) && (synpred2_HiveParser())) {s = 152;}
						else if ( (LA12_81==COMMA) ) {s = 153;}
						else if ( (LA12_81==KW_ON) && (synpred2_HiveParser())) {s = 154;}
						else if ( (LA12_81==KW_FROM) ) {s = 155;}
						 
						input.seek(index12_81);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA12_82 = input.LA(1);
						 
						int index12_82 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_82==LPAREN) && (synpred2_HiveParser())) {s = 156;}
						else if ( (LA12_82==COMMA) ) {s = 157;}
						else if ( (LA12_82==KW_ON) && (synpred2_HiveParser())) {s = 158;}
						else if ( (LA12_82==KW_FROM) ) {s = 159;}
						 
						input.seek(index12_82);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA12_83 = input.LA(1);
						 
						int index12_83 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_83==LPAREN) && (synpred2_HiveParser())) {s = 160;}
						else if ( (LA12_83==COMMA) ) {s = 161;}
						else if ( (LA12_83==KW_ON) && (synpred2_HiveParser())) {s = 162;}
						else if ( (LA12_83==KW_FROM) ) {s = 163;}
						 
						input.seek(index12_83);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA12_84 = input.LA(1);
						 
						int index12_84 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_84==LPAREN) && (synpred2_HiveParser())) {s = 164;}
						else if ( (LA12_84==COMMA) ) {s = 165;}
						else if ( (LA12_84==KW_ON) && (synpred2_HiveParser())) {s = 166;}
						else if ( (LA12_84==KW_FROM) ) {s = 167;}
						 
						input.seek(index12_84);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA12_85 = input.LA(1);
						 
						int index12_85 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_85==LPAREN) && (synpred2_HiveParser())) {s = 168;}
						else if ( (LA12_85==COMMA) ) {s = 169;}
						else if ( (LA12_85==KW_ON) && (synpred2_HiveParser())) {s = 170;}
						else if ( (LA12_85==KW_FROM) ) {s = 171;}
						 
						input.seek(index12_85);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA12_87 = input.LA(1);
						 
						int index12_87 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_87==LPAREN) && (synpred2_HiveParser())) {s = 172;}
						else if ( (LA12_87==COMMA) ) {s = 173;}
						else if ( (LA12_87==KW_ON) && (synpred2_HiveParser())) {s = 174;}
						else if ( (LA12_87==KW_FROM) ) {s = 175;}
						 
						input.seek(index12_87);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA12_88 = input.LA(1);
						 
						int index12_88 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_88==LPAREN) && (synpred2_HiveParser())) {s = 176;}
						else if ( (LA12_88==COMMA) ) {s = 177;}
						else if ( (LA12_88==KW_ON) && (synpred2_HiveParser())) {s = 178;}
						else if ( (LA12_88==KW_FROM) ) {s = 179;}
						 
						input.seek(index12_88);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA12_89 = input.LA(1);
						 
						int index12_89 = input.index();
						input.rewind();
						s = -1;
						if ( (LA12_89==LPAREN) && (synpred2_HiveParser())) {s = 180;}
						else if ( (LA12_89==COMMA) ) {s = 181;}
						else if ( (LA12_89==KW_ON) && (synpred2_HiveParser())) {s = 182;}
						else if ( (LA12_89==KW_FROM) ) {s = 183;}
						 
						input.seek(index12_89);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA12_102 = input.LA(1);
						 
						int index12_102 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_102);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA12_104 = input.LA(1);
						 
						int index12_104 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_104);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA12_106 = input.LA(1);
						 
						int index12_106 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_106);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA12_108 = input.LA(1);
						 
						int index12_108 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_108);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA12_110 = input.LA(1);
						 
						int index12_110 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_110);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA12_112 = input.LA(1);
						 
						int index12_112 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_112);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA12_114 = input.LA(1);
						 
						int index12_114 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_114);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA12_116 = input.LA(1);
						 
						int index12_116 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_116);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA12_118 = input.LA(1);
						 
						int index12_118 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_118);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA12_120 = input.LA(1);
						 
						int index12_120 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_120);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA12_122 = input.LA(1);
						 
						int index12_122 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_122);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA12_124 = input.LA(1);
						 
						int index12_124 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_124);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA12_126 = input.LA(1);
						 
						int index12_126 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_126);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA12_128 = input.LA(1);
						 
						int index12_128 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_128);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA12_130 = input.LA(1);
						 
						int index12_130 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_130);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA12_132 = input.LA(1);
						 
						int index12_132 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_132);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA12_134 = input.LA(1);
						 
						int index12_134 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_134);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA12_136 = input.LA(1);
						 
						int index12_136 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_136);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA12_138 = input.LA(1);
						 
						int index12_138 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_138);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA12_140 = input.LA(1);
						 
						int index12_140 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 139;}
						else if ( (true) ) {s = 74;}
						 
						input.seek(index12_140);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA12_145 = input.LA(1);
						 
						int index12_145 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_145);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA12_147 = input.LA(1);
						 
						int index12_147 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_147);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA12_149 = input.LA(1);
						 
						int index12_149 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_149);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA12_151 = input.LA(1);
						 
						int index12_151 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_151);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA12_153 = input.LA(1);
						 
						int index12_153 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_153);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA12_155 = input.LA(1);
						 
						int index12_155 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_155);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA12_157 = input.LA(1);
						 
						int index12_157 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_157);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA12_159 = input.LA(1);
						 
						int index12_159 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_159);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA12_161 = input.LA(1);
						 
						int index12_161 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_161);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA12_163 = input.LA(1);
						 
						int index12_163 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_163);
						if ( s>=0 ) return s;
						break;

					case 53 : 
						int LA12_165 = input.LA(1);
						 
						int index12_165 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_165);
						if ( s>=0 ) return s;
						break;

					case 54 : 
						int LA12_167 = input.LA(1);
						 
						int index12_167 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_167);
						if ( s>=0 ) return s;
						break;

					case 55 : 
						int LA12_169 = input.LA(1);
						 
						int index12_169 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_169);
						if ( s>=0 ) return s;
						break;

					case 56 : 
						int LA12_171 = input.LA(1);
						 
						int index12_171 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_171);
						if ( s>=0 ) return s;
						break;

					case 57 : 
						int LA12_173 = input.LA(1);
						 
						int index12_173 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_173);
						if ( s>=0 ) return s;
						break;

					case 58 : 
						int LA12_175 = input.LA(1);
						 
						int index12_175 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_175);
						if ( s>=0 ) return s;
						break;

					case 59 : 
						int LA12_177 = input.LA(1);
						 
						int index12_177 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_177);
						if ( s>=0 ) return s;
						break;

					case 60 : 
						int LA12_179 = input.LA(1);
						 
						int index12_179 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_179);
						if ( s>=0 ) return s;
						break;

					case 61 : 
						int LA12_181 = input.LA(1);
						 
						int index12_181 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_181);
						if ( s>=0 ) return s;
						break;

					case 62 : 
						int LA12_183 = input.LA(1);
						 
						int index12_183 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 182;}
						else if ( (true) ) {s = 90;}
						 
						input.seek(index12_183);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 12, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA112_eotS =
		"\130\uffff";
	static final String DFA112_eofS =
		"\2\uffff\1\7\1\uffff\1\7\1\uffff\1\7\121\uffff";
	static final String DFA112_minS =
		"\1\32\1\uffff\1\21\1\uffff\1\21\1\uffff\1\21\4\uffff\3\0\1\uffff\1\0\1"+
		"\uffff\3\0\1\uffff\1\0\1\uffff\3\0\1\uffff\1\0\74\uffff";
	static final String DFA112_maxS =
		"\1\u0216\1\uffff\1\u0216\1\uffff\1\u0216\1\uffff\1\u0216\4\uffff\3\0\1"+
		"\uffff\1\0\1\uffff\3\0\1\uffff\1\0\1\uffff\3\0\1\uffff\1\0\74\uffff";
	static final String DFA112_acceptS =
		"\1\uffff\1\1\1\uffff\1\2\1\uffff\1\3\1\uffff\1\4\2\uffff\1\1\115\uffff";
	static final String DFA112_specialS =
		"\1\0\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\uffff\1\5\1\uffff\1\6\1\7\1\10"+
		"\1\uffff\1\11\1\uffff\1\12\1\13\1\14\1\uffff\1\15\74\uffff}>";
	static final String[] DFA112_transitionS = {
			"\10\7\1\uffff\17\7\1\uffff\1\7\2\uffff\1\7\1\uffff\4\7\1\uffff\2\7\1"+
			"\uffff\4\7\1\uffff\3\7\1\uffff\1\7\1\uffff\4\7\1\1\20\7\1\uffff\4\7\1"+
			"\uffff\1\7\1\uffff\1\7\1\uffff\4\7\1\5\10\7\1\uffff\3\7\1\4\1\uffff\1"+
			"\7\1\3\4\7\1\uffff\2\7\1\uffff\13\7\1\uffff\5\7\1\uffff\6\7\1\uffff\13"+
			"\7\2\uffff\6\7\1\uffff\4\7\1\uffff\5\7\2\uffff\1\7\1\uffff\5\7\1\uffff"+
			"\2\7\1\uffff\5\7\2\uffff\1\6\12\7\1\uffff\17\7\1\uffff\3\7\1\2\2\7\1"+
			"\uffff\17\7\1\uffff\7\7\1\uffff\3\7\1\uffff\6\7\1\uffff\4\7\1\uffff\3"+
			"\7\1\uffff\15\7\1\uffff\1\7\2\uffff\1\7\1\uffff\4\7\u0089\uffff\1\7\3"+
			"\uffff\1\7\60\uffff\1\7\3\uffff\1\7\27\uffff\1\7\3\uffff\1\7",
			"",
			"\1\7\10\uffff\1\13\4\14\2\17\1\14\1\uffff\1\14\2\17\1\14\1\17\2\14\5"+
			"\17\2\14\1\17\1\uffff\1\14\2\uffff\1\14\1\uffff\4\14\1\uffff\2\14\1\uffff"+
			"\4\14\1\uffff\1\17\1\14\1\17\1\uffff\1\17\1\uffff\3\17\1\14\1\uffff\1"+
			"\14\1\17\3\14\1\17\2\14\1\17\3\14\1\17\3\14\1\uffff\1\14\2\17\1\14\1"+
			"\uffff\1\14\1\uffff\1\14\1\uffff\1\14\1\17\2\14\1\12\3\17\4\14\1\17\1"+
			"\uffff\2\17\2\14\1\uffff\1\17\1\uffff\1\14\3\17\1\uffff\2\14\1\uffff"+
			"\2\17\2\14\1\17\3\14\3\17\1\uffff\2\17\3\14\1\uffff\4\14\2\17\1\uffff"+
			"\1\14\1\17\3\14\1\17\5\14\2\uffff\6\14\1\uffff\1\14\1\17\2\14\1\uffff"+
			"\1\14\1\17\1\14\1\17\1\14\2\uffff\1\14\1\uffff\3\17\2\14\1\uffff\2\14"+
			"\1\uffff\1\15\2\14\1\17\1\14\2\uffff\1\14\1\17\1\14\1\17\1\14\1\17\1"+
			"\14\1\17\3\14\1\uffff\2\17\7\14\1\17\1\14\2\17\2\14\1\uffff\3\17\3\14"+
			"\1\uffff\4\14\1\17\5\14\1\17\4\14\1\uffff\5\14\1\17\1\14\1\uffff\3\14"+
			"\1\uffff\1\17\1\14\1\17\3\14\1\uffff\3\17\1\14\1\uffff\1\14\1\17\1\14"+
			"\1\uffff\3\14\1\17\2\14\2\17\3\14\1\17\1\14\1\uffff\1\14\2\uffff\1\14"+
			"\1\uffff\1\17\3\14\u0089\uffff\1\14\3\uffff\1\14\60\uffff\1\14\3\uffff"+
			"\1\14\27\uffff\1\14\3\uffff\1\14",
			"",
			"\1\7\10\uffff\1\21\4\22\2\25\1\22\1\uffff\1\22\2\25\1\22\1\25\2\22\5"+
			"\25\2\22\1\25\1\uffff\1\22\2\uffff\1\22\1\uffff\4\22\1\uffff\2\22\1\uffff"+
			"\4\22\1\uffff\1\25\1\22\1\25\1\uffff\1\25\1\uffff\3\25\1\22\1\uffff\1"+
			"\22\1\25\3\22\1\25\2\22\1\25\3\22\1\25\3\22\1\uffff\1\22\2\25\1\22\1"+
			"\uffff\1\22\1\uffff\1\22\1\uffff\1\22\1\25\2\22\1\uffff\3\25\4\22\1\25"+
			"\1\uffff\2\25\2\22\1\uffff\1\25\1\uffff\1\22\3\25\1\uffff\2\22\1\uffff"+
			"\2\25\2\22\1\25\3\22\3\25\1\uffff\2\25\3\22\1\uffff\4\22\2\25\1\uffff"+
			"\1\22\1\25\3\22\1\25\5\22\2\uffff\6\22\1\uffff\1\22\1\25\2\22\1\uffff"+
			"\1\22\1\25\1\22\1\25\1\22\2\uffff\1\22\1\uffff\3\25\2\22\1\uffff\2\22"+
			"\1\uffff\1\23\2\22\1\25\1\22\2\uffff\1\22\1\25\1\22\1\25\1\22\1\25\1"+
			"\22\1\25\3\22\1\uffff\2\25\7\22\1\25\1\22\2\25\2\22\1\uffff\3\25\3\22"+
			"\1\uffff\4\22\1\25\5\22\1\25\4\22\1\uffff\5\22\1\25\1\22\1\uffff\3\22"+
			"\1\uffff\1\25\1\22\1\25\3\22\1\uffff\3\25\1\22\1\uffff\1\22\1\25\1\22"+
			"\1\uffff\3\22\1\25\2\22\2\25\3\22\1\25\1\22\1\uffff\1\22\2\uffff\1\22"+
			"\1\uffff\1\25\3\22\u0089\uffff\1\22\3\uffff\1\22\60\uffff\1\22\3\uffff"+
			"\1\22\27\uffff\1\22\3\uffff\1\22",
			"",
			"\1\7\10\uffff\1\27\4\30\2\33\1\30\1\uffff\1\30\2\33\1\30\1\33\2\30\5"+
			"\33\2\30\1\33\1\uffff\1\30\2\uffff\1\30\1\uffff\4\30\1\uffff\2\30\1\uffff"+
			"\4\30\1\uffff\1\33\1\30\1\33\1\uffff\1\33\1\uffff\3\33\1\30\1\uffff\1"+
			"\30\1\33\3\30\1\33\2\30\1\33\3\30\1\33\3\30\1\uffff\1\30\2\33\1\30\1"+
			"\uffff\1\30\1\uffff\1\30\1\uffff\1\30\1\33\2\30\1\uffff\3\33\4\30\1\33"+
			"\1\uffff\2\33\2\30\1\uffff\1\33\1\uffff\1\30\3\33\1\uffff\2\30\1\uffff"+
			"\2\33\2\30\1\33\3\30\3\33\1\uffff\2\33\3\30\1\uffff\4\30\2\33\1\uffff"+
			"\1\30\1\33\3\30\1\33\5\30\2\uffff\6\30\1\uffff\1\30\1\33\2\30\1\uffff"+
			"\1\30\1\33\1\30\1\33\1\30\2\uffff\1\30\1\uffff\3\33\2\30\1\uffff\2\30"+
			"\1\uffff\1\31\2\30\1\33\1\30\2\uffff\1\30\1\33\1\30\1\33\1\30\1\33\1"+
			"\30\1\33\3\30\1\uffff\2\33\7\30\1\33\1\30\2\33\2\30\1\uffff\3\33\3\30"+
			"\1\uffff\4\30\1\33\5\30\1\33\4\30\1\uffff\5\30\1\33\1\30\1\uffff\3\30"+
			"\1\uffff\1\33\1\30\1\33\3\30\1\uffff\3\33\1\30\1\uffff\1\30\1\33\1\30"+
			"\1\uffff\3\30\1\33\2\30\2\33\3\30\1\33\1\30\1\uffff\1\30\2\uffff\1\30"+
			"\1\uffff\1\33\3\30\u0089\uffff\1\30\3\uffff\1\30\60\uffff\1\30\3\uffff"+
			"\1\30\27\uffff\1\30\3\uffff\1\30",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
	static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
	static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_minS);
	static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_maxS);
	static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
	static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_specialS);
	static final short[][] DFA112_transition;

	static {
		int numStates = DFA112_transitionS.length;
		DFA112_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
		}
	}

	protected class DFA112 extends DFA {

		public DFA112(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 112;
			this.eot = DFA112_eot;
			this.eof = DFA112_eof;
			this.min = DFA112_min;
			this.max = DFA112_max;
			this.accept = DFA112_accept;
			this.special = DFA112_special;
			this.transition = DFA112_transition;
		}
		@Override
		public String getDescription() {
			return "1412:5: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) )";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA112_0 = input.LA(1);
						 
						int index112_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA112_0==KW_DATABASE) && (synpred7_HiveParser())) {s = 1;}
						else if ( (LA112_0==KW_SCHEMA) ) {s = 2;}
						else if ( (LA112_0==KW_FUNCTION) && (synpred8_HiveParser())) {s = 3;}
						else if ( (LA112_0==KW_FORMATTED) ) {s = 4;}
						else if ( (LA112_0==KW_EXTENDED) && (synpred9_HiveParser())) {s = 5;}
						else if ( (LA112_0==KW_PRETTY) ) {s = 6;}
						else if ( ((LA112_0 >= Identifier && LA112_0 <= KW_ANALYZE)||(LA112_0 >= KW_ARCHIVE && LA112_0 <= KW_BY)||LA112_0==KW_CASCADE||LA112_0==KW_CHANGE||(LA112_0 >= KW_CLUSTER && LA112_0 <= KW_COLLECTION)||(LA112_0 >= KW_COLUMNS && LA112_0 <= KW_COMMENT)||(LA112_0 >= KW_COMPACT && LA112_0 <= KW_CONCATENATE)||(LA112_0 >= KW_CONSTRAINT && LA112_0 <= KW_CREATE)||LA112_0==KW_CUBE||(LA112_0 >= KW_CURRENT_DATE && LA112_0 <= KW_DATA)||(LA112_0 >= KW_DATABASES && LA112_0 <= KW_DISABLE)||(LA112_0 >= KW_DISTRIBUTE && LA112_0 <= KW_ELEM_TYPE)||LA112_0==KW_ENABLE||LA112_0==KW_ESCAPED||(LA112_0 >= KW_EXCLUSIVE && LA112_0 <= KW_EXPORT)||(LA112_0 >= KW_EXTERNAL && LA112_0 <= KW_FLOAT)||(LA112_0 >= KW_FOR && LA112_0 <= KW_FORMAT)||LA112_0==KW_FULL||(LA112_0 >= KW_FUNCTIONS && LA112_0 <= KW_GROUPING)||(LA112_0 >= KW_HOUR && LA112_0 <= KW_IDXPROPERTIES)||(LA112_0 >= KW_IMPORT && LA112_0 <= KW_INTERSECT)||(LA112_0 >= KW_INTO && LA112_0 <= KW_JAR)||(LA112_0 >= KW_KEY && LA112_0 <= KW_LEFT)||(LA112_0 >= KW_LEVEL && LA112_0 <= KW_LONG)||(LA112_0 >= KW_MAPJOIN && LA112_0 <= KW_MONTH)||(LA112_0 >= KW_MSCK && LA112_0 <= KW_NOSCAN)||(LA112_0 >= KW_NOVALIDATE && LA112_0 <= KW_OFFSET)||LA112_0==KW_OPTION||(LA112_0 >= KW_ORDER && LA112_0 <= KW_OUTPUTFORMAT)||(LA112_0 >= KW_OVERWRITE && LA112_0 <= KW_OWNER)||(LA112_0 >= KW_PARTITION && LA112_0 <= KW_PLUS)||(LA112_0 >= KW_PRIMARY && LA112_0 <= KW_RECORDWRITER)||(LA112_0 >= KW_REFERENCES && LA112_0 <= KW_ROLES)||(LA112_0 >= KW_ROLLUP && LA112_0 <= KW_ROWS)||(LA112_0 >= KW_SCHEMAS && LA112_0 <= KW_SECOND)||(LA112_0 >= KW_SEMI && LA112_0 <= KW_SSL)||(LA112_0 >= KW_STATISTICS && LA112_0 <= KW_TABLES)||(LA112_0 >= KW_TBLPROPERTIES && LA112_0 <= KW_TERMINATED)||(LA112_0 >= KW_TIMESTAMP && LA112_0 <= KW_TRANSACTIONS)||(LA112_0 >= KW_TRIGGER && LA112_0 <= KW_UNARCHIVE)||(LA112_0 >= KW_UNDO && LA112_0 <= KW_UNIONTYPE)||(LA112_0 >= KW_UNLOCK && LA112_0 <= KW_VALUE_TYPE)||LA112_0==KW_VIEW||LA112_0==KW_WHILE||(LA112_0 >= KW_WITH && LA112_0 <= KW_YEAR)||LA112_0==KW_HOLD_DDLTIME||LA112_0==KW_IGNORE||LA112_0==KW_NO_DROP||LA112_0==KW_OFFLINE||LA112_0==KW_PROTECTION||LA112_0==KW_READONLY) ) {s = 7;}
						 
						input.seek(index112_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA112_2 = input.LA(1);
						 
						int index112_2 = input.index();
						input.rewind();
						s = -1;
						if ( (LA112_2==KW_EXTENDED) && (synpred7_HiveParser())) {s = 10;}
						else if ( (LA112_2==Identifier) ) {s = 11;}
						else if ( ((LA112_2 >= KW_ABORT && LA112_2 <= KW_AFTER)||LA112_2==KW_ANALYZE||LA112_2==KW_ARCHIVE||LA112_2==KW_ASC||(LA112_2 >= KW_AUTOCOMMIT && LA112_2 <= KW_BEFORE)||(LA112_2 >= KW_BUCKET && LA112_2 <= KW_BUCKETS)||LA112_2==KW_CASCADE||LA112_2==KW_CHANGE||(LA112_2 >= KW_CLUSTER && LA112_2 <= KW_COLLECTION)||(LA112_2 >= KW_COLUMNS && LA112_2 <= KW_COMMENT)||(LA112_2 >= KW_COMPACT && LA112_2 <= KW_CONCATENATE)||LA112_2==KW_CONTINUE||LA112_2==KW_DATA||LA112_2==KW_DATABASES||(LA112_2 >= KW_DATETIME && LA112_2 <= KW_DBPROPERTIES)||(LA112_2 >= KW_DEFERRED && LA112_2 <= KW_DEFINED)||(LA112_2 >= KW_DELIMITED && LA112_2 <= KW_DESC)||(LA112_2 >= KW_DIRECTORIES && LA112_2 <= KW_DISABLE)||LA112_2==KW_DISTRIBUTE||LA112_2==KW_ELEM_TYPE||LA112_2==KW_ENABLE||LA112_2==KW_ESCAPED||LA112_2==KW_EXCLUSIVE||(LA112_2 >= KW_EXPLAIN && LA112_2 <= KW_EXPORT)||(LA112_2 >= KW_FIELDS && LA112_2 <= KW_FIRST)||(LA112_2 >= KW_FORMAT && LA112_2 <= KW_FORMATTED)||LA112_2==KW_FUNCTIONS||(LA112_2 >= KW_HOUR && LA112_2 <= KW_IDXPROPERTIES)||(LA112_2 >= KW_INDEX && LA112_2 <= KW_INDEXES)||(LA112_2 >= KW_INPATH && LA112_2 <= KW_INPUTFORMAT)||(LA112_2 >= KW_ISOLATION && LA112_2 <= KW_JAR)||(LA112_2 >= KW_KEY && LA112_2 <= KW_LAST)||LA112_2==KW_LEVEL||(LA112_2 >= KW_LIMIT && LA112_2 <= KW_LOAD)||(LA112_2 >= KW_LOCATION && LA112_2 <= KW_LONG)||(LA112_2 >= KW_MAPJOIN && LA112_2 <= KW_MONTH)||LA112_2==KW_MSCK||(LA112_2 >= KW_NORELY && LA112_2 <= KW_NOSCAN)||LA112_2==KW_NOVALIDATE||LA112_2==KW_NULLS||LA112_2==KW_OFFSET||LA112_2==KW_OPTION||(LA112_2 >= KW_OUTPUTDRIVER && LA112_2 <= KW_OUTPUTFORMAT)||(LA112_2 >= KW_OVERWRITE && LA112_2 <= KW_OWNER)||(LA112_2 >= KW_PARTITIONED && LA112_2 <= KW_PARTITIONS)||LA112_2==KW_PLUS||LA112_2==KW_PRETTY||LA112_2==KW_PRINCIPALS||LA112_2==KW_PURGE||LA112_2==KW_READ||(LA112_2 >= KW_REBUILD && LA112_2 <= KW_RECORDWRITER)||(LA112_2 >= KW_RELOAD && LA112_2 <= KW_RESTRICT)||LA112_2==KW_REWRITE||(LA112_2 >= KW_ROLE && LA112_2 <= KW_ROLES)||(LA112_2 >= KW_SCHEMA && LA112_2 <= KW_SECOND)||(LA112_2 >= KW_SEMI && LA112_2 <= KW_SERVER)||(LA112_2 >= KW_SETS && LA112_2 <= KW_SKEWED)||(LA112_2 >= KW_SNAPSHOT && LA112_2 <= KW_SSL)||(LA112_2 >= KW_STATISTICS && LA112_2 <= KW_STRUCT)||LA112_2==KW_TABLES||(LA112_2 >= KW_TBLPROPERTIES && LA112_2 <= KW_TERMINATED)||LA112_2==KW_TINYINT||(LA112_2 >= KW_TOUCH && LA112_2 <= KW_TRANSACTIONS)||LA112_2==KW_UNARCHIVE||LA112_2==KW_UNDO||LA112_2==KW_UNIONTYPE||(LA112_2 >= KW_UNLOCK && LA112_2 <= KW_UNSIGNED)||(LA112_2 >= KW_URI && LA112_2 <= KW_USE)||(LA112_2 >= KW_UTC && LA112_2 <= KW_VALIDATE)||LA112_2==KW_VALUE_TYPE||LA112_2==KW_VIEW||LA112_2==KW_WHILE||(LA112_2 >= KW_WORK && LA112_2 <= KW_YEAR)||LA112_2==KW_HOLD_DDLTIME||LA112_2==KW_IGNORE||LA112_2==KW_NO_DROP||LA112_2==KW_OFFLINE||LA112_2==KW_PROTECTION||LA112_2==KW_READONLY) ) {s = 12;}
						else if ( (LA112_2==KW_PARTITION) ) {s = 13;}
						else if ( (LA112_2==EOF||LA112_2==DOT) ) {s = 7;}
						else if ( ((LA112_2 >= KW_ALL && LA112_2 <= KW_ALTER)||(LA112_2 >= KW_ARRAY && LA112_2 <= KW_AS)||LA112_2==KW_AUTHORIZATION||(LA112_2 >= KW_BETWEEN && LA112_2 <= KW_BOTH)||LA112_2==KW_BY||LA112_2==KW_CONSTRAINT||LA112_2==KW_CREATE||LA112_2==KW_CUBE||(LA112_2 >= KW_CURRENT_DATE && LA112_2 <= KW_CURSOR)||LA112_2==KW_DATE||LA112_2==KW_DECIMAL||LA112_2==KW_DELETE||LA112_2==KW_DESCRIBE||(LA112_2 >= KW_DOUBLE && LA112_2 <= KW_DROP)||LA112_2==KW_EXISTS||(LA112_2 >= KW_EXTERNAL && LA112_2 <= KW_FETCH)||LA112_2==KW_FLOAT||(LA112_2 >= KW_FOR && LA112_2 <= KW_FOREIGN)||LA112_2==KW_FULL||(LA112_2 >= KW_GRANT && LA112_2 <= KW_GROUPING)||(LA112_2 >= KW_IMPORT && LA112_2 <= KW_IN)||LA112_2==KW_INNER||(LA112_2 >= KW_INSERT && LA112_2 <= KW_INTERSECT)||(LA112_2 >= KW_INTO && LA112_2 <= KW_IS)||(LA112_2 >= KW_LATERAL && LA112_2 <= KW_LEFT)||LA112_2==KW_LIKE||LA112_2==KW_LOCAL||LA112_2==KW_NONE||LA112_2==KW_NULL||LA112_2==KW_OF||(LA112_2 >= KW_ORDER && LA112_2 <= KW_OUTER)||LA112_2==KW_PERCENT||LA112_2==KW_PRIMARY||LA112_2==KW_PROCEDURE||LA112_2==KW_RANGE||LA112_2==KW_READS||(LA112_2 >= KW_REFERENCES && LA112_2 <= KW_REGEXP)||LA112_2==KW_REVOKE||(LA112_2 >= KW_RIGHT && LA112_2 <= KW_RLIKE)||(LA112_2 >= KW_ROLLUP && LA112_2 <= KW_ROWS)||LA112_2==KW_SET||LA112_2==KW_SMALLINT||LA112_2==KW_TABLE||LA112_2==KW_TIMESTAMP||LA112_2==KW_TO||(LA112_2 >= KW_TRIGGER && LA112_2 <= KW_TRUNCATE)||LA112_2==KW_UNION||LA112_2==KW_UPDATE||(LA112_2 >= KW_USER && LA112_2 <= KW_USING)||LA112_2==KW_VALUES||LA112_2==KW_WITH) ) {s = 15;}
						 
						input.seek(index112_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA112_11 = input.LA(1);
						 
						int index112_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred7_HiveParser()) ) {s = 10;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index112_11);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA112_12 = input.LA(1);
						 
						int index112_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred7_HiveParser()) ) {s = 10;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index112_12);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA112_13 = input.LA(1);
						 
						int index112_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred7_HiveParser()) ) {s = 10;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index112_13);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA112_15 = input.LA(1);
						 
						int index112_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred7_HiveParser()) ) {s = 10;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index112_15);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA112_17 = input.LA(1);
						 
						int index112_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred9_HiveParser()) ) {s = 5;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index112_17);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA112_18 = input.LA(1);
						 
						int index112_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred9_HiveParser()) ) {s = 5;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index112_18);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA112_19 = input.LA(1);
						 
						int index112_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred9_HiveParser()) ) {s = 5;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index112_19);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA112_21 = input.LA(1);
						 
						int index112_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred9_HiveParser()) ) {s = 5;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index112_21);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA112_23 = input.LA(1);
						 
						int index112_23 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred9_HiveParser()) ) {s = 5;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index112_23);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA112_24 = input.LA(1);
						 
						int index112_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred9_HiveParser()) ) {s = 5;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index112_24);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA112_25 = input.LA(1);
						 
						int index112_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred9_HiveParser()) ) {s = 5;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index112_25);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA112_27 = input.LA(1);
						 
						int index112_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred9_HiveParser()) ) {s = 5;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index112_27);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 112, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA203_eotS =
		"\131\uffff";
	static final String DFA203_eofS =
		"\1\2\130\uffff";
	static final String DFA203_minS =
		"\1\45\1\7\35\uffff\1\4\71\uffff";
	static final String DFA203_maxS =
		"\1\u0146\1\u0216\35\uffff\1\u014a\71\uffff";
	static final String DFA203_acceptS =
		"\2\uffff\1\2\72\uffff\1\1\33\uffff";
	static final String DFA203_specialS =
		"\131\uffff}>";
	static final String[] DFA203_transitionS = {
			"\1\2\22\uffff\1\2\5\uffff\1\2\42\uffff\1\2\32\uffff\1\2\4\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\10\uffff\1\2\15\uffff\1\2\4\uffff\2\2\2\uffff"+
			"\1\2\5\uffff\1\1\15\uffff\1\2\7\uffff\1\2\30\uffff\3\2\26\uffff\1\2\14"+
			"\uffff\1\2\4\uffff\1\2\6\uffff\1\2\20\uffff\1\2\11\uffff\1\2\3\uffff"+
			"\1\2\4\uffff\1\2\1\uffff\1\2\22\uffff\1\2",
			"\1\2\5\uffff\1\2\4\uffff\1\2\7\uffff\10\2\1\uffff\17\2\1\uffff\4\2\1"+
			"\uffff\4\2\1\uffff\2\2\1\uffff\4\2\1\uffff\3\2\1\uffff\1\2\1\uffff\4"+
			"\2\1\uffff\20\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff"+
			"\10\2\1\uffff\4\2\1\uffff\1\2\1\uffff\4\2\1\uffff\24\2\1\uffff\1\2\1"+
			"\37\4\2\1\uffff\13\2\1\uffff\7\2\1\uffff\12\2\2\uffff\1\2\1\uffff\5\2"+
			"\1\uffff\2\2\1\uffff\5\2\2\uffff\13\2\1\uffff\17\2\1\uffff\6\2\1\uffff"+
			"\17\2\1\uffff\7\2\1\uffff\3\2\1\uffff\6\2\1\uffff\4\2\1\uffff\3\2\1\uffff"+
			"\15\2\1\uffff\1\2\2\uffff\1\2\1\uffff\4\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
			"\2\2\7\uffff\5\2\162\uffff\1\2\3\uffff\1\2\60\uffff\1\2\3\uffff\1\2\27"+
			"\uffff\1\2\3\uffff\1\2",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\3\2\3\uffff\1\2\3\uffff\2\2\1\uffff\1\2\2\uffff\2\2\1\uffff\2\2\11"+
			"\uffff\1\2\7\uffff\1\2\135\uffff\1\2\13\uffff\1\2\14\uffff\1\2\26\uffff"+
			"\1\2\10\uffff\1\2\32\uffff\1\2\2\uffff\1\2\12\uffff\1\2\4\uffff\1\2\37"+
			"\uffff\1\75\30\uffff\1\2\20\uffff\4\2\1\uffff\3\2\1\uffff\1\2\7\uffff"+
			"\1\2",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_eotS);
	static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_eofS);
	static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_minS);
	static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_maxS);
	static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_acceptS);
	static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_specialS);
	static final short[][] DFA203_transition;

	static {
		int numStates = DFA203_transitionS.length;
		DFA203_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA203_transition[i] = DFA.unpackEncodedString(DFA203_transitionS[i]);
		}
	}

	protected class DFA203 extends DFA {

		public DFA203(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 203;
			this.eot = DFA203_eot;
			this.eof = DFA203_eof;
			this.min = DFA203_min;
			this.max = DFA203_max;
			this.accept = DFA203_accept;
			this.special = DFA203_special;
			this.transition = DFA203_transition;
		}
		@Override
		public String getDescription() {
			return "1870:103: ( tableRowFormatMapKeysIdentifier )?";
		}
	}

	static final String DFA237_eotS =
		"\u0096\uffff";
	static final String DFA237_eofS =
		"\u0096\uffff";
	static final String DFA237_minS =
		"\2\32\2\44\3\uffff\1\171\14\12\1\171\1\12\1\171\2\uffff\2\171\1\uffff"+
		"\1\171\171\uffff";
	static final String DFA237_maxS =
		"\2\u0216\2\u012e\3\uffff\1\u00d3\14\u0146\1\u0139\1\u0146\1\u0139\2\uffff"+
		"\1\u00d3\1\u0139\1\uffff\1\u00d3\171\uffff";
	static final String DFA237_acceptS =
		"\4\uffff\1\5\30\uffff\1\3\23\uffff\1\4\23\uffff\1\1\1\2\117\uffff";
	static final String DFA237_specialS =
		"\u0096\uffff}>";
	static final String[] DFA237_transitionS = {
			"\10\4\1\uffff\17\4\1\uffff\1\4\2\uffff\1\4\1\uffff\4\4\1\uffff\2\4\1"+
			"\uffff\4\4\1\uffff\1\1\2\4\1\uffff\1\4\1\uffff\4\4\1\uffff\20\4\1\uffff"+
			"\4\4\1\uffff\1\4\1\uffff\1\4\1\uffff\4\4\1\uffff\10\4\1\uffff\1\4\1\3"+
			"\2\4\1\uffff\1\4\1\uffff\4\4\1\uffff\2\4\1\uffff\13\4\1\uffff\5\4\1\uffff"+
			"\6\4\1\uffff\13\4\2\uffff\6\4\1\uffff\4\4\1\uffff\5\4\2\uffff\1\4\1\uffff"+
			"\5\4\1\uffff\2\4\1\uffff\5\4\2\uffff\1\4\1\2\11\4\1\uffff\17\4\1\uffff"+
			"\6\4\1\uffff\17\4\1\uffff\7\4\1\uffff\3\4\1\uffff\6\4\1\uffff\4\4\1\uffff"+
			"\3\4\1\uffff\15\4\1\uffff\1\4\2\uffff\1\4\1\uffff\4\4\u0089\uffff\1\4"+
			"\3\uffff\1\4\60\uffff\1\4\3\uffff\1\4\27\uffff\1\4\3\uffff\1\4",
			"\1\7\4\34\2\31\1\34\1\uffff\1\34\1\26\1\31\1\34\1\31\2\34\1\31\1\14"+
			"\1\23\1\15\1\31\2\34\1\31\1\uffff\1\34\2\uffff\1\34\1\4\4\34\1\uffff"+
			"\2\34\1\uffff\4\34\1\uffff\1\31\1\34\1\31\1\uffff\1\31\1\uffff\3\31\1"+
			"\34\1\uffff\1\34\1\20\1\12\2\34\1\25\2\34\1\31\3\34\1\31\3\34\1\uffff"+
			"\1\34\1\17\1\31\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\31\2\34"+
			"\1\uffff\3\31\4\34\1\16\1\uffff\2\31\2\34\1\uffff\1\31\1\uffff\1\34\3"+
			"\31\1\uffff\2\34\1\uffff\2\31\2\34\1\31\3\34\1\31\1\13\1\31\1\uffff\2"+
			"\31\3\34\1\uffff\4\34\2\31\1\uffff\1\34\1\31\3\34\1\31\5\34\1\uffff\1"+
			"\4\6\34\1\uffff\1\34\1\31\2\34\1\uffff\1\34\1\31\1\34\1\31\1\34\2\uffff"+
			"\1\34\1\uffff\3\31\2\34\1\uffff\2\34\1\uffff\1\31\2\34\1\31\1\34\2\uffff"+
			"\1\34\1\31\1\34\1\31\1\34\1\31\1\34\1\31\3\34\1\uffff\2\31\7\34\1\31"+
			"\1\34\2\31\2\34\1\uffff\3\31\3\34\1\uffff\4\34\1\31\5\34\1\11\4\34\1"+
			"\uffff\3\34\1\22\1\24\1\31\1\34\1\uffff\3\34\1\uffff\1\21\1\10\1\31\3"+
			"\34\1\uffff\3\31\1\34\1\uffff\1\34\1\31\1\32\1\uffff\3\34\1\31\2\34\2"+
			"\31\3\34\1\31\1\34\1\4\1\34\2\uffff\1\34\1\uffff\1\31\3\34\u0089\uffff"+
			"\1\34\3\uffff\1\34\60\uffff\1\34\3\uffff\1\34\27\uffff\1\34\3\uffff\1"+
			"\34",
			"\1\4\6\uffff\3\4\11\uffff\1\4\31\uffff\2\4\2\uffff\1\4\14\uffff\1\4"+
			"\23\uffff\1\4\31\uffff\1\4\10\uffff\1\35\22\uffff\1\4\122\uffff\1\4\10"+
			"\uffff\2\4\7\uffff\2\4\14\uffff\1\4\16\uffff\1\4",
			"\1\4\6\uffff\3\4\11\uffff\1\4\31\uffff\2\4\2\uffff\1\4\14\uffff\1\4"+
			"\23\uffff\1\4\31\uffff\1\4\10\uffff\1\61\22\uffff\1\4\122\uffff\1\4\10"+
			"\uffff\2\4\7\uffff\2\4\14\uffff\1\4\16\uffff\1\4",
			"",
			"",
			"",
			"\1\105\131\uffff\1\106",
			"\1\4\63\uffff\1\4\72\uffff\1\105\131\uffff\1\106\162\uffff\1\4",
			"\1\4\63\uffff\1\4\72\uffff\1\105\131\uffff\1\106\162\uffff\1\4",
			"\1\4\63\uffff\1\4\72\uffff\1\105\131\uffff\1\106\162\uffff\1\4",
			"\1\4\63\uffff\1\4\72\uffff\1\105\131\uffff\1\106\162\uffff\1\4",
			"\1\4\63\uffff\1\4\72\uffff\1\105\131\uffff\1\106\162\uffff\1\4",
			"\1\4\63\uffff\1\4\72\uffff\1\105\131\uffff\1\106\162\uffff\1\4",
			"\1\4\63\uffff\1\4\72\uffff\1\105\131\uffff\1\106\162\uffff\1\4",
			"\1\4\63\uffff\1\4\72\uffff\1\105\131\uffff\1\106\162\uffff\1\4",
			"\1\4\63\uffff\1\4\72\uffff\1\105\131\uffff\1\106\162\uffff\1\4",
			"\1\4\63\uffff\1\4\72\uffff\1\105\131\uffff\1\106\162\uffff\1\4",
			"\1\4\63\uffff\1\4\72\uffff\1\105\131\uffff\1\106\162\uffff\1\4",
			"\1\4\63\uffff\1\4\72\uffff\1\105\131\uffff\1\106\162\uffff\1\4",
			"\1\105\131\uffff\1\106\145\uffff\1\4",
			"\1\4\63\uffff\1\4\72\uffff\1\105\131\uffff\1\106\147\uffff\1\4\12\uffff"+
			"\1\4",
			"\1\105\131\uffff\1\106\145\uffff\1\4",
			"",
			"",
			"\1\105\131\uffff\1\106",
			"\1\105\131\uffff\1\106\145\uffff\1\4",
			"",
			"\1\105\131\uffff\1\106",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA237_eot = DFA.unpackEncodedString(DFA237_eotS);
	static final short[] DFA237_eof = DFA.unpackEncodedString(DFA237_eofS);
	static final char[] DFA237_min = DFA.unpackEncodedStringToUnsignedChars(DFA237_minS);
	static final char[] DFA237_max = DFA.unpackEncodedStringToUnsignedChars(DFA237_maxS);
	static final short[] DFA237_accept = DFA.unpackEncodedString(DFA237_acceptS);
	static final short[] DFA237_special = DFA.unpackEncodedString(DFA237_specialS);
	static final short[][] DFA237_transition;

	static {
		int numStates = DFA237_transitionS.length;
		DFA237_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA237_transition[i] = DFA.unpackEncodedString(DFA237_transitionS[i]);
		}
	}

	protected class DFA237 extends DFA {

		public DFA237(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 237;
			this.eot = DFA237_eot;
			this.eof = DFA237_eof;
			this.min = DFA237_min;
			this.max = DFA237_max;
			this.accept = DFA237_accept;
			this.special = DFA237_special;
			this.transition = DFA237_transition;
		}
		@Override
		public String getDescription() {
			return "2189:1: columnNameTypeOrPKOrFK : ( ( foreignKeyWithName ) | ( primaryKeyWithName ) | ( primaryKeyWithoutName ) | ( foreignKeyWithoutName ) | ( columnNameType ) );";
		}
	}

	public static final BitSet FOLLOW_explainStatement_in_statement1133 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_statement1135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_execStatement_in_statement1140 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_statement1142 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXPLAIN_in_explainStatement1163 = new BitSet(new long[]{0x8000008308000000L,0x180060081D000080L,0x0010129000008081L,0x1210218120000000L,0x0010005204000010L});
	public static final BitSet FOLLOW_explainOption_in_explainStatement1172 = new BitSet(new long[]{0x8000008308000000L,0x180060081D000080L,0x0010129000008081L,0x1210208120000000L,0x0010005204000010L});
	public static final BitSet FOLLOW_execStatement_in_explainStatement1175 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REWRITE_in_explainStatement1206 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000100000008000L,0x0010000020000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_queryStatementExpression_in_explainStatement1208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_queryStatementExpression_in_execStatement1277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loadStatement_in_execStatement1286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportStatement_in_execStatement1294 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importStatement_in_execStatement1302 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ddlStatement_in_execStatement1310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_deleteStatement_in_execStatement1318 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_updateStatement_in_execStatement1326 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sqlTransactionStatement_in_execStatement1334 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOAD_in_loadStatement1361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_DATA_in_loadStatement1363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000001000L});
	public static final BitSet FOLLOW_KW_LOCAL_in_loadStatement1368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_KW_INPATH_in_loadStatement1372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_loadStatement1377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000100L});
	public static final BitSet FOLLOW_KW_OVERWRITE_in_loadStatement1383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_INTO_in_loadStatement1387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_loadStatement1389 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableOrPartition_in_loadStatement1394 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FOR_in_replicationClause1446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_METADATA_in_replicationClause1451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_REPLICATION_in_replicationClause1455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_replicationClause1457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_replicationClause1462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_replicationClause1465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXPORT_in_exportStatement1509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_exportStatement1517 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableOrPartition_in_exportStatement1522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_TO_in_exportStatement1531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_exportStatement1536 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
	public static final BitSet FOLLOW_replicationClause_in_exportStatement1545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IMPORT_in_importStatement1595 = new BitSet(new long[]{0x0000000000000000L,0x1000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_EXTERNAL_in_importStatement1610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_importStatement1614 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableOrPartition_in_importStatement1619 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_KW_FROM_in_importStatement1633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_importStatement1638 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_tableLocation_in_importStatement1650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createDatabaseStatement_in_ddlStatement1702 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_switchDatabaseStatement_in_ddlStatement1710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropDatabaseStatement_in_ddlStatement1718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createTableStatement_in_ddlStatement1726 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropTableStatement_in_ddlStatement1734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_truncateTableStatement_in_ddlStatement1742 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatement_in_ddlStatement1750 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_descStatement_in_ddlStatement1758 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStatement_in_ddlStatement1766 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_metastoreCheck_in_ddlStatement1774 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createViewStatement_in_ddlStatement1782 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropViewStatement_in_ddlStatement1790 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createFunctionStatement_in_ddlStatement1798 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createMacroStatement_in_ddlStatement1806 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createIndexStatement_in_ddlStatement1814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropIndexStatement_in_ddlStatement1822 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropFunctionStatement_in_ddlStatement1830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_reloadFunctionStatement_in_ddlStatement1838 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropMacroStatement_in_ddlStatement1846 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_analyzeStatement_in_ddlStatement1854 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lockStatement_in_ddlStatement1862 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unlockStatement_in_ddlStatement1870 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lockDatabase_in_ddlStatement1878 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unlockDatabase_in_ddlStatement1886 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createRoleStatement_in_ddlStatement1894 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropRoleStatement_in_ddlStatement1902 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grantPrivileges_in_ddlStatement1916 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokePrivileges_in_ddlStatement1930 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showGrants_in_ddlStatement1938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showRoleGrants_in_ddlStatement1946 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showRolePrincipals_in_ddlStatement1954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showRoles_in_ddlStatement1962 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grantRole_in_ddlStatement1970 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokeRole_in_ddlStatement1978 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setRole_in_ddlStatement1986 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showCurrentRole_in_ddlStatement1994 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_abortTransactionStatement_in_ddlStatement2002 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IF_in_ifExists2029 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_EXISTS_in_ifExists2031 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RESTRICT_in_restrictOrCascade2068 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CASCADE_in_restrictOrCascade2086 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IF_in_ifNotExists2123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_NOT_in_ifNotExists2125 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_EXISTS_in_ifNotExists2127 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_storedAsDirs2164 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_KW_AS_in_storedAsDirs2166 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_DIRECTORIES_in_storedAsDirs2168 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_OR_in_orReplace2205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_KW_REPLACE_in_orReplace2207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createDatabaseStatement2244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_createDatabaseStatement2247 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFF7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_createDatabaseStatement2249 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFF7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_ifNotExists_in_createDatabaseStatement2260 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_createDatabaseStatement2273 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_databaseComment_in_createDatabaseStatement2283 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_dbLocation_in_createDatabaseStatement2294 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_createDatabaseStatement2306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement2308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_dbProperties_in_createDatabaseStatement2312 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCATION_in_dbLocation2373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_dbLocation2377 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_dbProperties2419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_dbPropertiesList_in_dbProperties2421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_dbProperties2423 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList2464 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_dbPropertiesList2467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList2469 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_KW_USE_in_switchDatabaseStatement2508 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_switchDatabaseStatement2510 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropDatabaseStatement2549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_dropDatabaseStatement2552 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFF7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_dropDatabaseStatement2554 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFF7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_ifExists_in_dropDatabaseStatement2557 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_dropDatabaseStatement2560 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_restrictOrCascade_in_dropDatabaseStatement2562 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_databaseComment2608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_databaseComment2612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createTableStatement2652 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004400L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_createTableStatement2657 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_EXTERNAL_in_createTableStatement2664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_createTableStatement2668 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFF7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_ifNotExists_in_createTableStatement2670 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_createTableStatement2675 = new BitSet(new long[]{0x4200002000000002L,0x0000000000000000L,0x0000004200000000L,0x4000800000001000L,0x0800000000002040L});
	public static final BitSet FOLLOW_KW_LIKE_in_createTableStatement2688 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_createTableStatement2692 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000000L,0x0000800000000000L,0x0000000000002040L});
	public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement2703 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000002040L});
	public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement2715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_tableLocation_in_createTableStatement2727 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement2739 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_createTableStatement2752 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameTypeOrPKOrFKList_in_createTableStatement2754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_createTableStatement2756 = new BitSet(new long[]{0x4200002000000002L,0x0000000000000000L,0x0000004000000000L,0x4000800000001000L,0x0000000000002040L});
	public static final BitSet FOLLOW_tableComment_in_createTableStatement2769 = new BitSet(new long[]{0x0200002000000002L,0x0000000000000000L,0x0000004000000000L,0x4000800000001000L,0x0000000000002040L});
	public static final BitSet FOLLOW_tablePartition_in_createTableStatement2781 = new BitSet(new long[]{0x0200002000000002L,0x0000000000000000L,0x0000004000000000L,0x4000800000000000L,0x0000000000002040L});
	public static final BitSet FOLLOW_tableBuckets_in_createTableStatement2793 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0000004000000000L,0x4000800000000000L,0x0000000000002040L});
	public static final BitSet FOLLOW_tableSkewed_in_createTableStatement2805 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0000004000000000L,0x0000800000000000L,0x0000000000002040L});
	public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement2817 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000002040L});
	public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement2829 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_tableLocation_in_createTableStatement2841 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement2853 = new BitSet(new long[]{0x0000002000000002L});
	public static final BitSet FOLLOW_KW_AS_in_createTableStatement2866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0010000020000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_createTableStatement2868 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TRUNCATE_in_truncateTableStatement3075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_truncateTableStatement3077 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tablePartitionPrefix_in_truncateTableStatement3079 = new BitSet(new long[]{0x2000000000000002L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_truncateTableStatement3082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_truncateTableStatement3084 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameList_in_truncateTableStatement3086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_truncateTableStatement3088 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createIndexStatement3123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_INDEX_in_createIndexStatement3125 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_createIndexStatement3129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_ON_in_createIndexStatement3137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_createIndexStatement3139 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_createIndexStatement3143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_createIndexStatement3145 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameList_in_createIndexStatement3149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_createIndexStatement3151 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_KW_AS_in_createIndexStatement3159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_createIndexStatement3163 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000000L,0x0000004000000120L,0x0000800000000000L,0x0010000000002040L});
	public static final BitSet FOLLOW_autoRebuild_in_createIndexStatement3171 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000000L,0x0000004000000120L,0x0000800000000000L,0x0000000000002040L});
	public static final BitSet FOLLOW_indexPropertiesPrefixed_in_createIndexStatement3180 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000000L,0x0000004000000100L,0x0000800000000000L,0x0000000000002040L});
	public static final BitSet FOLLOW_indexTblName_in_createIndexStatement3189 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000000L,0x0000004000000000L,0x0000800000000000L,0x0000000000002040L});
	public static final BitSet FOLLOW_tableRowFormat_in_createIndexStatement3198 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000002040L});
	public static final BitSet FOLLOW_tableFileFormat_in_createIndexStatement3207 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_tableLocation_in_createIndexStatement3216 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createIndexStatement3225 = new BitSet(new long[]{0x4000000000000002L});
	public static final BitSet FOLLOW_indexComment_in_createIndexStatement3234 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_indexComment3391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_indexComment3395 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_autoRebuild3436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_DEFERRED_in_autoRebuild3438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_KW_REBUILD_in_autoRebuild3440 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IN_in_indexTblName3476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_indexTblName3478 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_indexTblName3482 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed3529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_indexProperties_in_indexPropertiesPrefixed3532 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_indexProperties3565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_indexPropertiesList_in_indexProperties3567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_indexProperties3569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList3610 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_indexPropertiesList3613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList3615 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_KW_DROP_in_dropIndexStatement3653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_INDEX_in_dropIndexStatement3655 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFF7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_ifExists_in_dropIndexStatement3657 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_dropIndexStatement3662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_ON_in_dropIndexStatement3664 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_dropIndexStatement3668 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropTableStatement3713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_dropTableStatement3715 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFF7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_ifExists_in_dropTableStatement3717 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_dropTableStatement3720 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_PURGE_in_dropTableStatement3722 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
	public static final BitSet FOLLOW_replicationClause_in_dropTableStatement3725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement3774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_alterStatement3776 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_alterStatement3778 = new BitSet(new long[]{0x0240000810000000L,0x0000020800000009L,0x0100000000080000L,0x4200001400000800L,0x0000001408100000L});
	public static final BitSet FOLLOW_alterTableStatementSuffix_in_alterStatement3780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement3798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_alterStatement3800 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_alterStatement3802 = new BitSet(new long[]{0x0000002010000000L,0x0000000800000000L,0x0000100000000000L,0x0210000420000000L,0x0010000400000000L});
	public static final BitSet FOLLOW_KW_AS_in_alterStatement3804 = new BitSet(new long[]{0x0000000010000000L,0x0000000800000000L,0x0000100000000000L,0x0210000420000000L,0x0010000400000000L});
	public static final BitSet FOLLOW_alterViewStatementSuffix_in_alterStatement3807 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement3825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_INDEX_in_alterStatement3827 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_alterIndexStatementSuffix_in_alterStatement3829 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement3841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_alterStatement3844 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_alterStatement3846 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3849 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3887 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3896 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3914 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3922 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3930 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix3946 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixExchangePartition_in_alterTableStatementSuffix3954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementPartitionKeyType_in_alterTableStatementSuffix3962 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixDropConstraint_in_alterTableStatementSuffix3970 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddConstraint_in_alterTableStatementSuffix3978 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partitionSpec_in_alterTableStatementSuffix3986 = new BitSet(new long[]{0x0240000010000000L,0x0000000000000009L,0x0100000000080000L,0x0200001400000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_alterTblPartitionStatementSuffix_in_alterTableStatementSuffix3989 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4021 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4027 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4033 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4045 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixBucketNum_in_alterTblPartitionStatementSuffix4051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix4057 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixClusterbySortby_in_alterTblPartitionStatementSuffix4063 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixCompact_in_alterTblPartitionStatementSuffix4069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixUpdateStatsCol_in_alterTblPartitionStatementSuffix4075 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixUpdateStats_in_alterTblPartitionStatementSuffix4081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRenameCol_in_alterTblPartitionStatementSuffix4087 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddCol_in_alterTblPartitionStatementSuffix4093 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITION_in_alterStatementPartitionKeyType4115 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementPartitionKeyType4117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alterStatementPartitionKeyType4119 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameType_in_alterStatementPartitionKeyType4121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_alterStatementPartitionKeyType4123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix4156 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix4164 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix4173 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix4182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_alterViewStatementSuffix4191 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterIndexStatementSuffix4220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_ON_in_alterIndexStatementSuffix4222 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_alterIndexStatementSuffix4224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000004000800L});
	public static final BitSet FOLLOW_partitionSpec_in_alterIndexStatementSuffix4226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000004000000L});
	public static final BitSet FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix4241 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterIndexStatementSuffix4274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix4276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_indexProperties_in_alterIndexStatementSuffix4284 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix4335 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterDatabaseSuffixSetOwner_in_alterDatabaseStatementSuffix4343 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterDatabaseSuffixProperties4372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixProperties4374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties4376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_dbProperties_in_alterDatabaseSuffixProperties4378 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterDatabaseSuffixSetOwner4422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixSetOwner4424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_OWNER_in_alterDatabaseSuffixSetOwner4426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000080000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_principalName_in_alterDatabaseSuffixSetOwner4428 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRename4471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRename4473 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_alterStatementSuffixRename4475 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddCol4542 = new BitSet(new long[]{0x2000000000000000L});
	public static final BitSet FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol4548 = new BitSet(new long[]{0x2000000000000000L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol4551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alterStatementSuffixAddCol4553 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol4555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_alterStatementSuffixAddCol4557 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_restrictOrCascade_in_alterStatementSuffixAddCol4559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddConstraint4635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_foreignKeyWithName_in_alterStatementSuffixAddConstraint4640 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_primaryKeyWithName_in_alterStatementSuffixAddConstraint4644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_alterStatementSuffixDropConstraint4708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterStatementSuffixDropConstraint4710 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixDropConstraint4714 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol4751 = new BitSet(new long[]{0x7F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol4753 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixRenameCol4758 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixRenameCol4762 = new BitSet(new long[]{0x0080381000000000L,0x0040000400260000L,0x0000100000010000L,0x8000000000000000L,0x0000400080060300L});
	public static final BitSet FOLLOW_colType_in_alterStatementSuffixRenameCol4764 = new BitSet(new long[]{0x4008000040000002L,0x0020000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol4767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol4771 = new BitSet(new long[]{0x0008000040000002L,0x0020000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol4775 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_restrictOrCascade_in_alterStatementSuffixRenameCol4778 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStatsCol4833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStatsCol4835 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_FOR_in_alterStatementSuffixUpdateStatsCol4837 = new BitSet(new long[]{0x7F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixUpdateStatsCol4839 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixUpdateStatsCol4844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixUpdateStatsCol4846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixUpdateStatsCol4848 = new BitSet(new long[]{0x4000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixUpdateStatsCol4851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixUpdateStatsCol4855 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStats4902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStats4904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixUpdateStats4906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixUpdateStats4908 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FIRST_in_alterStatementChangeColPosition4938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_AFTER_in_alterStatementChangeColPosition4940 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementChangeColPosition4944 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions4997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000800L});
	public static final BitSet FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions4999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitionsElement_in_alterStatementSuffixAddPartitions5002 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitionsElement5065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitionsElement5067 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch5095 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixTouch5098 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive5142 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixArchive5145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive5189 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive5192 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_LOCATION_in_partitionLocation5242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_partitionLocation5246 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions5283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000800L});
	public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixDropPartitions5285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions5288 = new BitSet(new long[]{0x0000000000000402L,0x0100000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_COMMA_in_alterStatementSuffixDropPartitions5291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions5293 = new BitSet(new long[]{0x0000000000000402L,0x0100000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_PURGE_in_alterStatementSuffixDropPartitions5297 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
	public static final BitSet FOLLOW_replicationClause_in_alterStatementSuffixDropPartitions5300 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixProperties5382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties5384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties5386 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNSET_in_alterStatementSuffixProperties5406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties5408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixProperties5410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties5413 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterViewSuffixProperties5455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties5457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties5459 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNSET_in_alterViewSuffixProperties5479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties5481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_ifExists_in_alterViewSuffixProperties5483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties5486 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties5528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties5530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties5534 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties5537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties5539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties5541 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties5567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties5569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties5571 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableName_in_tablePartitionPrefix5608 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_tablePartitionPrefix5610 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixFileFormat5645 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat5647 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_fileFormat_in_alterStatementSuffixFileFormat5649 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5680 = new BitSet(new long[]{0x0200000000000000L});
	public static final BitSet FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby5682 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_SORTED_in_alterStatementSuffixClusterbySortby5698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby5712 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation5743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation5745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation5747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation5749 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_skewedLocations5792 = new BitSet(new long[]{0x0000000000042080L,0x0001000000021800L,0x0000000000040000L,0x0000000000000000L,0x0800000002020000L,0x0000000000005802L});
	public static final BitSet FOLLOW_skewedLocationsList_in_skewedLocations5794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_skewedLocations5796 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList5837 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_skewedLocationsList5840 = new BitSet(new long[]{0x0000000000042080L,0x0001000000021800L,0x0000000000040000L,0x0000000000000000L,0x0800000002020000L,0x0000000000005802L});
	public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList5842 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_skewedValueLocationElement_in_skewedLocationMap5888 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_EQUAL_in_skewedLocationMap5890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_skewedLocationMap5894 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixLocation5931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation5933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixLocation5937 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby5971 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby5988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby6001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby6003 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXCHANGE_in_alterStatementSuffixExchangePartition6034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixExchangePartition6036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixExchangePartition6038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_alterStatementSuffixExchangePartition6040 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_alterStatementSuffixExchangePartition6044 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart6086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRenamePart6088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart6090 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_alterStatementSuffixStatsPart6128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_alterStatementSuffixStatsPart6130 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_FOR_in_alterStatementSuffixStatsPart6132 = new BitSet(new long[]{0x7F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixStatsPart6134 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixStatsPart6139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixStatsPart6141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixStatsPart6143 = new BitSet(new long[]{0x4000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixStatsPart6146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixStatsPart6150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles6197 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INTO_in_alterStatementSuffixBucketNum6234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_Number_in_alterStatementSuffixBucketNum6238 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_KW_BUCKETS_in_alterStatementSuffixBucketNum6240 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMPACT_in_alterStatementSuffixCompact6280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixCompact6284 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixCompact6287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_KW_OVERWRITE_in_alterStatementSuffixCompact6289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixCompact6291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixCompact6293 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_fileFormat6339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat6343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_fileFormat6345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat6349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_SERDE_in_fileFormat6351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat6355 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_INPUTDRIVER_in_fileFormat6358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat6362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_fileFormat6364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat6368 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_fileFormat6409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr6444 = new BitSet(new long[]{0x6F4BFFFBFC020002L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_DOT_in_tabTypeExpr6447 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr6450 = new BitSet(new long[]{0x6F4BFFFBFC000002L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr6458 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_DOT_in_tabTypeExpr6461 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_tabTypeExpr6478 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_tabTypeExpr6495 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_tabTypeExpr6512 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr6520 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_tabTypeExpr_in_partTypeExpr6560 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_partTypeExpr6562 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableName_in_tabPartColTypeExpr6602 = new BitSet(new long[]{0x6F4BFFFBFC000002L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_partitionSpec_in_tabPartColTypeExpr6604 = new BitSet(new long[]{0x6F4BFFFBFC000002L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_extColumnName_in_tabPartColTypeExpr6607 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement6654 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xEF7FFD5EFFFFFAEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_DESC_in_descStatement6656 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xEF7FFD5EFFFFFAEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_descStatement6678 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FFD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_descStatement6680 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FFD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement6683 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_descStatement6689 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_descStatement6720 = new BitSet(new long[]{0x6F5BFFFFFDB0C070L,0xAF7FFD5EFFFF7AEFL,0x3FF7F7FF7EFBFFF7L,0xFFEFDFFFDFFCFB7FL,0xC6F5BFFEEF7EEFEFL,0x0000000000003405L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement6722 = new BitSet(new long[]{0x6F5BFFFFFDB0C070L,0xAF7FBD5EFFFF7AEFL,0x3FF7F7FF7EFBFFF7L,0xFFEFDFFFDFFCFB7FL,0xC6F5BFFEEF7EEFEFL,0x0000000000003405L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_descFuncNames_in_descStatement6728 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FORMATTED_in_descStatement6767 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement6771 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_PRETTY_in_descStatement6775 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tabPartColTypeExpr_in_descStatement6780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tabPartColTypeExpr_in_descStatement6807 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ANALYZE_in_analyzeStatement6849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_analyzeStatement6851 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableOrPartition_in_analyzeStatement6856 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_COMPUTE_in_analyzeStatement6879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_analyzeStatement6881 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0080000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_NOSCAN_in_analyzeStatement6887 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTIALSCAN_in_analyzeStatement6895 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FOR_in_analyzeStatement6955 = new BitSet(new long[]{0x2000000000000000L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_analyzeStatement6957 = new BitSet(new long[]{0x6F4BFFFBFC000002L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameList_in_analyzeStatement6962 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CACHE_in_analyzeStatement7019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_KW_METADATA_in_analyzeStatement7021 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_DATABASES_in_showStatement7068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_SCHEMAS_in_showStatement7070 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement7074 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000001000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7076 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_TABLES_in_showStatement7097 = new BitSet(new long[]{0x6F4BFFFBFC000002L,0xBF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000001000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7101 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7103 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_showStatement7108 = new BitSet(new long[]{0x6F4BFFFBFC000002L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000001000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement7113 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000001000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7115 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7117 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7145 = new BitSet(new long[]{0x2000000000000000L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_showStatement7147 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7150 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7152 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_showStatement7155 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7159 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7161 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_showStatement7166 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7192 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_KW_FUNCTIONS_in_showStatement7194 = new BitSet(new long[]{0x6F4BFFFBFC000002L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000001000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement7197 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000001000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_showFunctionIdentifier_in_showStatement7199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showFunctionIdentifier_in_showStatement7201 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_PARTITIONS_in_showStatement7226 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_showStatement7230 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_showStatement7232 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KW_CREATE_in_showStatement7256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_DATABASE_in_showStatement7277 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_showStatement7279 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_showStatement7284 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_showStatement7313 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_showStatement7317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_showStatement7344 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement7346 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000200000100L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7350 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7352 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_showStatement7357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement7361 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000001000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7363 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_showStatement7365 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_showStatement7395 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_showStatement7397 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_showStatement7400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_showStatement7404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_showStatement7406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_KW_LOCKS_in_showStatement7430 = new BitSet(new long[]{0x6F4BFFFBFC000002L,0xAF7FFD5EFFFFFAEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_showStatement7456 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_showStatement7458 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_Identifier_in_showStatement7464 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement7470 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partTypeExpr_in_showStatement7504 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement7511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7543 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000600L});
	public static final BitSet FOLLOW_KW_FORMATTED_in_showStatement7548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000600L});
	public static final BitSet FOLLOW_KW_INDEX_in_showStatement7553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_INDEXES_in_showStatement7555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_ON_in_showStatement7558 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000001000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7560 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7564 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7566 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_showStatement7571 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMPACTIONS_in_showStatement7603 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_TRANSACTIONS_in_showStatement7619 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_CONF_in_showStatement7635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_showStatement7637 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_lockStatement7672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_lockStatement7674 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_lockStatement7676 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0800000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_lockStatement7678 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_lockMode_in_lockStatement7681 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_lockDatabase7721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_lockDatabase7724 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_lockDatabase7726 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_Identifier_in_lockDatabase7732 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_lockMode_in_lockDatabase7735 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNLOCK_in_unlockStatement7804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_unlockStatement7806 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_unlockStatement7808 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_unlockStatement7810 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNLOCK_in_unlockDatabase7850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_unlockDatabase7853 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_unlockDatabase7855 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_Identifier_in_unlockDatabase7861 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createRoleStatement7898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_ROLE_in_createRoleStatement7900 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_createRoleStatement7904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropRoleStatement7944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_ROLE_in_dropRoleStatement7946 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_dropRoleStatement7950 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_grantPrivileges7990 = new BitSet(new long[]{0x0000000180000000L,0x0000000801000080L,0x0000008000008200L,0x2010000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_privilegeList_in_grantPrivileges7994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_privilegeObject_in_grantPrivileges8002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_TO_in_grantPrivileges8011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000080000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_principalSpecification_in_grantPrivileges8013 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_withGrantOption_in_grantPrivileges8021 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REVOKE_in_revokePrivileges8070 = new BitSet(new long[]{0x0000000180000000L,0x0000000801000080L,0x0000008000008201L,0x2010000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_grantOptionFor_in_revokePrivileges8072 = new BitSet(new long[]{0x0000000180000000L,0x0000000801000080L,0x0000008000008200L,0x2010000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_privilegeList_in_revokePrivileges8075 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_privilegeObject_in_revokePrivileges8077 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_KW_FROM_in_revokePrivileges8080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000080000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_principalSpecification_in_revokePrivileges8082 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_grantRole8129 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_ROLE_in_grantRole8131 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_grantRole8134 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_COMMA_in_grantRole8137 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_grantRole8139 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_TO_in_grantRole8143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000080000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_principalSpecification_in_grantRole8145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_withAdminOption_in_grantRole8147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REVOKE_in_revokeRole8193 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_adminOptionFor_in_revokeRole8195 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_ROLE_in_revokeRole8198 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_revokeRole8201 = new BitSet(new long[]{0x0000000000000400L,0x1000000000000000L});
	public static final BitSet FOLLOW_COMMA_in_revokeRole8204 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_revokeRole8206 = new BitSet(new long[]{0x0000000000000400L,0x1000000000000000L});
	public static final BitSet FOLLOW_KW_FROM_in_revokeRole8210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000080000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_principalSpecification_in_revokeRole8212 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showRoleGrants8257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_ROLE_in_showRoleGrants8259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_GRANT_in_showRoleGrants8261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000080000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_principalName_in_showRoleGrants8263 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showRoles8303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_ROLES_in_showRoles8305 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showCurrentRole8342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_CURRENT_in_showCurrentRole8344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_ROLES_in_showCurrentRole8346 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_setRole8383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_ROLE_in_setRole8385 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_ALL_in_setRole8407 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NONE_in_setRole8438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_setRole8460 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showGrants8501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_GRANT_in_showGrants8503 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000002L,0x0000080000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_principalName_in_showGrants8505 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_ON_in_showGrants8509 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFFFAEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_privilegeIncludeColObject_in_showGrants8511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showRolePrincipals8556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_KW_PRINCIPALS_in_showRolePrincipals8558 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_showRolePrincipals8562 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_privilegeIncludeColObject8609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_privObjectCols_in_privilegeIncludeColObject8623 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ON_in_privilegeObject8658 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFFFAEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_privObject_in_privilegeObject8660 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATABASE_in_privObject8687 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_privObject8689 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_privObject8692 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_privObject8708 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_privObject8711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_privObject8713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_URI_in_privObject8733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_privObject8738 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SERVER_in_privObject8757 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_privObject8759 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATABASE_in_privObjectCols8785 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_privObjectCols8787 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_privObjectCols8790 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_privObjectCols8806 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_privObjectCols8809 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_privObjectCols8812 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameList_in_privObjectCols8816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_privObjectCols8818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_privObjectCols8822 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_URI_in_privObjectCols8846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_privObjectCols8851 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SERVER_in_privObjectCols8870 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_privObjectCols8872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_privlegeDef_in_privilegeList8907 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_privilegeList8910 = new BitSet(new long[]{0x0000000180000000L,0x0000000801000080L,0x0000008000008200L,0x2010000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_privlegeDef_in_privilegeList8912 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_privilegeType_in_privlegeDef8954 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_privlegeDef8957 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameList_in_privlegeDef8961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_privlegeDef8963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_privilegeType9008 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_privilegeType9022 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_privilegeType9036 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_privilegeType9050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_privilegeType9064 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INDEX_in_privilegeType9078 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_privilegeType9092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SELECT_in_privilegeType9106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_DATABASE_in_privilegeType9120 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_privilegeType9134 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DELETE_in_privilegeType9148 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_principalName_in_principalSpecification9181 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_principalSpecification9184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000080000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_principalName_in_principalSpecification9186 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_KW_USER_in_principalName9224 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000010L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_principalIdentifier_in_principalName9226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GROUP_in_principalName9242 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000010L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_principalIdentifier_in_principalName9244 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROLE_in_principalName9260 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_principalName9262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_withGrantOption9297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_GRANT_in_withGrantOption9299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_OPTION_in_withGrantOption9301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_grantOptionFor9338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_OPTION_in_grantOptionFor9340 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_FOR_in_grantOptionFor9342 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ADMIN_in_adminOptionFor9375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_OPTION_in_adminOptionFor9377 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_FOR_in_adminOptionFor9379 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_withAdminOption9412 = new BitSet(new long[]{0x0000000020000000L});
	public static final BitSet FOLLOW_KW_ADMIN_in_withAdminOption9414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_OPTION_in_withAdminOption9416 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MSCK_in_metastoreCheck9453 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_REPAIR_in_metastoreCheck9458 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_TABLE_in_metastoreCheck9463 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_metastoreCheck9465 = new BitSet(new long[]{0x0000000000000402L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck9467 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_metastoreCheck9471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck9473 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_resource_in_resourceList9526 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_resourceList9529 = new BitSet(new long[]{0x0000000800000000L,0x0008000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_resource_in_resourceList9531 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_resourceType_in_resource9569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_resource9573 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_JAR_in_resourceType9610 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FILE_in_resourceType9624 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ARCHIVE_in_resourceType9638 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createFunctionStatement9669 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_createFunctionStatement9674 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_createFunctionStatement9678 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_functionIdentifier_in_createFunctionStatement9680 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_KW_AS_in_createFunctionStatement9682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_createFunctionStatement9684 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_KW_USING_in_createFunctionStatement9693 = new BitSet(new long[]{0x0000000800000000L,0x0008000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_resourceList_in_createFunctionStatement9697 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropFunctionStatement9783 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_dropFunctionStatement9788 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_dropFunctionStatement9792 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFF7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_ifExists_in_dropFunctionStatement9794 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_functionIdentifier_in_dropFunctionStatement9797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RELOAD_in_reloadFunctionStatement9875 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_reloadFunctionStatement9877 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createMacroStatement9905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_createMacroStatement9907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_MACRO_in_createMacroStatement9909 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_Identifier_in_createMacroStatement9911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_createMacroStatement9919 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000040L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameTypeList_in_createMacroStatement9921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_createMacroStatement9924 = new BitSet(new long[]{0x6F7BFFFBFC042080L,0xAF7FBD5EFFFF7AEFL,0x3FF7F7FF7EFFFFF7L,0xFFEFDFFFDFFCFB7DL,0x48F4BFFEEF7EEFEFL,0x0000000000007806L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_expression_in_createMacroStatement9926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropMacroStatement9970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_dropMacroStatement9972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_MACRO_in_dropMacroStatement9974 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_ifExists_in_dropMacroStatement9976 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_Identifier_in_dropMacroStatement9979 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createViewStatement10021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000800000000000L});
	public static final BitSet FOLLOW_orReplace_in_createViewStatement10024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_createViewStatement10028 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFF7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_ifNotExists_in_createViewStatement10031 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_createViewStatement10037 = new BitSet(new long[]{0x4000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0800000000002000L});
	public static final BitSet FOLLOW_LPAREN_in_createViewStatement10048 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameCommentList_in_createViewStatement10050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_createViewStatement10052 = new BitSet(new long[]{0x4000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000002000L});
	public static final BitSet FOLLOW_tableComment_in_createViewStatement10056 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000002000L});
	public static final BitSet FOLLOW_viewPartition_in_createViewStatement10059 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createViewStatement10070 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_KW_AS_in_createViewStatement10081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0010000020000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_createViewStatement10091 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITIONED_in_viewPartition10214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_ON_in_viewPartition10216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_viewPartition10218 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameList_in_viewPartition10220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_viewPartition10222 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropViewStatement10261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_dropViewStatement10263 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFF7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_ifExists_in_dropViewStatement10265 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_viewName_in_dropViewStatement10268 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionIdentifier_in_showFunctionIdentifier10306 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_showFunctionIdentifier10314 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_showStmtIdentifier10341 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_showStmtIdentifier10349 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_tableComment10382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableComment10386 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITIONED_in_tablePartition10423 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tablePartition10425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_tablePartition10427 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameTypeList_in_tablePartition10429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_tablePartition10431 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CLUSTERED_in_tableBuckets10476 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableBuckets10478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableBuckets10480 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameList_in_tableBuckets10484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_tableBuckets10486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_SORTED_in_tableBuckets10489 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableBuckets10491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableBuckets10493 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameOrderList_in_tableBuckets10497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_tableBuckets10499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_INTO_in_tableBuckets10503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_Number_in_tableBuckets10507 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_KW_BUCKETS_in_tableBuckets10509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SKEWED_in_tableSkewed10561 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableSkewed10563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableSkewed10565 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameList_in_tableSkewed10569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_tableSkewed10571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_ON_in_tableSkewed10573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableSkewed10575 = new BitSet(new long[]{0x0000000000042080L,0x0001000000021800L,0x0000000000040000L,0x0000000000000000L,0x0800000002020000L,0x0000000000005802L});
	public static final BitSet FOLLOW_skewedValueElement_in_tableSkewed10580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_tableSkewed10583 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_storedAsDirs_in_tableSkewed10592 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatSerde_in_rowFormat10640 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatDelimited_in_rowFormat10656 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RECORDREADER_in_recordReader10705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_recordReader10707 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RECORDWRITER_in_recordWriter10756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_recordWriter10758 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROW_in_rowFormatSerde10807 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatSerde10809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_SERDE_in_rowFormatSerde10811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_rowFormatSerde10815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_rowFormatSerde10818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde10820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_tableProperties_in_rowFormatSerde10824 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROW_in_rowFormatDelimited10876 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatDelimited10878 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_DELIMITED_in_rowFormatDelimited10880 = new BitSet(new long[]{0x0800000000000002L,0x0004000000000000L,0x0400100800000000L});
	public static final BitSet FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited10882 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0400100800000000L});
	public static final BitSet FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited10885 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400100800000000L});
	public static final BitSet FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited10888 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000800000000L});
	public static final BitSet FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited10891 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_tableRowNullFormat_in_rowFormatDelimited10894 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatDelimited_in_tableRowFormat10953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatSerde_in_tableRowFormat10973 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed11020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_tableProperties_in_tablePropertiesPrefixed11023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_tableProperties11056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_tablePropertiesList_in_tableProperties11058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_tableProperties11060 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList11101 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_tablePropertiesList11104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList11106 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList11131 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_tablePropertiesList11134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList11136 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty11182 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_EQUAL_in_keyValueProperty11184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty11188 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_keyProperty11235 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier11279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier11281 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier11283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier11287 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
	public static final BitSet FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier11290 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier11292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier11296 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier11348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier11350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier11352 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier11354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier11358 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier11404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier11406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier11408 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier11410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier11414 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier11460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier11462 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier11464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier11468 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NULL_in_tableRowNullFormat11514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_KW_DEFINED_in_tableRowNullFormat11516 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableRowNullFormat11518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowNullFormat11522 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat11577 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat11579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_tableFileFormat11581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat11587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11591 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_INPUTDRIVER_in_tableFileFormat11594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat11600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat11642 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableFileFormat11644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11648 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_tableFileFormat11660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat11662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_tableProperties_in_tableFileFormat11666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat11697 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat11699 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_tableFileFormat11703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCATION_in_tableLocation11751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableLocation11755 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList11791 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_columnNameTypeList11794 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList11796 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_columnNameTypeOrPKOrFK_in_columnNameTypeOrPKOrFKList11833 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_columnNameTypeOrPKOrFKList11836 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameTypeOrPKOrFK_in_columnNameTypeOrPKOrFKList11838 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList11876 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_columnNameColonTypeList11879 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList11881 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_columnName_in_columnNameList11919 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_columnNameList11922 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnName_in_columnNameList11924 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_identifier_in_columnName11968 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_extColumnName12001 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_DOT_in_extColumnName12004 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_extColumnName12014 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_extColumnName12024 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_extColumnName12034 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_identifier_in_extColumnName12038 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList12068 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_columnNameOrderList12071 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList12073 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_LPAREN_in_columnParenthesesList12111 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameList_in_columnParenthesesList12113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_columnParenthesesList12115 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ENABLE_in_enableSpecification12142 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DISABLE_in_enableSpecification12156 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VALIDATE_in_validateSpecification12189 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOVALIDATE_in_validateSpecification12203 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RELY_in_relySpecification12237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NORELY_in_relySpecification12253 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PRIMARY_in_primaryKeyWithoutName12288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_KEY_in_primaryKeyWithoutName12290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_primaryKeyWithoutName12292 = new BitSet(new long[]{0x0000000000000000L,0x0000004080000000L});
	public static final BitSet FOLLOW_enableSpecification_in_primaryKeyWithoutName12296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_validateSpecification_in_primaryKeyWithoutName12300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_relySpecification_in_primaryKeyWithoutName12304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_primaryKeyWithName12352 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_primaryKeyWithName12356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_PRIMARY_in_primaryKeyWithName12358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_KEY_in_primaryKeyWithName12360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_primaryKeyWithName12364 = new BitSet(new long[]{0x0000000000000000L,0x0000004080000000L});
	public static final BitSet FOLLOW_enableSpecification_in_primaryKeyWithName12368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_validateSpecification_in_primaryKeyWithName12372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_relySpecification_in_primaryKeyWithName12376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_foreignKeyWithName12428 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_identifier_in_foreignKeyWithName12432 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_FOREIGN_in_foreignKeyWithName12434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_KEY_in_foreignKeyWithName12436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_foreignKeyWithName12440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_REFERENCES_in_foreignKeyWithName12443 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_foreignKeyWithName12447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_foreignKeyWithName12451 = new BitSet(new long[]{0x0000000000000000L,0x0000004080000000L});
	public static final BitSet FOLLOW_enableSpecification_in_foreignKeyWithName12455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_validateSpecification_in_foreignKeyWithName12459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_relySpecification_in_foreignKeyWithName12463 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FOREIGN_in_foreignKeyWithoutName12521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_KEY_in_foreignKeyWithoutName12523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_foreignKeyWithoutName12527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_REFERENCES_in_foreignKeyWithoutName12530 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_foreignKeyWithoutName12534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_foreignKeyWithoutName12538 = new BitSet(new long[]{0x0000000000000000L,0x0000004080000000L});
	public static final BitSet FOLLOW_enableSpecification_in_foreignKeyWithoutName12542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_validateSpecification_in_foreignKeyWithoutName12546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_relySpecification_in_foreignKeyWithoutName12550 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValues_in_skewedValueElement12613 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValuePairList_in_skewedValueElement12622 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList12649 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_skewedColumnValuePairList12652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList12654 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_LPAREN_in_skewedColumnValuePair12699 = new BitSet(new long[]{0x0000000000042080L,0x0001000000021800L,0x0000000000040000L,0x0000000000000000L,0x0000000002020000L,0x0000000000005802L});
	public static final BitSet FOLLOW_skewedColumnValues_in_skewedColumnValuePair12703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_skewedColumnValuePair12705 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues12748 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_skewedColumnValues12751 = new BitSet(new long[]{0x0000000000042080L,0x0001000000021800L,0x0000000000040000L,0x0000000000000000L,0x0000000002020000L,0x0000000000005802L});
	public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues12753 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_constant_in_skewedColumnValue12797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValue_in_skewedValueLocationElement12831 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement12840 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NULLS_in_nullOrdering12894 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_FIRST_in_nullOrdering12896 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NULLS_in_nullOrdering12910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_KW_LAST_in_nullOrdering12912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameOrder12945 = new BitSet(new long[]{0x0000004000000002L,0x0000000008000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_orderSpecification_in_columnNameOrder12949 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_nullOrdering_in_columnNameOrder12954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList13151 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_columnNameCommentList13154 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList13156 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_identifier_in_columnNameComment13196 = new BitSet(new long[]{0x4000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameComment13199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameComment13203 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_columnRefOrder13251 = new BitSet(new long[]{0x0000004000000002L,0x0000000008000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_orderSpecification_in_columnRefOrder13255 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_nullOrdering_in_columnRefOrder13260 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameType13459 = new BitSet(new long[]{0x0080381000000000L,0x0040000400260000L,0x0000100000010000L,0x8000000000000000L,0x0000400080060300L});
	public static final BitSet FOLLOW_colType_in_columnNameType13461 = new BitSet(new long[]{0x4000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameType13464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameType13468 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_foreignKeyWithName_in_columnNameTypeOrPKOrFK13564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_primaryKeyWithName_in_columnNameTypeOrPKOrFK13576 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_primaryKeyWithoutName_in_columnNameTypeOrPKOrFK13588 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_foreignKeyWithoutName_in_columnNameTypeOrPKOrFK13600 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameType_in_columnNameTypeOrPKOrFK13612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameColonType13643 = new BitSet(new long[]{0x0000000000000200L});
	public static final BitSet FOLLOW_COLON_in_columnNameColonType13645 = new BitSet(new long[]{0x0080381000000000L,0x0040000400260000L,0x0000100000010000L,0x8000000000000000L,0x0000400080060300L});
	public static final BitSet FOLLOW_colType_in_columnNameColonType13647 = new BitSet(new long[]{0x4000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameColonType13650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameColonType13654 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_colType13738 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_colType_in_colTypeList13765 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_colTypeList13768 = new BitSet(new long[]{0x0080381000000000L,0x0040000400260000L,0x0000100000010000L,0x8000000000000000L,0x0000400080060300L});
	public static final BitSet FOLLOW_colType_in_colTypeList13770 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_primitiveType_in_type13798 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_listType_in_type13806 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_structType_in_type13814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mapType_in_type13822 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unionType_in_type13830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TINYINT_in_primitiveType13852 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SMALLINT_in_primitiveType13873 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INT_in_primitiveType13893 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BIGINT_in_primitiveType13918 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BOOLEAN_in_primitiveType13940 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FLOAT_in_primitiveType13961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DOUBLE_in_primitiveType13984 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATE_in_primitiveType14006 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATETIME_in_primitiveType14030 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TIMESTAMP_in_primitiveType14050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STRING_in_primitiveType14084 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BINARY_in_primitiveType14106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DECIMAL_in_primitiveType14128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_primitiveType14131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_Number_in_primitiveType14135 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_COMMA_in_primitiveType14138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_Number_in_primitiveType14142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_primitiveType14146 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VARCHAR_in_primitiveType14170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_primitiveType14172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_Number_in_primitiveType14176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_primitiveType14178 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CHAR_in_primitiveType14203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_primitiveType14205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_Number_in_primitiveType14209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_primitiveType14211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ARRAY_in_listType14255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_listType14257 = new BitSet(new long[]{0x0080381000000000L,0x0040000400260000L,0x0000100000010000L,0x8000000000000000L,0x0000400080060300L});
	public static final BitSet FOLLOW_type_in_listType14259 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_listType14261 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STRUCT_in_structType14298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_structType14300 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameColonTypeList_in_structType14302 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_structType14304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MAP_in_mapType14339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_mapType14341 = new BitSet(new long[]{0x0080380000000000L,0x0040000400260000L,0x0000000000010000L,0x8000000000000000L,0x0000400000060100L});
	public static final BitSet FOLLOW_primitiveType_in_mapType14345 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_mapType14347 = new BitSet(new long[]{0x0080381000000000L,0x0040000400260000L,0x0000100000010000L,0x8000000000000000L,0x0000400080060300L});
	public static final BitSet FOLLOW_type_in_mapType14351 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_mapType14353 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNIONTYPE_in_unionType14396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_unionType14398 = new BitSet(new long[]{0x0080381000000000L,0x0040000400260000L,0x0000100000010000L,0x8000000000000000L,0x0000400080060300L});
	public static final BitSet FOLLOW_colTypeList_in_unionType14400 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_unionType14402 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNION_in_setOperator14437 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_KW_ALL_in_setOperator14439 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNION_in_setOperator14453 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator14455 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withClause_in_queryStatementExpression14493 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000100000008000L,0x0010000020000000L});
	public static final BitSet FOLLOW_queryStatementExpressionBody_in_queryStatementExpression14503 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fromStatement_in_queryStatementExpressionBody14537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_regularBody_in_queryStatementExpressionBody14546 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_withClause14564 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_cteStatement_in_withClause14566 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_withClause14569 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_cteStatement_in_withClause14571 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_identifier_in_cteStatement14597 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_KW_AS_in_cteStatement14599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_cteStatement14601 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000100000008000L,0x0010000020000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_queryStatementExpression_in_cteStatement14603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_cteStatement14606 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_singleFromStatement_in_fromStatement14630 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_setOperator_in_fromStatement14642 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_singleFromStatement_in_fromStatement14646 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_fromClause_in_singleFromStatement14853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000008000L,0x0010000020000000L});
	public static final BitSet FOLLOW_body_in_singleFromStatement14863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000008000L,0x0010000020000000L});
	public static final BitSet FOLLOW_insertClause_in_regularBody14901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0010000020000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_selectStatement_in_regularBody14913 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_valuesClause_in_regularBody14939 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectStatement_in_regularBody15063 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectClause_in_selectStatement15090 = new BitSet(new long[]{0x0100000000000002L,0x1000000200000000L,0x000000040000000AL,0x0000000000000004L,0x000A000040000002L});
	public static final BitSet FOLLOW_fromClause_in_selectStatement15097 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x000000040000000AL,0x0000000000000004L,0x000A000040000002L});
	public static final BitSet FOLLOW_whereClause_in_selectStatement15105 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x000000040000000AL,0x0000000000000004L,0x0008000040000002L});
	public static final BitSet FOLLOW_groupByClause_in_selectStatement15113 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x0000000400000008L,0x0000000000000004L,0x0008000040000002L});
	public static final BitSet FOLLOW_havingClause_in_selectStatement15121 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x0000000400000000L,0x0000000000000004L,0x0008000040000002L});
	public static final BitSet FOLLOW_orderByClause_in_selectStatement15129 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x0000000400000000L,0x0000000000000000L,0x0008000040000002L});
	public static final BitSet FOLLOW_clusterByClause_in_selectStatement15137 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000000400000000L,0x0000000000000000L,0x0008000040000002L});
	public static final BitSet FOLLOW_distributeByClause_in_selectStatement15145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0008000040000002L});
	public static final BitSet FOLLOW_sortByClause_in_selectStatement15153 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0008000040000000L});
	public static final BitSet FOLLOW_window_clause_in_selectStatement15161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_limitClause_in_selectStatement15169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_setOpSelectStatement_in_selectStatement15291 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setOperator_in_setOpSelectStatement15353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0010000020000000L});
	public static final BitSet FOLLOW_simpleSelectStatement_in_setOpSelectStatement15357 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x0000000400000000L,0x0000000000000004L,0x0008000040000002L});
	public static final BitSet FOLLOW_orderByClause_in_setOpSelectStatement15784 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x0000000400000000L,0x0000000000000000L,0x0008000000000002L});
	public static final BitSet FOLLOW_clusterByClause_in_setOpSelectStatement15792 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000000400000000L,0x0000000000000000L,0x0008000000000002L});
	public static final BitSet FOLLOW_distributeByClause_in_setOpSelectStatement15800 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0008000000000002L});
	public static final BitSet FOLLOW_sortByClause_in_setOpSelectStatement15808 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_window_clause_in_setOpSelectStatement15816 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_limitClause_in_setOpSelectStatement15824 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectClause_in_simpleSelectStatement16070 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x000000000000000AL,0x0000000000000000L,0x000A000000000000L});
	public static final BitSet FOLLOW_fromClause_in_simpleSelectStatement16075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000AL,0x0000000000000000L,0x000A000000000000L});
	public static final BitSet FOLLOW_whereClause_in_simpleSelectStatement16081 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000AL,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_groupByClause_in_simpleSelectStatement16087 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_havingClause_in_simpleSelectStatement16093 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_window_clause_in_simpleSelectStatement16106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withClause_in_selectStatementWithCTE16192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0010000020000000L});
	public static final BitSet FOLLOW_selectStatement_in_selectStatementWithCTE16200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insertClause_in_body16231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0010000020000000L});
	public static final BitSet FOLLOW_selectClause_in_body16236 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x000000042000000AL,0x0000000000000004L,0x000A000000000002L});
	public static final BitSet FOLLOW_lateralView_in_body16241 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x000000040000000AL,0x0000000000000004L,0x000A000000000002L});
	public static final BitSet FOLLOW_whereClause_in_body16247 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x000000040000000AL,0x0000000000000004L,0x0008000000000002L});
	public static final BitSet FOLLOW_groupByClause_in_body16253 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x0000000400000008L,0x0000000000000004L,0x0008000000000002L});
	public static final BitSet FOLLOW_havingClause_in_body16259 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x0000000400000000L,0x0000000000000004L,0x0008000000000002L});
	public static final BitSet FOLLOW_orderByClause_in_body16265 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x0000000400000000L,0x0000000000000000L,0x0008000000000002L});
	public static final BitSet FOLLOW_clusterByClause_in_body16271 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000000400000000L,0x0000000000000000L,0x0008000000000002L});
	public static final BitSet FOLLOW_distributeByClause_in_body16277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0008000000000002L});
	public static final BitSet FOLLOW_sortByClause_in_body16283 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_window_clause_in_body16289 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_limitClause_in_body16295 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectClause_in_body16388 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x000000042000000AL,0x0000000000000004L,0x000A000000000002L});
	public static final BitSet FOLLOW_lateralView_in_body16393 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x000000040000000AL,0x0000000000000004L,0x000A000000000002L});
	public static final BitSet FOLLOW_whereClause_in_body16399 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x000000040000000AL,0x0000000000000004L,0x0008000000000002L});
	public static final BitSet FOLLOW_groupByClause_in_body16405 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x0000000400000008L,0x0000000000000004L,0x0008000000000002L});
	public static final BitSet FOLLOW_havingClause_in_body16411 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x0000000400000000L,0x0000000000000004L,0x0008000000000002L});
	public static final BitSet FOLLOW_orderByClause_in_body16417 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L,0x0000000400000000L,0x0000000000000000L,0x0008000000000002L});
	public static final BitSet FOLLOW_clusterByClause_in_body16423 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000000400000000L,0x0000000000000000L,0x0008000000000002L});
	public static final BitSet FOLLOW_distributeByClause_in_body16429 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0008000000000002L});
	public static final BitSet FOLLOW_sortByClause_in_body16435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_window_clause_in_body16441 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_limitClause_in_body16447 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_insertClause16568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_KW_OVERWRITE_in_insertClause16570 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_destination_in_insertClause16572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_ifNotExists_in_insertClause16574 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_insertClause16593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_INTO_in_insertClause16595 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_KW_TABLE_in_insertClause16597 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableOrPartition_in_insertClause16600 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_insertClause16603 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnNameList_in_insertClause16607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_RPAREN_in_insertClause16609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCAL_in_destination16665 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_DIRECTORY_in_destination16669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_StringLiteral_in_destination16671 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_tableRowFormat_in_destination16673 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_tableFileFormat_in_destination16676 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_destination16709 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableOrPartition_in_destination16711 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LIMIT_in_limitClause16743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_Number_in_limitClause16749 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_limitClause16751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_Number_in_limitClause16757 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LIMIT_in_limitClause16780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_Number_in_limitClause16784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_KW_OFFSET_in_limitClause16786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_Number_in_limitClause16790 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DELETE_in_deleteStatement16834 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_KW_FROM_in_deleteStatement16836 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_deleteStatement16838 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_whereClause_in_deleteStatement16841 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableOrColumn_in_columnAssignmentClause16874 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_EQUAL_in_columnAssignmentClause16876 = new BitSet(new long[]{0x6F7BFFFBFC042080L,0xAF7FBD5EFFFF7AEFL,0x3EF7F7FF7EFFFFF7L,0xFFEFDFFFDFFCFB7DL,0x48F4BFFEEF7EEFEFL,0x0000000000007806L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_precedencePlusExpression_in_columnAssignmentClause16879 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_setColumnsClause16899 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnAssignmentClause_in_setColumnsClause16901 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_setColumnsClause16904 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_columnAssignmentClause_in_setColumnsClause16906 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_KW_UPDATE_in_updateStatement16948 = new BitSet(new long[]{0x6F4BFFFBFC000000L,0xAF7FBD5EFFFF7AEFL,0x3EF7E7FF7EFBFFB7L,0xFFEFDFFFDFFCFB7DL,0x00F4BFFEEF7EEFEFL,0x0000000000000000L,0x0000000000000000L,0x0440000000000022L,0x0000000000440000L});
	public static final BitSet FOLLOW_tableName_in_updateStatement16950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_setColumnsClause_in_updateStatement16952 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_whereClause_in_updateStatement16954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_startTransactionStatement_in_sqlTransactionStatement16996 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_commitStatement_in_sqlTransactionStatement17001 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rollbackStatement_in_sqlTransactionStatement17006 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setAutoCommitStatement_in_sqlTransactionStatement17011 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_START_in_startTransactionStatement17025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_TRANSACTION_in_startTransactionStatement17027 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L,0x0000000001000000L});
	public static final BitSet FOLLOW_transactionMode_in_startTransactionStatement17031 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_startTransactionStatement17036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000001000000L});
	public static final BitSet FOLLOW_transactionMode_in_startTransactionStatement17038 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_isolationLevel_in_transactionMode17069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_transactionAccessMode_in_transactionMode17075 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_READ_in_transactionAccessMode17098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_KW_ONLY_in_transactionAccessMode17100 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_READ_in_transactionAccessMode17110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_WRITE_in_transactionAccessMode17112 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ISOLATION_in_isolationLevel17131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_LEVEL_in_isolationLevel17133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_levelOfIsolation_in_isolationLevel17135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SNAPSHOT_in_levelOfIsolation17160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMIT_in_commitStatement17179 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_WORK_in_commitStatement17183 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROLLBACK_in_rollbackStatement17205 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_WORK_in_rollbackStatement17209 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_setAutoCommitStatement17230 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_KW_AUTOCOMMIT_in_setAutoCommitStatement17232 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_booleanValueTok_in_setAutoCommitStatement17234 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ABORT_in_abortTransactionStatement17269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_TRANSACTIONS_in_abortTransactionStatement17271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_Number_in_abortTransactionStatement17275 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_grantPrivileges_in_synpred1_HiveParser1911 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokePrivileges_in_synpred2_HiveParser1925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRename_in_synpred3_HiveParser3881 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_synpred4_HiveParser6473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_synpred5_HiveParser6490 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_synpred6_HiveParser6507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_synpred8_HiveParser6715 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMPUTE_in_synpred10_HiveParser6874 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CACHE_in_synpred11_HiveParser7014 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_synpred14_HiveParser8399 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NONE_in_synpred15_HiveParser8430 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_synpred16_HiveParser8604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_storedAsDirs_in_synpred17_HiveParser10587 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_synpred18_HiveParser11568 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_KW_AS_in_synpred18_HiveParser11570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_synpred18_HiveParser11572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_synpred19_HiveParser12009 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_synpred20_HiveParser12019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_synpred21_HiveParser12029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_window_clause_in_synpred22_HiveParser16101 = new BitSet(new long[]{0x0000000000000002L});
}
